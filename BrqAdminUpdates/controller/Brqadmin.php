<?php
ini_set('display_errors', 1);
error_reporting(E_ALL); 
//include_once(APPPATH."third_party/PhpWord/Autoloader.php");
ob_start();// this is required to session start error in the server version only;
defined('BASEPATH') OR exit('No direct script access allowed');

use PhpOffice\PhpWord\Autoloader;
use PhpOffice\PhpWord\Settings;

/*
use \PhpWord\Autoloader;
use \PhpWord\Settings;
Autoloader::register();
Settings::loadConfig();
*/

class BrqAdmin extends MY_Controller {


	var $headTitle                  ="";
    var $adminController            =""; // site taxtower report controller
	var $reportController			="";
	var $investmentClientController	="";
	
	 // new on 15/06
	var $accountTitle               ="";
    var $accountController          ="";
	var $accountReportController    ="";
	
	
	var $payrollTitle				=""; 
	var $payrollController          ="";
	var $payrollReportController    ="";
	
    
	var $hrController          		="";
	var $hrTitle          			="";
	var $hrReportController    		="";

	var $leadController          		="";
	var $leadTitle          			="";
	var $leadReportController    		="";
	
   // end new 15/06
	

   function __construct()
	{
		parent::__construct();
		parent::updateSys_counterWithAllTables(); // Defined in My_Controller
		
		//------ ini settings --->
		ini_set('max_execution_time',400);
        ini_set('memory_limit', '64M'); //Raise to 512 MB
        ini_set('post_max_size', '64M');
        ini_set('upload_max_filesize', '64M');
        ini_set("date.timezone", "Asia/Kolkata");
        date_default_timezone_set('Asia/Kolkata');
		
		// ----------- FOR CORS POLICY BLOCKING ------------------
		header('Access-Control-Allow-Origin: *');
		header("Access-Control-Allow-Headers: X-API-KEY, Origin, X-Requested-With, Content-Type, Accept, Access-Control-Request-Method");
		header("Access-Control-Allow-Methods: GET, POST, PUT, DELETE");
		
	    //$this->load->library('database');
				
		//--------- models loading ------
		$this->load->model("AdminModel");
		$this->load->model("Common_model");
		$this->load->model("User_model");
		$this->load->model("Employee_model");
		$this->load->model("Client_model");
		$this->load->model("UserGroup_model");
		$this->load->model("ProductCategory_model");
		$this->load->model("AdminMainMenu_model","adminMainMenu");
		$this->load->model("AdminSubMainMenu_model","adminSubMainMenu");
		$this->load->model("AuditLog_model");
		$this->load->model("AuditLogDetails_model");
		$this->load->model("ClientProductLicenceDetails_model");
		$this->load->model("ClientProductPurchase_model");
		$this->load->model("ClientProductLicence_model");
		$this->load->model("HRSettings_model");
		$this->load->model("Projects_model");
		$this->load->model("Services_model");
		$this->load->model("ServicesCat_model");
		$this->load->model("Clientmenu_model");
		$this->load->model("LiveDoc_model");
		$this->load->model("Overtime_model");
		$this->load->model("OvertimeCat_model");
		$this->load->model("JobTitles_model");
		$this->load->model("PayGrades_model");
		$this->load->model("EmploymentStatus_model");
		$this->load->model("Qualification_model");
		$this->load->model("JobSkills_model");
		$this->load->model("JobEducation_model");
		$this->load->model("JobCertifications_model");
		$this->load->model("Branches_model");
		$this->load->model("Salary_model");
		$this->load->model("CompanyLoans_model");
		$this->load->model("TravelRequests_model");
		$this->load->model("CompanyLeave_model");
		$this->load->model("JobExperience_model");
		$this->load->model("Experience_model");
		$this->load->model("Department_model");
		$this->load->model("CompanyDocument_model");
		$this->load->model("EmployeeDocument_model");
		$this->load->model("EmployeeDocumentType_model");
		$this->load->model("FAQ_model");
		$this->load->model("News_model");
		$this->load->model("Product_model");
		$this->load->model("ClientWhatsApp_model");
		$this->load->model("ClientSMS_model");
		$this->load->model("ImageGallery_model");
		$this->load->model("TrendingNews_model");
		$this->load->model("TrendingNewsComments_model");
		$this->load->model("FooterLink_model");	
		$this->load->model("SetNumber_model");			
		$this->load->model("TableCounter_model");
		$this->load->model("Registered_Employee_model");
		$this->load->model("PayrollSalaryType_model");
		$this->load->model("PayrollSalary_model"); 
		$this->load->model("PayrollEmployeeSalary_model");
		$this->load->model("PaymentBanks_model");	
		$this->load->model("SiteCaptions_model");		
		$this->load->model("BannerImage_model");
		$this->load->model("AdminReportMainMenu_model","adminReportMainMenu");
		$this->load->model("AdminReportSubMenu_model","adminReportSubMenu");
		$this->load->model("QuerySubject_model");
		$this->load->model("ClientProfession_model");
		$this->load->model("CompanyType_model");
		$this->load->model("Language_model");
		$this->load->model("EmployeeLanguage_model");
		$this->load->model("EmployeeDependent_model");
		$this->load->model("EmployeeContact_model");
		$this->load->model("EmployeePF_model");
		$this->load->model("EmployeeESI_model"); 
		$this->load->model("EmployeeBeneficiary_model");
		$this->load->model("ProductPlan_model"); 
		$this->load->model("ProductModule_model"); 
		$this->load->model("InstallmentBundle_model");
		$this->load->model("LegalAboutUs_model"); 
		$this->load->model("QuoteTermsConditions_model");
		$this->load->model("MonitorAttendance_model");
		$this->load->model("SMSLogAdmin_model"); 
		$this->load->model("SMSTemplatesSettings_model"); 
		$this->load->model("Team_model");
		$this->load->model("Directors_model"); 
		$this->load->model("SalaryReimbursementHead_model");
		$this->load->model("SalaryReimbursementApplication_model");
		$this->load->model("SocialMediaURL_model"); 
		$this->load->model("LeaveType_model");
		$this->load->model("LeaveApplication_model"); 
		$this->load->model("PaymentAPISettings_model"); 
		$this->load->model("EmailAPISettings_model"); 
		$this->load->model("SetNumberLogAdmin_model");
		$this->load->model("AdminMainMenuCategory_model","adminMainMenuCategory");
		$this->load->model("JobApplication_model");
		$this->load->model("LoanApplication_model"); 
		$this->load->model("EmployeeLoan_model");
		$this->load->model("AdminUnderSubMainMenu_model"); 
		$this->load->model("UpiImage_model");
		$this->load->model("ERPProjects_model");
		$this->load->model("DiscountProduct_model");
		// $this->load->model("salesComplaint_model");
		$this->load->model("ClientNotification_model");
		$this->load->model("ContactModel");
		
		//------ Common Site Settings - ini settings from Common_model--->
		$this->Common_model->commonSiteSettings();
		
		//------ Deleting expired OTPs from sys_otp table from Common_model--->
		$this->Common_model->deleteExOTP();	
		// ------- models loading end -------
		
		// loading config settings from different config files.
		$this->loadConfiguration_settings(); // Defined in My_Controller
		
		$this->load->helper("php_image_magician"); // for image upload manupulation
		
		
		// --- for auto udate tables
		
		parent::unblockAllBlockExpiredUsers(); 	  // Defined in My_Controller
		parent::updateSys_counterWithAllTables(); // Defined in My_Controller
		parent::updateSys_UserPermissionTables(); // Defined in My_Controller
		// parent::getAllAdminMenuCategory();
		
 		
	}
	
	
	public function no_javascript_error()
	{
		$this->load->helper("url");
		if( isset($_REQUEST["err"]) ) 
		{
			$errorCode = "javascript error,  javascript is disabled in the client browser";
			if(   $_REQUEST["err"]  == encrypt_decrypt ("E",$errorCode ))
				$this->load->view("brq-admin/no-javascript-error");
			else
				{
					redirect( base_url(), "refresh");
				}	
		}	
	    else  
		{
				
				redirect( base_url(), "refresh");
			
		}
	
	}

	/*private function redirect()
    {
         if (!$this->input->is_ajax_request()) 
           exit("Access denied");
    }
	
	private function isSessionSet()
	{
	if(!isset($_SESSION['ADMIN_ID']) && !isset($_SESSION['ADMIN_USER_TYPE']) && !isset($_SESSION['ADMIN_LOGIN_ID']))
	   return FALSE;
	else
	    return TRUE;	
	}*/
	
	
	

	

//fillCombo() function for loading the table values into select box's option
	public function fillCombo()
	{
		$table 		= 	isset($_REQUEST["tbl"]) ? $_REQUEST["tbl"] : "" ;
		$where 		=  	isset($_REQUEST["where"]) ? $_REQUEST["where"] : "";
		$dField1 	= 	isset($_REQUEST["dField1"]) ? $_REQUEST["dField1"] : "";
		$dField2 	= 	isset($_REQUEST["dField2"]) ? $_REQUEST["dField2"] : "";
		$order 		= 	isset($_REQUEST["order"]) ? $_REQUEST["order"] : "";
		$vField	 	= 	isset($_REQUEST["vFiled"]) ? $_REQUEST["vFiled"] : "";
		
		$select 			= isset($_REQUEST["sel"]) ? $_REQUEST["sel"] : "";
		$defaultSelectText 	= isset($_REQUEST["dSelect"]) ? $_REQUEST["dSelect"] : ""; // this is the default select option value.
		
		$db 		= new Database();
		echo $db->fillCombo($table, $dField1, $select, $dField2="", $vField, $where, $order, $defaultSelectText);
		$db = NULL;
               
	} 

	// Loading the splash Screen
	public function index()
	{
		$data 					 = array();
	
		$data					 = $this->get_module_list();
		$data["headTitle"] 		 = $this->headTitle;
        $data["adminController"] = $this->adminController;
		
		
		
		$this->load->view("brq-admin/splash-screen/index", $data);
		
		
	}
	
	//Loading login view
	public function login()
	{
		
		$request_url = ((isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == "on") ? "https" : "http");
		$request_url .= "://". @$_SERVER['HTTP_HOST'];
		// echo $request_url ;
		$data 					 = array();
		$data["headTitle"] 		 = $this->headTitle;
        $data["adminController"] = $this->adminController;
		
		$db			 = new Database();
		
		$userGroup   = $db->fillCombo("sys_user_group", "UserGroup", "...Choose...", "", "Id", "Status='Active'", "UserGroup");
		$data["userGroup"] 	= $userGroup;
		$_SESSION["USER_GROUP"] = $userGroup ;
		$_SESSION["REQUEST_URL"] = $request_url;

		$SQL  = "SELECT LocalVirtualHost,Url,Id from sys_erp_projects";
		$res 			= $this->db->query($SQL);
		$result = $res->result_array();
		
		foreach($result as $url)
		{
			$projectUrl = $url["Url"] ;
			$Url = explode(",",$projectUrl);
			if(in_array($request_url,$Url))
			{
				
				$_SESSION["PROJECT_ID"]	=$url["Id"];

			}
			$projectVirtualHost = $url["LocalVirtualHost"] ;
			$LocalVirtualHost = explode(",",$projectVirtualHost);
			if(in_array($request_url,$LocalVirtualHost))
			{
			
				$_SESSION["PROJECT_ID"]	=$url["Id"];
			}
		}
		
		$db					=null;
		$this->load->view("brq-admin/login", $data);
		
	}
	
   // relocate access-denied page  - Sruthi 
	public function accessDenied()
	{
				$this->load->view("brq-admin/access-denied");
		
	}
	
	
	public function adminHome()
	{
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $this->AccessDenied();// AJAX Verification
		//$_SESSION["USER_MODULE_PAGE"]	="adminHome"; // for lock screen management;
		//$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 							= array();
		$headTitleAddText				= " : Login as ";
		$headTitleAddId					= $_SESSION['ADMIN_ID'];
		// $data					 		= $this->get_module_list();
		$data 							= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data1					 		= $this->get_module_list();
		$data["payrollController"]  	= $this->payrollController;
		$data["leadController"]  		= $this->leadController;
		$data["hrController"]  			= $this->hrController;
		$data["accountsController"] 	= $this->accountsController;
		$data["hrManagementController"] 	= $this->hrManagementController;
		$data                           = (object) array_merge((array) $data,(array) $data1);
		$this->load->view("brq-admin/index", $data);
		
	}

	public function blank_one_column()
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$_SESSION["USER_MODULE_PAGE"]	="blank_page"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		
		$this->load->view("brq-admin/layout-one-column-blank", $data);
		
		
		
	}
	
	public function blank_page()
	{
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$_SESSION["USER_MODULE_PAGE"]	="blank_page"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		
		$this->load->view("brq-admin/copy4-blank-page", $data);
		
	}

	public function access_denied($id="")
	{

	}
	
	//  --- New function for Payroll Start --- //

	public function payroll($id)
	{
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $fuctionName =  $this->uri->segment(2);
		// $db = new Database();
		// $Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		// $this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	="payroll"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["Id"]				= $id;
		
		$this->load->view("brq-admin/payroll", $data);
		
	}

	//  --- New function for Payroll End --- //

	//  --- New function for Employee Database Start --- //

	public function employee_database()
	{
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	="employee-database"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		
		$this->load->view("brq-admin/employee-database", $data);
		
	}

	//  --- New function for Employee Database End --- //

	//  --- New function for HR Start --- //

	public function hr($id)
	{
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$_SESSION["USER_MODULE_PAGE"]	="hr"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["Id"]				= $id;
		
		$this->load->view("brq-admin/hr-home", $data);
		
	}

	//  --- New function for HR End --- //

	//  --- New function for HR-JOB-HOME Start --- //

	public function hr_job_home($subId)
	{
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	="hr-job-home"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["Id"]				= $subId;
		
		$this->load->view("brq-admin/hr-job-home", $data);
		
	}

	//  --- New function for HR-JOB-HOME End --- //

	//  --- New function for HR-FINANCE-HOME Start --- //

	public function payroll_finance_home($subId)
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	="hr-finanace-home"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["Id"]				= $subId;
		$this->load->view("brq-admin/hr-finance-home", $data);
		
	}

	//  --- New function for HR-JOB-FINANCE End --- //
	
	
	//  --- Function for Payroll Leave Management Start --- //

	public function leave_management_home($subId)
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	="leave-management-home"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["Id"]				= $subId;;
		$this->load->view("brq-admin/leave-management-home", $data);
	}

	//  --- Function for Payroll Leave Management End --- //
	
	// -------------------------- Leave Management module starts ----------------
	// Leave Type module start ----------------
	public function leave_types()
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $fuctionName =  $this->uri->segment(2);
		// $db = new Database();
		// $Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		// $this->isAccessDenied($Id);
		$moduleTab="leave_types";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		
		$this->load->view("brq-admin/leave-types", $data);
	}
	
	//====================================Function to get DataTables of Leave Type List ================================
	public function leaveTypeList()
	{
		$leaveType  	= $this->input->post('leaveType');
		$code 			= $this->input->post('code');
		$list 	= $this->LeaveType_model->getDataTables($leaveType,$code);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start'];
		
		//$no=1;
		
		foreach ($list as $data) {
		
			$actions	 = "";
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$row[] = $data->Name;
			$row[] = $data->Code;
			$row[] = $data->DefaultCredit;
			if($data->Status=="Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			
		    $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			
			//add html for action
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"  aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>'
	                  .'<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editLeaveType('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>'
	                  .'<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editLeaveType('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>'
					  .'<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteLeaveType('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>'
	                  .' </div>'
	                  .'</div>';
			
			$row[] = $actions;
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->LeaveType_model->countAll(),
						"recordsFiltered" => $this->LeaveType_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
		
	//==================================== saveLeaveType function for Saving Leave Type details - by Sajitha ================================
	public function saveLeaveType()
	{
		$id				= $this->input->post("hidID");
		
		$data 			= array();  
		$leaveTypeName = $this->input->post('Leave_Type');
	  
		$db  			= new Database();
		$where   		= " Name='".$leaveTypeName."' and Id!={$id}";
		$res 			= $db->checkExistance("prl_leave_types", $where); // if exists id value will be returned.
	
		if($res)
		{
			
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Leave Type Name is already created and exists! Please change Leave Type Name."
									 )
							);
			exit;
		}
		
		$where   		= " Code='".$this->input->post('Code')."' and Id!={$id}";
		$res 			= $db->checkExistance("prl_leave_types", $where); // if exists id value will be returned.
	
		if($res)
		{
			
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Leave Type Code is already created and exists! Please change Leave Type Code."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'Name' => $leaveTypeName,
						'Description' => $this->input->post('Description'),
						'Status' => $this->input->post('Status'), 
						'DefaultCredit' => $this->input->post('Leave_Credit'),
						'Code' => $this->input->post('Code'),
						'CreatedOn' => date('Y-m-d H:i:s'),
					);
		}
		else { // if edit
				$data = array(
						'Name' => $leaveTypeName,
						'Description' => $this->input->post('Description'),
						'Status' => $this->input->post('Status'),
						'DefaultCredit' => $this->input->post('Leave_Credit'),
						'Code' => $this->input->post('Code'),
						'ModifiedOn' => date('Y-m-d H:i:s'),					
						);
		}
	  
		$res	= $this->LeaveType_model->saveData($data, $id);
	   
		$db = new BrqDatabase();
		$resCombo = $db->getLeaveTypeNameCombo();
		$resCodeCombo = $db->getLeaveTypeCodeCombo();
		$resData    = array(
							"status" => true,
							'message' => 'Leave Type details saved successfully!!',
							'filterLeaveType' => $resCombo,
							'filterLeaveTypeCode' => $resCodeCombo
					 );	
		
	    echo json_encode($resData);
	} 
	
	//=========================== getEditLeaveType function used for getting a Leave Type details by id from prl_leave_types table===========================	 
	public function getEditLeaveType($id)
	{
		$data = $this->LeaveType_model->getById($id);
		echo json_encode($data);
	} 
	
	//=========================== deleteLeaveType function used for deleting Leave Type details by id from prl_leave_types table===========================	 
	public function deleteLeaveType($id)
	{
       $res    =  $this->LeaveType_model->deleteData($id);
       $resData =array();
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
	   if($res['status'])
	   {
			$db = new BrqDatabase();
			$resCombo = $db->getLeaveTypeNameCombo();
			$resCodeCombo = $db->getLeaveTypeCodeCombo();
			$resData    = array(
								"status" => true,
								'message' => 'Leave Type deleted successfully!!',
								'filterLeaveType' => $resCombo,
								'filterLeaveTypeCode' => $resCodeCombo
						 );	
			
		}
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData); 
    }    
	
	// Leave Application module start ----------------

	public function leave_applications($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $fuctionName =  $this->uri->segment(2);
		// $db = new Database();
		// $Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		// $this->isAccessDenied($Id);
		$moduleTab="leave_applications";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]		= $id;
		$data["moduleTab"]		= $moduleTab; // product or product_category
		
		$this->load->view("brq-admin/leave-application", $data);
	} 
	
	//====================================Function to get DataTables of Leave Applications List ================================
	public function leaveApplicationList($underSubId="")
	{
		$employeeId  	= $this->input->post('employeeId');
		$leaveType 		= $this->input->post('leaveType');
		$branch			= $this->input->post('branch');
		$department		= $this->input->post('department');
		$list 			= $this->LeaveApplication_model-> getDataTables($employeeId,$leaveType,$branch,$department);
				
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start'];
		
		
		foreach ($list as $data) {
		
			$actions	 = "";
			$statusClass 	= "label label-primary";
			$statusText	 	= "Pending";
			
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$db = new Database();
			$profilePath 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/';
			$mainPhoto		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$data->EmployeeId}'");
			if($mainPhoto == '') {
				if($db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'") == "Male")
					$mainPhoto 	= "male.png";
				else
					$mainPhoto 	= "female.png";
			}
			
			$profilePhotoLarge 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").$mainPhoto;
			$profilePhoto 	= $profilePath.$mainPhoto;
			if(!(file_exists($db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/'.$mainPhoto)) || $mainPhoto == '') {
				if($db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'") == "Male")
					$profilePhoto 	= $profilePath."male.png";
				else
					$profilePhoto 	= $profilePath."female.png";
			}
			$row[] = '<a href="javascript:void(0)" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';			
			$row[] = $db->getFieldValueById("employee_master", "Code", "Id='{$data->EmployeeId}'");
			
			$firstName = $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'");
			$lastName = $db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");
			$row[] = $firstName." ".$lastName;
			$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
			$branchName = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");
			$row[] = $branchName;
			$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
			$depName = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");
			$row[] = $depName;
			
			$row[] = $db->getFieldValueById("prl_leave_types", "Name", "Id='{$data->LeaveTypeId}'");
			$row[] = date('d/m/Y h:i:s a', strtotime($data->StartDate)); 
			$row[] = date('d/m/Y h:i:s a', strtotime($data->EndDate));
			if($data->Status=="Denied")
			{
				$statusClass = "label label-danger";
				$statusText  = "Denied";
			} else if($data->Status=="Approved")
			{
				$statusClass = "label label-success";
				$statusText  = "Approved";
			} else if($data->Status=="Cancelled")
			{
				$statusClass = "label label-warning";
				$statusText  = "Cancelled";
			}
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			
		    $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Under_Visible_".$underSubId;
			$edit ="Under_Edit_".$underSubId;
			$copy ="Under_Copy_".$underSubId;
			$delete = "Under_Del_".$underSubId;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
				
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				
				$actions .='<div class="dropdown-menu" role="menu" style="">'
						.'<a id="viewButton"  class="dropdown-item text-primary view_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to View" onclick="viewLeaveApplication('."'".$data->Id."'".')"><span class="fa fa-eye"></span> View</a>';

					}
			if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
			{	
				if(($data->Status != 'Cancelled') || ($data->Status != 'Approved' && $data->Status != 'Denied')) {
						$actions .= '<div class="dropdown-divider"></div>'
								.'<a id="updateButton"  class="dropdown-item text-info update_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Update Status"  onclick="updateStatus('."'".$data->Id."'".','."'".$data->Status."'".');"><span class="fa fa-pencil text-fanger"></span> Update Status</a>';
				}
				// else {
				// 	$actions .= '<div class="dropdown-divider"></div>'
				// 				.'<a id="updateButton"  class="dropdown-item text-info update_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Update Status"  onclick="updateStatus('."'".$data->Id."'".','."'".$data->Status."'".');"><span class="fa fa-pencil text-fanger"></span> Update Status</a>';	
				// }		  
			}
			if(in_array($edit,$userGroupPermission) || in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
						  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editLeaveApplication('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
						.'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteLeaveApplication('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			$actions .=' </div>'
						.'</div>';
						  //add html for action
			// $actions = '<div class="btn-group">'
	        //           .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"  aria-expanded="false">'
	        //           .'Action<span class="sr-only">Toggle Dropdown</span>'
	        //           .'</button>'
	        //           .'<div class="dropdown-menu" role="menu" style="">'
			// 		  .'<a id="viewButton"  class="dropdown-item text-primary view_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to View" onclick="viewLeaveApplication('."'".$data->Id."'".')"><span class="fa fa-eye"></span> View</a>';
			
			// if(($_SESSION['ADMIN_USER_TYPE'] == 'SUPER ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'HR') || ($data->Status != 'Approved' && $data->Status != 'Denied')) {		  		  
			// 	if(($_SESSION['ADMIN_USER_TYPE'] == 'SUPER ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'HR')) {
			// 		if($data->Status != 'Cancelled') {
			// 			$actions .= '<div class="dropdown-divider"></div>'
			// 				  .'<a id="updateButton"  class="dropdown-item text-info update_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Update Status"  onclick="updateStatus('."'".$data->Id."'".','."'".$data->Status."'".');"><span class="fa fa-pencil text-fanger"></span> Update Status</a>';
			// 		}
			// 	} else 
			// 		$actions .= '<div class="dropdown-divider"></div>'
			// 				  .'<a id="updateButton"  class="dropdown-item text-info update_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Update Status"  onclick="updateStatus('."'".$data->Id."'".','."'".$data->Status."'".');"><span class="fa fa-pencil text-fanger"></span> Update Status</a>';	
			// }		  
			
			// if($_SESSION['ADMIN_USER_TYPE'] == 'SUPER ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'ADMIN') {		  
	        //     $actions .= '<div class="dropdown-divider"></div>'
			// 		  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editLeaveApplication('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>'
	        //           .'<div class="dropdown-divider"></div>'
	        //           .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteLeaveApplication('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			// }
		    // $actions .=' </div>'
	        //           .'</div>';
			
			$row[] = $actions;
			$data1[] = $row;
		}
		
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->LeaveApplication_model->countAll(),
						"recordsFiltered" => $this->LeaveApplication_model->countFiltered($employeeId,$leaveType,$branch,$department),
						"data" => $data1
				);
		//output as json format
		echo json_encode($output);
	}

	//=========================== getViewLeaveApplication function used for getting a Leave Application details by id from prl_leave_applications table===========================	 
	public function getViewLeaveApplication($id)
	{
		$data = $this->LeaveApplication_model->getById($id);
		$resData = array();
		$db = new Database();
		$fullName = $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");	
		$code = $db->getFieldValueById("employee_master", "Code", "Id='{$data->EmployeeId}'");		
		$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
		$branchName = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");
		$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
		$depName = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");
		$leaveType = $db->getFieldValueById("prl_leave_types", "Code", "Id='{$data->LeaveTypeId}'")." - ".$db->getFieldValueById("prl_leave_types", "Name", "Id='{$data->LeaveTypeId}'");
		
	    $resData = array(
						"BranchName" => $branchName,
						"DepName" => $depName,
						"EmployeeCode" => $code,
						"FullName" => $fullName,
						"LeaveType"	=> $leaveType,
				 );
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData);
	} 
	
	//=========================== getEditLeaveApplication function used for getting a Leave Application details by id from prl_leave_applications table===========================	 
	public function getEditLeaveApplication($id)
	{
		$data = $this->LeaveApplication_model->getById($id);
		$resData = array();
		$db = new Database();			
		$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
		$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
	    $resData = array(
						"BranchId" => $branchId,
						"DepId" => $depId
				 );
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData);
	} 
	
	//==================================== saveLeaveApplication function for Saving Leave Application details - by Sajitha ================================
	public function saveLeaveApplication()
	{
		$id				= $this->input->post("hidID");
		$empId			= $this->input->post('EmployeeId');
		$data 			= array(); 
		
		$sdate_str 		= strtotime($this->input->post('Start_Date'));
		$startdate = date('Y-m-d H:i:s',$sdate_str);
		
		$edate_str  	= strtotime($this->input->post('End_Date'));
		$enddate 	= date('Y-m-d H:i:s',$edate_str);
		
		if(!$_SESSION['ADMIN_ID']) {
			$db = new Database();			
			$createdBy = $db->getFieldValueById("employee_master", "FirstName", "Id='{$empId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$empId}'");
		} else
			$createdBy = $_SESSION['ADMIN_ID'];
		
		if($id==0) // if add
		{    
			$data = array(
						'EmployeeId' => $this->input->post('EmployeeId'),
						'LeaveTypeId' => $this->input->post('Leave_Type'),
						'Reason' => $this->input->post('Reason'),
						'Type' => $this->input->post('Leave_Application_Type'), 
						'LeaveDays' => $this->input->post('Leave_Days'),
						'StartDate' => $startdate,
						'EndDate' => $enddate,
						'CreatedBy' => $createdBy,
						'CreatedOn' => date('Y-m-d H:i:s'),
					);
		}
		else { // if edit
				$data = array(
						'EmployeeId' => $this->input->post('EmployeeId'),
						'LeaveTypeId' => $this->input->post('Leave_Type'),
						'Reason' => $this->input->post('Reason'),
						'Type' => $this->input->post('Leave_Application_Type'), 
						'LeaveDays' => $this->input->post('Leave_Days'),
						'StartDate' => $startdate,
						'EndDate' => $enddate,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),					
						);
		}
	  
		$res	= $this->LeaveApplication_model->saveData($data, $id);
	   
		
		$resData    = array(
							"status" => true,
							'message' => 'Leave Application details saved successfully!!'
					 );	
		
	    echo json_encode($resData);
	} 
	
	//=========================== deleteLeaveApplication function used for deleting Leave Application details by id from prl_leave_applications table===========================	 
	public function deleteLeaveApplication($id)
	{
       $res    =  $this->LeaveApplication_model->deleteData($id);
       $resData =array();
	  
	   if($res)
	   {
			$resData    = array(
								"status" => true,
								'message' => 'Leave Application deleted successfully!!'
						 );	
			
		}
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Leave Application!!"
				   );
	   }
	    
		echo json_encode($resData); 
    }     
	
	//=========================== updateLeaveApplicationStatus function used for updating Leave Application status by id in prl_leave_applications table===========================	 
	public function updateLeaveApplicationStatus()
	{
		$id				= $this->input->post("hidID");
		$status			= $this->input->post("status");		
		if($status == 'Approved')
			$approvedBy = $_SESSION['EMPLOYEE_ID'];
		else
			$approvedBy = null;
		
		$data = array(
						'Approved_by' =>$approvedBy,
						'Status' =>$status,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s')
					);
		
		$this->db->update('prl_leave_applications',$data, array('Id' =>$id)); // 3rd argument is where
		$resData=array(
					"status"=>true,
					"message"=>"Leave Application Status updated!"
				   );
		echo json_encode($resData);	   
	}
	
	//========================== Reports function  Start === kamaru ============================= For loading different report access.....
	public function reports() // --- for all other fron
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	="reports"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["reportController"] = $this->reportController;
		
		$this->load->view("brq-admin/reports", $data);
		
	}
	
	//  --- New function for DEVELOPER SETTINGS Start -------------- SIVANYA-17-8-21------------//
	
	public function developer_settings($id)
	{
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}

		$_SESSION["USER_MODULE_PAGE"]	="developer_settings"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["Id"]				= $id;
		
		$this->load->view("brq-admin/developer_settings_home", $data);
		
	}
	
	// function to load settings home [ Author:Akhila ]
	public function settings($id)
	{
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$_SESSION["USER_MODULE_PAGE"]	="settings"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["Id"]				= $id;
		
		$this->load->view("brq-admin/settings-home", $data);
		
	}
	
//  --- New function for DEVELOPER SETTINGS END --- //

// ============== blocked account checking ======= 24-12-21	
function account_blocked($loginId=0)
{
	if($loginId==0)
		redirect( base_url(), "refresh");
	
	
	$SQL  = "SELECT `BlockedFor`, `Status`, AttemptStatus FROM login";
	$SQL .= " WHERE Id ='{$loginId}'";
	
	$row 			= $this->db->query($SQL)->row();
	$expiryDateTime = "";
	$data = array();
	
	if(isset($row))
	{
		$expiryDateTime  = $row->BlockedFor;
		$status 		 = $row->Status;
		$attemptStatus 	 = $row->AttemptStatus;
		
		$data ["status"] 		= $status;
		$data ["attemptStatus"] = $attemptStatus;
		
		$expiryDateTime = date('M d, Y H:i:s',  strtotime($expiryDateTime));
			
	}
	
	$data ["ExpiryDateTime"] = $expiryDateTime;
	$this->load->view("brq-admin/account-blocked", $data);
}
	
	//  new adminLoginCheck
	// ============== blocked account checking changes made on ======= 24-12-21	
 /*   public function adminLoginCheck()
	{
		$this->redirect(); // AJAX Verification

		 $userId    		=$_POST['userId'];
         $userPass  		=$_POST['password']; 
		 $userGroupId 		=$_POST['userGroup'];
	 	
	// ============== blocked account checking ======= 24-12-21	
	$SQL  = "SELECT  `Status`, AttemptStatus FROM login";
	$SQL .= " WHERE UserId ='{$userId}'";
	
	$row 			= $this->db->query($SQL)->row();
	$expiryDateTime = "";
	$data = array();
	
		
		$expiryDateTime  = $row->BlockedFor;
		$status 		 = $row->Status;
		$attemptStatus 	 = $row->AttemptStatus;
		
		$data ["status"] 		= $status;
		$data ["attemptStatus"] = $attemptStatus;
		
		$expiryDateTime = date('M d, Y H:i:s',  strtotime($expiryDateTime));
			
	
	
	if( $status=="Blocked" || $attemptStatus=="Blocked" )
	{	
	 $data ["ExpiryDateTime"] = $expiryDateTime;
	 $this->load->view("brq-admin/account-blocked", $data);
	 exit;

	}	
	// ============== blocked account checking END=======24-12-21	

		
		
		$res = $this->AdminModel->adminLoginCheck($userId, $userPass, $userGroupId);
        $data =array();
		
		
		// ============== blocked account checking ======= 24-12-21	
			// if login attempts blocked
			if($res>0) 
			{
				
				
				$data = array( 
								 "status" => false,
							     "msg"  => $res
							);
					echo json_encode($data);
					return;
			 }
	 		
		// ============== blocked account checking ======= 24-12-21	
		 
        if($res==FALSE)
			{
			    $data = array( 
								"status" => false,
							     "msg"  => "Invalid user name or password"
				
							);
			   
			 }
	 
        else if($res==TRUE) // ============== blocked account checking ======= 24-12-21	
         { 
        	$data = array( 	
							  "status" => true,
							  "msg"  => "success"
				
							);
            
         }
         echo json_encode($data);
}
*/
// old adminLoginCheck
public function adminLoginCheck()
	{
		$this->redirect(); // AJAX Verification

		 $userId    		=$_POST['userId'];
         $userPass  		=$_POST['password']; 
		 $userGroupId 		=$_POST['userGroup'];
	 	 $projectId			=$_SESSION["PROJECT_ID"];
		
		  $db  = new Database();
		
		$where = "Id='{$userGroupId}'";
		 $projectIdTable  = $db->getFieldValueById("sys_user_group", "BrqProjectId", $where); // getting menu right status
		 
		 $userGroupProject  = explode(",",$projectIdTable);	
			
			if(in_array( $projectId	,$userGroupProject))
			{
				$res = $this->AdminModel->adminLoginCheck($userId, $userPass, $userGroupId);
			}
			else
			{
				
				$whereClouse = "UserId='{$userId}'";
				$userProjectIdTable  = $db->getFieldValueById("login", "BrqProjectId", $whereClouse); 
				$userProject  = explode(",",$userProjectIdTable);	
				
					if(in_array( $projectId	, $userProject))
					{
						$res1 = $this->AdminModel->adminLoginCheck($userId, $userPass, $userGroupId);
					}
			
				$userLogId  = $db->getFieldValueById("login", "Id", $whereClouse); 
			}
			$userPermission  = $db->getFieldValueById("sys_user_wise_permission", "Permission", "UserLoginId='{$userLogId}'");
			$_SESSION["USER_PERMISSION"]	=$userPermission ;
			
			$permission  = $db->getFieldValueById("sys_user_group_permission", "Permission", "UserGroupId='{$userGroupId}'");
			$_SESSION["GROUP_PERMISSION"]	=$permission ;
			
				
        if($res==FALSE && $res1==FALSE)
			{
			    $data = array( 
								"status" => false,
							     "msg"  => "Invalid user name or password",
							);
			 }
         else
         { 
        	$data = array( 	
							  "status" => true,
							  "msg"  => "success",
							  
							);
         }
         echo json_encode($data);
	}
	
   public function deleteUserPhoto($id)
   {
       $res    =  $this->User_model->deleteUserPhoto($id);
        echo $res;
   }
   
   public function editUserPhoto()
   {
      $id	 =$this->input->post('Id');
      
      if(isset($_FILES["userfile"]))
               {
                   
                    //------ creating the file Name ----------
                    $fileExtention  = end(explode(".",$_FILES["userfile"]["name"])); // getting the file extention
                    $uploadFileName = md5(date('Y-m-d H:i:s:u')) . "." .  $fileExtention; // creating file name from date time
                    $profileImage =$uploadFileName;
                    $upload_dir ='./uploads/profile_image'; // upload directory
                    //------------------------------------------
                    $resUpload = $this->uploadImage($upload_dir, $profileImage, 150, 150);
                    
                    // checking for error while upload.
                    if (strpos($resUpload, 'Error') !== false)
                    {
                        echo json_encode(array('message' => $resUpload));
                        exit;
                    }
  
                $db  = new Database();
                
                // deleting the existing Profile photo
                $photo = $db->getFieldValueById("login", "ProfilePhoto", "Id={$id}");
                $userId = $db->getFieldValueById("login", "UserId", "Id='{$id}'");
                
                $db =NULL;
               
                // deleting from the folder.
                if($photo!="user_default_female.png" && $photo!="user_default_male.png")
                {
                    $file = $upload_dir . "/" . $photo;
                    unlink($file);
                    
                }
                
                $data = array(
                        'ProfilePhoto' => $profileImage
                );
                
                $this->db->update('login', $data, array('Id' =>$id)); // 3rd argument is where
			$action = "User profile photo edited for user :{$userId}.";
                $this->User_model->recordAdminActions($action);
                                
               
                
                if($userId == $_SESSION["ADMIN_ID"]) // checking the login user id to change profile pic
                    $_SESSION['PROFILE_PHOTO'] =$profileImage;
      
            }       
       echo "success";
   }

	public function logout()
      {
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		  
        if(isset($_SESSION['ADMIN_LOGIN_ID']))
        { 
		$this->AdminModel->updateLoginStatus($_SESSION['ADMIN_LOGIN_ID']);
                
		unset($_SESSION['ADMIN_ID']);           
		unset($_SESSION['ADMIN_PASS']);        
		unset($_SESSION['ADMIN_USER_TYPE']);
		if(isset($_SESSION["SCREEN_LOCKED"]))
			unset($_SESSION["SCREEN_LOCKED"]);
        
		unset($_SESSION["USER_MODULE_PAGE"]);	
		$_SESSION['ADMIN_ID'] =NULL;           
		$_SESSION['ADMIN_PASS']=NULL;        
		$_SESSION['ADMIN_USER_TYPE']=NULL;
         
		session_unset();
		session_destroy();
		//$this->index();
		header("Location:" . base_url());
        }  
          
      }
	  
	  
	  
	public function admin_user_profile($rowno=0)
	{
       /*if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["salesSummaryData"]	= $this->getSalesSummaryData();
				
        $this->load->view('brq-admin/admin-user-profile',$data);*/
		
		$employeeId		=	$_SESSION['EMPLOYEE_ID'];

		$rowperpage = 2;
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $fuctionName =  $this->uri->segment(2);
		// $db = new Database();
		// $Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		// $this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	="admin_user_profile"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		//getting the keyword matching records of logged in user
		$this->db->from('client_registration');
		$column_search 	= array('CONCAT(FirstName,\' \', LastName)','FirstName','LastName','CompanyName','MobileNo','WhatsappNo','CompanyAddress','Email','CompanyDescription','CompanyUrl','AboutCompany','CompanyPhone','CompanyEmail'); //set column field database for datatable searchable.
	
		foreach ($column_search as $item) // loop column 
		{
			
			if($employeeId != 0 && ($_SESSION['ADMIN_USER_TYPE'] != 'SUPER ADMIN' && $_SESSION['ADMIN_USER_TYPE'] != 'ADMIN'))
				$this->db->where('EmployeeId',$employeeId);
	
		}
		
		$query = $this->db->get();
        $allcount = $query->num_rows();
		
        $config['base_url'] = base_url(). $this->adminController."/".$_SESSION["USER_MODULE_PAGE"];
        $config['use_page_numbers'] = TRUE;
        $config['total_rows'] = $allcount;
        $config['per_page'] = $rowperpage;
		
        $config['full_tag_open'] = "<ul class='pagination'>";
	    $config['full_tag_close'] = '</ul>';
	    $config['num_tag_open'] = '<li>';
	    $config['num_tag_close'] = '</li>';
	    $config['cur_tag_open'] = '<li class="active"><a href="#">';
	    $config['cur_tag_close'] = '</a></li>';
	    $config['prev_tag_open'] = '<li>';
	    $config['prev_tag_close'] = '</li>';
	    $config['first_tag_open'] = '<li>';
	    $config['first_tag_close'] = '</li>';
	    $config['last_tag_open'] = '<li>';
	    $config['last_tag_close'] = '</li>';


	    $config['prev_link'] = '<i class="fa fa-arrow-circle-left"></i>';
	    $config['prev_tag_open'] = '<li>';
	    $config['prev_tag_close'] = '</li>';


	    $config['next_link'] = '<i class="fa fa-arrow-circle-right"></i>';
	    $config['next_tag_open'] = '<li>';
	    $config['next_tag_close'] = '</li>';

 
        $this->pagination->initialize($config);
 
        $data['pagination'] = $this->pagination->create_links();
        $data['row'] = $rowno;
        $data['employeeId'] = $employeeId;
		
		//getting the keyword matching records of logged in user
		$this->db->from('client_registration');
		$column_search 	= array('CONCAT(FirstName,\' \', LastName)','FirstName','LastName','CompanyName','MobileNo','WhatsappNo','CompanyAddress','Email','CompanyDescription','CompanyUrl','AboutCompany','CompanyPhone','CompanyEmail'); //set column field database for datatable searchable.
		
		foreach ($column_search as $item) // loop column 
		{
			
			if($employeeId != 0 && ($_SESSION['ADMIN_USER_TYPE'] != 'SUPER ADMIN' && $_SESSION['ADMIN_USER_TYPE'] != 'ADMIN'))
				$this->db->where('EmployeeId',$employeeId);
	
		}
		
 
        if($rowno != 0){
          $rowno = ($rowno-1) * $rowperpage;
        }
		$this->db->limit($rowperpage, $rowno);
		$query = $this->db->get();
		$allcount = $query->num_rows();
		$data['allcount'] = $allcount;
		$data['keyword']  = '';
		$data["salesSummaryData"]	= $this->getSalesSummaryData();
				
		// loading the header section of the view which is not repeating
		$this->load->view("brq-admin/admin-user-profile-header", $data);	
		if($allcount != 0) {
			foreach ($query->result()  as $row)
			{
				$data 					= (object) array_merge((array) $data, (array) $row);
				// loading the client details view section which is repeating
				$this->load->view("brq-admin/view-client-sec", $data);
			}
		}
		// loading the footer section of the view which is not repeating
		$this->load->view("brq-admin/admin-user-profile-footer", $data);
	}
	
	// ==========================  client_search function for searching the logged in user's clients by entered keyword - Sajitha   ==================================
	public function client_search($search,$rowno=0)
	{
		$employeeId		=	$_SESSION['EMPLOYEE_ID'];

		$search = str_ireplace('%20',' ',$search);
		$search = str_ireplace("+"," ",$search);

		$rowperpage = 2;
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $fuctionName =  $this->uri->segment(2);
		// $db = new Database();
		// $Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		// $this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	="client_search/{$search}"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		//getting the keyword matching records of logged in user
		$this->db->from('client_registration');
		$column_search 	= array('CONCAT(FirstName,\' \', LastName)','FirstName','LastName','CompanyName','MobileNo','WhatsappNo','CompanyAddress','Email','CompanyDescription','CompanyUrl','AboutCompany','CompanyPhone','CompanyEmail'); //set column field database for datatable searchable.
		$i = 0;
		foreach ($column_search as $item) // loop column 
		{
			if($i===0) // first loop
			{
				$this->db->like($item, $search);
			}
			else
			{
				$this->db->or_like($item, $search);
			}
			if($employeeId != 0 && ($_SESSION['ADMIN_USER_TYPE'] != 'SUPER ADMIN' && $_SESSION['ADMIN_USER_TYPE'] != 'ADMIN'))
				$this->db->where('EmployeeId',$employeeId);
	
			$i++;
		}
		
		$query = $this->db->get();
        $allcount = $query->num_rows();
		
        $config['base_url'] = base_url(). $this->adminController."/".$_SESSION["USER_MODULE_PAGE"];
        $config['use_page_numbers'] = TRUE;
        $config['total_rows'] = $allcount;
        $config['per_page'] = $rowperpage;
		
        $config['full_tag_open'] = "<ul class='pagination'>";
	    $config['full_tag_close'] = '</ul>';
	    $config['num_tag_open'] = '<li>';
	    $config['num_tag_close'] = '</li>';
	    $config['cur_tag_open'] = '<li class="active"><a href="#">';
	    $config['cur_tag_close'] = '</a></li>';
	    $config['prev_tag_open'] = '<li>';
	    $config['prev_tag_close'] = '</li>';
	    $config['first_tag_open'] = '<li>';
	    $config['first_tag_close'] = '</li>';
	    $config['last_tag_open'] = '<li>';
	    $config['last_tag_close'] = '</li>';


	    $config['prev_link'] = '<i class="fa fa-arrow-circle-left"></i>';
	    $config['prev_tag_open'] = '<li>';
	    $config['prev_tag_close'] = '</li>';


	    $config['next_link'] = '<i class="fa fa-arrow-circle-right"></i>';
	    $config['next_tag_open'] = '<li>';
	    $config['next_tag_close'] = '</li>';

 
        $this->pagination->initialize($config);
 
        $data['pagination'] = $this->pagination->create_links();
        $data['row'] = $rowno;
        $data['employeeId'] = $employeeId;
        $data['keyword'] = $search;
		
		//getting the keyword matching records of logged in user
		$this->db->from('client_registration');
		$column_search 	= array('CONCAT(FirstName,\' \', LastName)','FirstName','LastName','CompanyName','MobileNo','WhatsappNo','CompanyAddress','Email','CompanyDescription','CompanyUrl','AboutCompany','CompanyPhone','CompanyEmail'); //set column field database for datatable searchable.
		$i = 0;
		foreach ($column_search as $item) // loop column 
		{
			if($i===0) // first loop
			{
				$this->db->like($item, $search);
			}
			else
			{
				$this->db->or_like($item, $search);
			}
			if($employeeId != 0 && ($_SESSION['ADMIN_USER_TYPE'] != 'SUPER ADMIN' && $_SESSION['ADMIN_USER_TYPE'] != 'ADMIN'))
				$this->db->where('EmployeeId',$employeeId);
	
			$i++;
		}
		
 
        if($rowno != 0){
          $rowno = ($rowno-1) * $rowperpage;
        }
		$this->db->limit($rowperpage, $rowno);
		$query = $this->db->get();
		$allcount = $query->num_rows();
		$data['allcount'] = $allcount;
		// loading the header section of the view which is not repeating
		$this->load->view("brq-admin/client-header-sec", $data);	
		
		if($allcount != 0) {
			foreach ($query->result()  as $row)
			{
				$data 					= (object) array_merge((array) $data, (array) $row);
				// loading the client details view section which is repeating
				$this->load->view("brq-admin/view-client-sec", $data);
			}
		} 
		// loading the footer section of the view which is not repeating
		$this->load->view("brq-admin/client-footer-sec", $data);
	}
	
	public function lock_screen()
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $fuctionName =  $this->uri->segment(2);
		// $db = new Database();
		// $Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		// $this->isAccessDenied($Id);
		$_SESSION["SCREEN_LOCKED"] = TRUE;
		$data   = array();
        $data["headTitle"] 			= $this->headTitle ." :Login as ". $_SESSION['ADMIN_ID'] . " - Locked Screen";
        $data["adminController"] 	= $this->adminController;
		
        $this->load->view('brq-admin/lock-screen',$data);
	
	}
     
    public function screen_unlock($pass)
	{
		
		$this->redirect(); // ajax call checking.
		$pass = encriptPassword($pass);
		
		$data = array();
		$msg = "";
		
		if(!isset($_SESSION['ADMIN_ID']))
		{
			$link = base_url() . $this->adminController;
			$msg ="Sorry! Session expired or not login yet,please <a href='$link'>click here</a> to login";
			
			$data["status"] = false;
			$data["msg"] 	= $msg;
		      
			echo json_encode($data);
			exit;
			
		}
		
		$userId	  = $_SESSION['ADMIN_ID'];
		
		
		$SQL  = "SELECT Id ";
        $SQL .= "  FROM login WHERE UserId='$userId' AND Password='$pass'";
		$SQL .= "  AND Status='Active' LIMIT 1";
		
	    
        $records = $this->db->query($SQL); // --- using db->query Method
        
        if($records->num_rows()<=0)
		{
			$data["status"] = false;
			$data["msg"] 	= "Sorry! Invalid password to unlock.";
			
		}	
		else
		{
			$data["status"] 		= true;
			$data["msg"] 			= "success";
			$data["module_screen"]  = $_SESSION["USER_MODULE_PAGE"]; // to redirect to the exact page
            $_SESSION["SCREEN_LOCKED"] = FALSE;			
		}
		
		
		echo json_encode($data);
		
	}
	
// ==========================  getUserGroupCombo function for filling the select box's option with User Groups - Sajitha   ==================================
	public function getUserGroupCombo()
	{
		$db 			= new Database();
        $resCombo 		= $db->fillCombo("sys_user_group", "UserGroup", "...Choose...", "", "Id", "Status='Active'", "UserGroup", "");
       
		return $resCombo;
		
	}

// ==========================  getDesignationCombo function for filling the select box's option with User Groups other than Super Admin - Sajitha   ==================================
	public function getDesignationCombo()
	{
		$db 			= new Database();
        $resCombo 		= $db->fillCombo("sys_user_group", "UserGroup", "...Choose...", "", "Id", "UserGroup !=  'Super Admin' and Status='Active'", "Id", "");
		echo $resCombo;
	}	
	
// ==========================  getBranchCombo function for filling the select box's option with Branch - Sajitha   ==================================
	public function getBranchCombo()
	{
		$db 			= new Database();
        $resCombo 		= $db->fillCombo("branches", "BranchName", "...Choose...", "", "Id", "", "BranchName", "");
       
		echo $resCombo;
		
	}

// ==========================  getDepCombo function for filling the select box's option with Departments - Sajitha   ==================================
	public function getDepCombo()
	{
		$branchId 	= $this->input->post("branchId");
		$db 		= new Database();
        $resCombo 	= $db->fillCombo("hr_departments", "department_name", "...Choose...", "", "id", "branch_id=".$branchId, "department_name", "");
       
		echo $resCombo;
		
	} 
	
// ==========================  getEmpStatusCombo function for filling the select box's option with Employment Status of the Job Title- Sajitha   ==================================
	public function getEmpStatusCombo()
	{
		$jobTitleId 	= $this->input->post("jobTitleId");
		
		$SQL 		 ="SELECT DISTINCT EmploymentStatus,IsTraining,Id ";
		$SQL 		.=" FROM employment_status where JobTitleId=$jobTitleId order by CreatedOn ASC";
		
		$list		=  $this->db->query($SQL);
		$retHTML ="";
		if($list->num_rows()>0)
		{
			$retHTML = "<option value=''>...Select employment status...</option>";
		
			foreach($list->result()  as $row)
			 {
				$employmentStatus  	= $row->EmploymentStatus;
				$isTraining			= $row->IsTraining;
				
			 $retHTML 	.= "<option  value='{$row->Id}' data-training='{$isTraining}'>{$employmentStatus}</option>";			
			 } 	
		} else {
			$retHTML = "<option value='' disabled selected>...No employment status...</option>";
		}
		
		echo $retHTML;
		
	}
	
// ==========================  getSysBranchCombo function for filling the select box's option with Branches - Sajitha   ==================================
	public function getSysBranchCombo()
	{
		$bank 		= $this->input->post("bank");
		$db 		= new Database();
        $resCombo 	= $db->fillCombo("sys_all_bank_ifsc", "Branch", "...Select branch...", "", "Branch", "Bank='".$bank."' and Status=1", "Branch", "");
       
		echo $resCombo;
	} 
	
// ==========================  getSysBankDetails function for loading IFSC & MICR values - Sajitha   ==================================
	public function getSysBankDetails()
	{
		$branch 	= $this->input->post("branch");
		$bank 		= $this->input->post("bank");
		$db 		= new Database();
		$ifsc	 	= $db->getFieldValueById("sys_all_bank_ifsc", "IFSC", "Bank='{$bank}' and Branch='{$branch}' and Status=1");
		$micr 	= $db->getFieldValueById("sys_all_bank_ifsc", "MICR", "Bank='{$bank}' and Branch='{$branch}' and Status=1");
        $output = array(
						"ifsc" => $ifsc,
						"micr" => $micr,
				);
		//output as json format
		echo json_encode($output);
	} 
	
// ==========================  getDepDocCombo function for filling the select box's option with Departments according to the Branch selected for Company Document - Sajitha   ==================================
	public function getDepDocCombo()
	{
		$branchId 	= $this->input->post("branchId");
        
		for($i=0;$i<count($branchId);$i++) {
			$db = new BrqDatabase();
			$resCombo = $db->getDepBranchNameCombo($branchId[$i]);
			echo $resCombo;
		}
	} 	
	
//=========================== getBranchEmpCombo function used for getting the Employee Names of the selected Branch===========================	 
	public function getBranchEmpCombo($isAllNeeded = false)
	{
		$branchId  	 = $this->input->post('branchId');
		$SQL 		 = "SELECT Id,EmployeeId ";
		$SQL 		.= " FROM login where BranchId={$branchId} and Status='Active' order by CreatedOn ASC";
		
		$list		=  $this->db->query($SQL);
		$retHTML 	="";
		
		if($list->num_rows()>0)
		{
			$retHTML = "<option value=''>...Select employee name...</option>";
			if($isAllNeeded == true)
				$retHTML .= "<option value='all'  data-thumbnail='".base_url("uploads/employee_profile_image/thumb/").'all-users.jpg'."'> All User</option>";
			foreach ($list->result()  as $row)
			{
				$EmpId  		= $row->EmployeeId;
				$db 			= new Database();
				$FirstName 		= $db->getFieldValueById("employee_master", "FirstName", "Id='{$row->EmployeeId}'");
				$LastName 		= $db->getFieldValueById("employee_master", "LastName", "Id='{$row->EmployeeId}'");
				$FirstName 		= $db->getFieldValueById("employee_master", "FirstName", "Id='{$row->EmployeeId}'");
				$Sex			= $db->getFieldValueById("employee_master", "Sex", "Id='{$row->EmployeeId}'");
				$profilePath 	= base_url($db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$row->EmployeeId}'")."thumb/");
				$profilePhoto	= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$row->EmployeeId}'");
				$UserGroup 		= $db->getFieldValueById("employee_master", "UserGroupId", "Id='{$row->EmployeeId}'");
				$UserGroup 		= $db->getFieldValueById("sys_user_group", "UserGroup", "Id='{$UserGroup}'");
				
				if(!(file_exists($db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$row->EmployeeId}'").$profilePhoto))) {
					if($Sex == "Male") {
						$profilePath 	= base_url("./uploads/employee_profile_image/"."thumb/");
						$profilePhoto 	= "male.png";
					} else {
						$profilePath 	= base_url("./uploads/employee_profile_image/"."thumb/");
						$profilePhoto 	= "female.png";
					}	
				}	
				
				$retHTML 	    .= "<option  value='{$EmpId}'  data-thumbnail='".$profilePath.$profilePhoto."'>{$FirstName} {$LastName} ({$UserGroup})</option>";			
			} 	
		} else {
			$retHTML 		= "<option value='No employees' disabled selected>...No employees...</option>";
		}
		echo $retHTML;
	}	
			

// ==========================  function getEmployeeNameComboAdd added for getting newEmployeename not present in login table - Sajitha   ==================================
	public function getEmployeeNameComboAdd()
	{
		
		$retHTML 					= $this->Common_model->getEmpNameCombo();
		echo $retHTML;
							
	} // function end
	
// ==========================  function getEmployeeNameComboEdit added for getting Employeename present in employee_master table - Sajitha   ==================================	
	public function getEmployeeNameComboEdit()
	{
		
		$db 			= new Database();
		$resCombo 		= $db->fillCombo("employee_master", "FirstName", "...Choose...", "LastName", "Id", "Status='Active'", "FirstName", "");
		
		echo $resCombo;
		
	}
// ==========================  function getClientNameCombo added for getting Client Names present in client_registration table - Sajitha   ==================================	
	public function getClientNameCombo()
	{		
		$db 			= new Database();
		$resCombo 		= $db->fillCombo("client_registration", "FirstName", "...Choose...", "LastName", "Id", "Status='Active'", "FirstName", "");
		
		echo $resCombo;
		
	}	
	
// ==========================  function getProjectNameCombo added for getting Project Names - Sajitha   ==================================	
	public function getProjectNameCombo()
	{
		
		$db 			= new Database();
		$resCombo 		= $db->fillCombo("project_head", "ProjectName", "...Choose...", "DATE_FORMAT(CreatedOn, '%d/%m/%Y %h:%i:%s')", "Id", "Status!='Finished'", "", ""," ");
		
		echo $resCombo;
		
	}	
// ==========================  function getUserNameComboEdit added for getting User Name present in login table - Sajitha   ==================================	
	public function getUserNameComboEdit()
	{
		
		$retHTML 					= $this->Common_model->getUserNameCombo();
		echo $retHTML;
				
	}	
	
// ==========================  function getPaymentBankBranchCombo added for getting Branch Names of selected Bank present in brq_online_payment_banks table - Sajitha   ==================================	
	public function getPaymentBankBranchCombo()
	{
		$bank  	 		= $this->input->post('bank');
		$db 			= new Database();
		$resCombo 		= $db->fillCombo("brq_online_payment_banks", "Branch", "...Choose...", "", "Branch", "Bank='{$bank}' and Status='Active'", "Branch", "");
		
		echo $resCombo;
		
	}
	
	private function getSalesSummaryData()
	{
			/* from mysql fetching 
			$connect = mysqli_connect("localhost", "root", "", "testing");
			$query = "SELECT * FROM account";
			$result = mysqli_query($connect, $query);
			*/
			$chart_data = '';
		//while($row = mysqli_fetch_array($result))
		$i=2010;
		$profit =1000;
		$purchase =2000;
		$sale 	=5000;
		while($i<2020)	
		{
			
		// $chart_data .= "{ year:'".$row["year"]."', profit:".$row["profit"].", purchase:".$row["purchase"].", sale:".$row["sale"]."}, ";
		
		   $chart_data .= "{ year:'".$i."', profit:".$profit.", purchase:".$purchase.", sale:".$sale."}, ";
		
		  $profit +=1000;
		  $purchase +=500;
		  $sale 	+=500;
		  $i+=1;
		}
		$chart_data = substr($chart_data, 0, -2);
		
		return $chart_data;
	}
	
	
// ==========================  Function to add new customer - By Sajitha   ==================================	
	public function add_new_customer($id=0)
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $fuctionName =  $this->uri->segment(2);
		// $db = new Database();
		// $Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		// $this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	="add_new_customer"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["cId"]	 		= $id; // from URL for edit.
		$this->load->view("brq-admin/add-new-customer", $data);
	}
	
// ==========================  Function to edit customer details and buy products and modules - By Sajitha   ==================================	
	public function edit_client($id=0)
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$_SESSION["USER_MODULE_PAGE"]	="edit_client"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["cId"]	 		= $id; // from URL for edit.
		$data["employeeId"]		= $_SESSION['EMPLOYEE_ID'];
		$db 					= new Database();
		$ClientEmpId			= $db->getFieldValueById("client_registration", "EmployeeId", "Id='{$id}'");
		if(!$ClientEmpId)
			$data["clientEmpId"]	= 0;
		else
			$data["clientEmpId"]	= $ClientEmpId;
		$this->load->view("brq-admin/edit-client", $data);
		
	}
	
// ==========================  Function to view customer - By Sajitha   ==================================	
	public function view_customer($id=0)
	{
		$employeeId		=	$_SESSION['EMPLOYEE_ID'];
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$_SESSION["USER_MODULE_PAGE"]	= "view_customer"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data1 					= $this->getCustomerDetails($id);		
		$data['pagination']		= '';
		$data['keyword']		= '';
		$data['allcount']		= 0;
		$data['employeeId']		= $employeeId;
		$data 					= (object) array_merge((array) $data, (array) $data1);
		$this->load->view("brq-admin/client-header-sec", $data);		
		$this->load->view("brq-admin/view-client-sec", $data);
		$this->load->view("brq-admin/client-footer-sec", $data);
	}
	
	//==================================== saveWhatsAppMsg function for Saving WhatsApp Message details - by Sajitha ================================
	public function saveWhatsAppMsg()
	{
		$id				= $this->input->post("cid");
		$message 		= $this->input->post('message');
		
		$data = array(
						'Date' => date('Y-m-d H:i:s'),
						'ClientId' => $id,
						'Message' => $message,
						'CreatedId'		=>	$_SESSION['EMPLOYEE_ID'],
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),
						
					);
		
		$res	= $this->ClientWhatsApp_model->saveData($data, $id);
	   	
		$resData  = array(
							"status" => true,
							'message' => 'WhatsApp message saved successfully!!',
						 );	
		echo json_encode($resData);
	}
	
	//==================================== saveSMSMsg function for Saving SMS details - by Sajitha ================================
	public function saveSMSMsg()
	{
		$id				= $this->input->post("cid");
		$message 		= $this->input->post('message');
		
		$data = array(
						'Date' => date('Y-m-d H:i:s'),
						'ClientId' => $id,
						'Message' => $message,
						'CreatedId'		=>	$_SESSION['EMPLOYEE_ID'],
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),
						
					);
		
		$res	= $this->ClientSMS_model->saveData($data, $id);
	   	
		$resData  = array(
							"status" => true,
							'message' => 'SMS message saved successfully!!',
						 );	
		echo json_encode($resData);
	}
	
// ==========================  Function to view audit log - By Sajitha   ==================================	
	public function view_audit_log($id=0)
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$_SESSION["USER_MODULE_PAGE"]	="view_audit_log"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["alId"]	 			= $id; // from URL for edit.
		$data1 = $this->getAuditLogDetails($id);
		$data = (object) array_merge((array) $data, (array) $data1);		
		$this->load->view("brq-admin/view-audit-log", $data);
	}
	
	//========================== Email function  start ==============================
	public function email_inbox()
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$_SESSION["USER_MODULE_PAGE"]	="email-inbox"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$this->load->view("brq-admin/email-inbox", $data);
		
		
	}
	
	//========================== Sending email to client. 'To' field will be filled by email id of client  ==============================
	public function email_compose($id=0)
	{
		
		$db = new Database();
		$emailId = $db->getFieldValueById("client_registration", "Email", "Id='{$id}'");
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$_SESSION["USER_MODULE_PAGE"]	="email-compose"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data['clientEmail']	= $emailId;
		$this->load->view("brq-admin/email-compose", $data);
	
	}
	
	//========================== Sending email to the newly registered employee. 'To' field will be filled by email id of new employee  ==============================
	public function email_compose_new_emp($id=0)
	{
		
		$db = new Database();
		$emailId = $db->getFieldValueById("new_employee_join", "Email", "Id='{$id}'");
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$_SESSION["USER_MODULE_PAGE"]	="email-compose"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data['clientEmail']	= $emailId;
		$this->load->view("brq-admin/email-compose", $data);
	
	}
	
	public function email_read()
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$_SESSION["USER_MODULE_PAGE"]	="email-read"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$this->load->view("brq-admin/email-read", $data);
		
		
		
	}
	
	//========================== Email function  end ==============================
	
	// ========================= CMS Functions start ================================
	// ========================= about_us function for viewing existing about us data ================================
	public function about_us()
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}

		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	="blank_page"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		
		$aboutUsSub	="";
		$ourMission	="";
		$ourVision	="";
		$ourTarget	="";
		$footerDescription	="";
		
		$aboutUsText         = $db->getFieldValueById("sys_site_about_us", "AboutUs", "Id=1 AND Status=1");
		$aboutUsTitle        = $db->getFieldValueById("sys_site_about_us", "ImageHeading", "Id=1 AND Status=1");
		$aboutUsImagePath    = $db->getFieldValueById("sys_site_about_us", "ImagePath", "Id=1 AND Status=1");
		$ourMission          = $db->getFieldValueById("sys_site_about_us", "OurMission", "Id=1 AND Status=1");;
		$ourVision 	         = $db->getFieldValueById("sys_site_about_us", "ourVision", "Id=1 AND Status=1");;
		$ourTarget 	         = $db->getFieldValueById("sys_site_about_us", "ourTarget", "Id=1 AND Status=1");;
		$footerDescription 	 = $db->getFieldValueById("sys_site_about_us", "FooterDescription", "Id=1 AND Status=1");;
		
		$subHeadDescription = $db->getFieldValueById("sys_site_about_us", "SubHeadDescription", "Id=1 AND Status=1");
		
		$data 					= array();
		$headTitleAddText		= " - About Us : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["aboutUsText"]	 =$aboutUsText; // from table.
		$data["aboutUsTitle"]	 =$aboutUsTitle; // from table.
		$data["aboutUsImagePath"]=$aboutUsImagePath; // from table.
		
		$data["ourMission"]	 	 =$ourMission; // from table.
		$data["ourVision"]	 	 =$ourVision; // from table.
		$data["ourTarget"]	 	 =$ourTarget; // from table.
		$data["footerDescription"]	 	 =$footerDescription; // from table.
		
		$data["subHeadDescription"]	 =$subHeadDescription; // from table.
		
		$this->load->view("brq-admin/about-us", $data);
		
		
		
	}
	
	// ========================= saveAboutUs function for saving about us content ================================
	
	public function saveAboutUs()
	{
		
		$file_name = $_FILES['ImageCategory']['name']; //file called by $_file
        $temp = $_FILES['ImageCategory']['tmp_name']; //default storage path for file store
        $new_file_name = time() . $file_name; //image name
        move_uploaded_file($temp, 'uploads/aboutus_img/' . $new_file_name);
		
		$aboutUs	=html_entity_decode($_POST["editor"]);
		$imgTitle	=trim($_POST["imgtitle"]);
		//$aboutUs	=html_entity_decode($_POST["imgtitle"]);
		
		//$aboutUs	=str_replace("'","\'",$aboutUs); // replacing the quotes.
		
		//$aboutUs	=htmlspecialchars($aboutUs);
		
		
		$resData = array();
			
		if(empty($aboutUs))
			{
				echo "Error! About us text should not be blank.";
				exit;
			}	
		$data = array(
						'AboutUs' =>$aboutUs, // replacing the quotes.
						'ImageHeading' =>$imgTitle, // replacing the quotes.
						'ImagePath' =>'uploads/aboutus_img/' . $new_file_name,// replacing the quotes.
						
					);
		$this->db->update('sys_site_about_us', $data, array('Id' =>1));
		echo "success";
	}
	
	// ========================= saveAboutUsSub function for saving about us sub content ================================
	public function saveAboutUsSub()
	{
		$subHeadDescription	=trim($_POST["Sub_Title_Desc_Editor"]);
		
		$ourmissionText	=trim($_POST["ourmission_editor"]);
		$ourvisionText	=trim($_POST["ourvision_editor"]);
		$outargetText	=trim($_POST["outarget_editor"]);
		$footerText=trim($_POST["footer_description"]);

		$subHeadDescription	=str_replace("'","\'",$subHeadDescription); // replacing the quotes.
		$ourmissionText	=str_replace("'","\'",$ourmissionText); // replacing the quotes.
		$ourvisionText	=str_replace("'","\'",$ourvisionText); // replacing the quotes.
		$outargetText	=str_replace("'","\'",$outargetText); // replacing the quotes.
		$footerText		=str_replace("'","\'",$footerText);

		$subHeadDescription	=htmlspecialchars($subHeadDescription); // replacing the quotes.
		$ourmissionText	=htmlspecialchars($ourmissionText);
		$ourvisionText	=htmlspecialchars($ourvisionText);
		$outargetText	=htmlspecialchars($outargetText);
		$footerText	=htmlspecialchars($footerText);

		$resData = array();
		if(empty($subHeadDescription))
			{
				echo "Error! Home about us sub title description should not be blank.";
				exit;
			}	
		
		if(empty($ourmissionText))
			{
				echo "Error! our mission about us sub text should not be blank.";
				exit;
			}	
		if(empty($ourvisionText))
			{
				echo "Error! our vison about us sub text should not be blank.";
				exit;
			}

		if(empty($outargetText))
			{
				echo "Error! our target about us sub text should not be blank.";
				exit;
			}	

		
		if(empty($footerText))
			{
				echo "Error! our footer description about us sub text should not be blank.";
				exit;
			}		
	
		$data = array(
						'SubHeadDescription' =>$subHeadDescription,
						'OurMission' =>$ourmissionText,
						'OurVision' =>$ourvisionText,
						'OurTarget' =>$outargetText,
						'FooterDescription' =>$footerText
					);
		$this->db->update('sys_site_about_us', $data, array('Id' =>1));
		echo "success";
	}
	
	// ========================= legal_about_us function for viewing existing legal about us data ================================
	public function legal_about_us($moduleTab="legal_about_us")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]			= $Id;

		$this->load->view('brq-admin/legal-about-us',$data);
        
	}
	
	
	//==================================== legalAboutUsList function to get DataTables of Legal About Us  - by Sajitha ================================
	public function legalAboutUsList($id="")
	{
		$list = $this->LegalAboutUs_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = $data->Title;
			$row[] = $data->FavIcon;
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} 
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			$permission = $_SESSION['GROUP_PERMISSION'];
		
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
		
			$actions ="";
			$view ="Sub_Visible_".$id;
			$edit ="Sub_Edit_".$id;
			$copy ="Sub_Copy_".$id;
			$delete = "Sub_Del_".$id;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>'
	                  .'<div class="dropdown-menu" role="menu" style="">';
			 if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
				{
					$actions .= '<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editLegal('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>'
	                          .'<div class="dropdown-divider"></div>';
				}
				if(in_array($copy,$userGroupPermission) || in_array($delete,$userWisePermission))
				{
					$actions .='<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editLegal('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>'
					  .'<div class="dropdown-divider"></div>';
				}
				if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
				{
					$actions .='<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteLegal('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
				}
					$actions .=' </div>'
	                  		 .'</div>';
			
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->LegalAboutUs_model->countAll(),
						"recordsFiltered" => $this->LegalAboutUs_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
	
	//==================================== saveLegalAboutUs function for Saving Legal About Us details - by Sajitha ================================
	public function saveLegalAboutUs()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$title  				= $this->input->post('Title');
		$faIcon  				= $this->input->post('Fa_Icon');
		$description  			= $this->input->post('Description');
		$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " UPPER(`Title`)='".strtoupper($title)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("sys_about_us_legal", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Legal About Us is already created and exists! Please change the Title."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'Title' => $title,
						'FavIcon' => $faIcon,
						'Description' => $description,
						'Status' => $status,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'Title' => $title,
						'FavIcon' => $faIcon,
						'Description' => $description,
						'Status' => $status,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		
		$res	= $this->LegalAboutUs_model->saveData($data, $id);
		$resData = array("status" => true,'message' => 'Legal About Us details saved successfully!!');
		
		echo json_encode($resData);
	}
	
	//=========================== deleteLegalAboutUs function used for deleting Legal About Us details by id from sys_about_us_legal table===========================	 
	public function deleteLegalAboutUs($id)
	{
       $res    =  $this->LegalAboutUs_model->deleteData($id);
       $resData =array();
	  
	   if($res['status'])
	   {
			$resData=array(
					"status"=>true,
					"message"=>$res['message']
				   );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
		echo json_encode($resData); 
    }    
		
	//=========================== getEditLegalAboutUs function used for getting a Legal About Us details by id in sys_about_us_legal table ===========================	 
	public function getEditLegalAboutUs($id)
	{
		$data = $this->LegalAboutUs_model->getById($id);
		echo json_encode($data);
	}
	
	// ========================= saveSettings() for saving Common Site Settings datas - by Sajitha ================================
	public function saveSettings()
	{
		$timeZoneId				=	trim($_POST["Time_Zone"]);
		$adController			=	trim($_POST["Admin_Controller"]);
		$clientController 		=	trim($_POST["Client_Controller"]);
		$payrollController		=	trim($_POST["Payroll_Controller"]);
		$hrController			=	trim($_POST["HR_Controller"]);
		$leadController			=	trim($_POST["Lead_Controller"]);
		$accountsController		=	trim($_POST["Accounts_Controller"]);
		$mobileAppController	=	trim($_POST["Mobile_Controller"]);
		$currencyId				=	trim($_POST["Currency_Symbol"]);
		$address 				=	trim($_POST["Address"]);
		$officePhone			=	trim($_POST["Office_Phone"]);
		$whatsApp				=	trim($_POST["Whats_App"]);
		$supportNumber			=	trim($_POST["Toll_Free_No"]);
		$salesEmail				=	trim($_POST["Sales_Email"]);
		$infoEmail				=	trim($_POST["Info_Email"]);
		$noReplyEmail			=	trim($_POST["Noreply_Email"]);
		$noReplyPassword 		=	trim($_POST["Noreply_password"]);
		$companyName			=	trim($_POST["Company_Name"]);
		$designedBy				=	trim($_POST["Designed_By"]);
		$maxExecutionTime		=	trim($_POST["Max_Execution_Time"]);
		$memoryLimit			=	trim($_POST["Memory_Limit"]);
		$postMaxSize			=	trim($_POST["Post_Max_Size"]);
		$uploadMaxFileSize		=	trim($_POST["Upload_Max_File_Size"]);
		$postMaxSize			=	trim($_POST["Post_Max_Size"]);
		$uploadMaxFileSize		=	trim($_POST["Upload_Max_File_Size"]);
		$serviceGST				=   trim($_POST["Service_GST"]);
		$softwareGST			=   trim($_POST["Software_GST"]);
		$siteFooter				=   trim($_POST["Site_Footer"]);
		$adminPanelFooter		=   trim($_POST["Admin_Panel_Footer"]);
		$blockUserTimeframe		=   trim($_POST["Block_User_Timeframe"]);
		$otpExpTime				=	trim($_POST["otpExpTime"]);
		$activeExpTime			=	trim($_POST["activeExpTime"]);
		$InvoiceCreditPeriod    =	trim($_POST["InvoiceCreditPeriod"]);
		
		$timeZoneId				=	str_replace("'","\'",$timeZoneId); // replacing the quotes
		$adController			=	str_replace("'","\'",$adController); 
		$clientController 		=	str_replace("'","\'",$clientController);
		$payrollController		=	str_replace("'","\'",$payrollController);
		$hrController			=	str_replace("'","\'",$hrController);
		$leadController			=	str_replace("'","\'",$leadController);
		$accountsController		=	str_replace("'","\'",$accountsController);
		$mobileAppController	=	str_replace("'","\'",$mobileAppController);
		$currencyId				=	str_replace("'","\'",$currencyId);
		$address 				=	str_replace("'","\'",$address);
		$officePhone			=	str_replace("'","\'",$officePhone);
		$whatsApp				=	str_replace("'","\'",$whatsApp);
		$supportNumber			=	str_replace("'","\'",$supportNumber);
		$salesEmail				=	str_replace("'","\'",$salesEmail);
		$infoEmail				=	str_replace("'","\'",$infoEmail);
		$noReplyEmail			=	str_replace("'","\'",$noReplyEmail);
		$noReplyPassword 		=	str_replace("'","\'",$noReplyPassword);
		$companyName			=	str_replace("'","\'",$companyName);
		$designedBy				=	str_replace("'","\'",$designedBy);
		$maxExecutionTime		=	str_replace("'","\'",$maxExecutionTime);
		$memoryLimit			=	str_replace("'","\'",$memoryLimit);
		$postMaxSize			=	str_replace("'","\'",$postMaxSize);
		$uploadMaxFileSize		=	str_replace("'","\'",$uploadMaxFileSize);
		$serviceGST				=   str_replace("'","\'",$serviceGST);
		$softwareGST			=   str_replace("'","\'",$softwareGST);
		$siteFooter				=   str_replace("'","\'",$siteFooter);
		$adminPanelFooter		=   str_replace("'","\'",$adminPanelFooter);
		$otpExpTime				=	str_replace("'","\'",$otpExpTime);
		$activeExpTime			=	str_replace("'","\'",$activeExpTime);
		$blockUserTimeframe		=	str_replace("'","\'",$blockUserTimeframe);
		$InvoiceCreditPeriod 	=	str_replace("'","\'",$InvoiceCreditPeriod);
		
		$timeZoneId				=	htmlspecialchars($timeZoneId);
		$adController			=	htmlspecialchars($adController);
		$clientController 		=	htmlspecialchars($clientController);
		$payrollController		=	htmlspecialchars($payrollController);
		$hrController			=	htmlspecialchars($hrController);
		$leadController			=	htmlspecialchars($leadController);
		$accountsController		=	htmlspecialchars($accountsController);
		$mobileAppController	=	htmlspecialchars($mobileAppController);
		$currencyId				=	htmlspecialchars($currencyId);
		$address 				=	htmlspecialchars($address);
		$officePhone			=	htmlspecialchars($officePhone);
		$whatsApp				=	htmlspecialchars($whatsApp);
		$supportNumber			=	htmlspecialchars($supportNumber);
		$salesEmail				=	htmlspecialchars($salesEmail);
		$infoEmail				=	htmlspecialchars($infoEmail);
		$noReplyEmail			=	htmlspecialchars($noReplyEmail);
		$noReplyPassword 		=	htmlspecialchars($noReplyPassword);
		$companyName			=	htmlspecialchars($companyName);
		$designedBy				=	htmlspecialchars($designedBy);
		$maxExecutionTime		=	htmlspecialchars($maxExecutionTime);
		$memoryLimit			=	htmlspecialchars($memoryLimit);
		$postMaxSize			=	htmlspecialchars($postMaxSize);
		$uploadMaxFileSize		=	htmlspecialchars($uploadMaxFileSize);
		$serviceGST				=   htmlspecialchars($serviceGST);
		$softwareGST			=   htmlspecialchars($softwareGST);
		
		$siteFooter				=	htmlspecialchars($siteFooter);
		$adminPanelFooter		=	htmlspecialchars($adminPanelFooter);
		$blockUserTimeframe		=	htmlspecialchars($blockUserTimeframe);
		$otpExpTime				=	htmlspecialchars($otpExpTime);
		$activeExpTime			=	htmlspecialchars($activeExpTime);
		$InvoiceCreditPeriod	=	htmlspecialchars($InvoiceCreditPeriod);
		$resData = array();
		
		if(empty($timeZoneId))
			{
				echo "Error! Time Zone should not be blank.";
				exit;
			}
		if(empty($adController))
			{
				echo "Error! Admin Controller should not be blank.";
				exit;
			}
		if(empty($clientController))
			{
				echo "Error! Client Controller should not be blank.";
				exit;
			}	
		if(empty($payrollController))
			{
				echo "Error! Payroll Controller should not be blank.";
				exit;
			}	
		if(empty($hrController))
			{
				echo "Error! HR Controller should not be blank.";
				exit;
			}
		if(empty($leadController))
			{
				echo "Error! Lead Controller should not be blank.";
				exit;
			}
		if(empty($accountsController))
			{
				echo "Error! Accounts Controller should not be blank.";
				exit;
			}	
		/*if(empty($mobileAppController))
			{
				echo "Error! Mobile App Controller should not be blank.";
				exit;
			}*/
		if(empty($currencyId))
			{
				echo "Error! Currency Symbol should not be blank.";
				exit;
			}	
		if(empty($address))
			{
				echo "Error! Address should not be blank.";
				exit;
			}
		if(empty($officePhone))
			{
				echo "Error! Office Phone should not be blank.";
				exit;
			}	
		/*if(empty($whatsApp))
			{
				echo "Error! WhatsApp should not be blank.";
				exit;
			}	*/
		if(empty($supportNumber))
			{
				echo "Error! Support Number should not be blank.";
				exit;
			}
		if(empty($salesEmail))
			{
				echo "Error! Sales Email should not be blank.";
				exit;
			}	
		/*if(empty($infoEmail))
			{
				echo "Error! Info Email should not be blank.";
				exit;
			}
		if(empty($noReplyEmail))
			{
				echo "Error! No Reply Email should not be blank.";
				exit;
			}
		if(empty($noReplyPassword))
			{
				echo "Error! No Reply Password should not be blank.";
				exit;
			}	*/	
		if(empty($companyName))
			{
				echo "Error! Company Name should not be blank.";
				exit;
			}
		if(empty($designedBy))
			{
				echo "Error! Designed and developed by should not be blank.";
				exit;
			}
		if(empty($maxExecutionTime))
			{
				echo "Error! Max Execution Time should not be blank.";
				exit;
			}	
		if(empty($memoryLimit))
			{
				echo "Error! Memory Limit should not be blank.";
				exit;
			}	
		if(empty($postMaxSize))
			{
				echo "Error! Post Max Size should not be blank.";
				exit;
			}	
		if(empty($uploadMaxFileSize))
			{
				echo "Error! Upload Max File Size should not be blank.";
				exit;
			}
		if(empty($serviceGST))
			{
				echo "Error! Service GST Percentage should not be blank.";
				exit;
			}
		if(empty($softwareGST))
			{
				echo "Error! Software GST Percentage should not be blank.";
				exit;
			}

		
		if(empty($siteFooter))
			{
				echo "Error! Site footer should not be blank.";
				exit;
			}

		if(empty($adminPanelFooter))
			{
				echo "Error! Admin panel footer should not be blank.";
				exit;
			}
			
		/*if(empty($favIcon))
			{
				echo "Error! Fav Icon should not be blank.";
				exit;
				exit;
				exit;
			}	
		if(empty($siteLogo))
			{
				echo "Error! Site Logo should not be blank.";
				exit;
			}*/
		$data = array(
				    	'TimeZoneId'			=> $timeZoneId,
						'AdminController'		=> $adController,
						'ClientController' 		=> $clientController,
						'PayrollController'		=> $payrollController,
						'HrController'			=> $hrController,
						'LeadController'		=> $leadController,
						'AccountsController'	=> $accountsController,
						'MobileAppController'	=> $mobileAppController,
						'CurrencyId'			=> $currencyId,
						'Address'				=> $address,
						'OfficePhone'			=> $officePhone,
						'WhatsappNo'			=> $whatsApp,
						'SupportTolFreeNumber'	=> $supportNumber,
						'SalesEmail'			=> $salesEmail,
						'InfoEmail'				=> $infoEmail,
						'NoReplyEmail'			=> $noReplyEmail,
						'NoReplyPassword' 		=> $noReplyPassword,
						'CompanyName'			=> $companyName,
						'BottomDesingedAndDevlopedBy'			=> $designedBy,
						'MaxExecutionTime'		=> $maxExecutionTime,
						'MemoryLimit'			=> $memoryLimit,
						'PostMaxSize'			=> $postMaxSize,
						'UploadMaxFileSize'		=> $uploadMaxFileSize,
						'ServiceGSTPercentage'	=> $serviceGST,
						'SoftwareGSTPercentage'	=> $softwareGST,
						'SiteFooterText'		=> $siteFooter,
						'AdminPanelFooterText'	=> $adminPanelFooter,
						'BlockUserTimeframe'	=> $blockUserTimeframe,
						'OTPExpiryTime'			=> $otpExpTime,
						'AcivationLinkExpiryTime'	=> $activeExpTime,
						'InvoiceCreditPeriod'		=>$InvoiceCreditPeriod,
					);
					
		$this->db->update('sys_settings', $data, array('Id' =>1));
		echo "success";
	}
	
	// ========================= product module start ================================
	// -------------------------- product function to view product.php to add/edit/delete all the product ----------------
	public function product($moduleTab="product")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	="blank_page"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		 = $moduleTab; // product or product_category
		$data["subMenuId"]			= $Id;

		$this->load->view("brq-admin/product", $data);		
	}
	
	//==================================== productList function for listing all the Products in DataTables - by Sajitha ================================
	public function productList($id="")
	{
		$productId		=	$this->input->post('productid');
		$productCatId	=	$this->input->post('productcatid');
        $list 	= $this->Product_model->getDataTables($productId,$productCatId);
		$data 		= array();
        $data1 		= array();
		$no 		= $_POST['start'];
		$action 	= '';
		
		foreach ($list as $data) {
			
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$row 			= array();
			$photoPath 		= base_url().$data->ProductPhotoPath.'thumb/';
			$productPhoto 	= $photoPath.$data->ProductMainImage;
			$productPhotoLarge 	= base_url().$data->ProductPhotoPath.$data->ProductMainImage;
			if(!(file_exists($data->ProductPhotoPath.'thumb/'.$data->ProductMainImage))) {			
				$productPhoto 	=  base_url().'./uploads/product_photo/thumb/product.jpg';
				$productPhotoLarge 	= base_url().'./uploads/product_photo/product.jpg';
			}
			
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$productPhotoLarge.'\',\''.$data->ProductName.'\');" ><img style="margin-left:25px;"   class="rounded-circle" src="'.$productPhoto.'" height="40" width="40" alt=""></a>';
			$row[] = $data->Code;
			$row[] = $data->ProductName;	
			$db = new Database();
			$categoryName = $db->getFieldValueById("product_category", "CategoryName", "Id='{$data->CategoryId}'");
			$row[] = $categoryName;
			$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] = $data->CreatedBy;
			if($data->Status	==	"Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
		
			$row[]		= "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			//adding html for action	
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
		
			$actions ="";
			$view ="Sub_Visible_".$id;
			$edit ="Sub_Edit_".$id;
			$copy ="Sub_Copy_".$id;
			$delete = "Sub_Del_".$id;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .= '<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit"  onclick="editData('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
			{
				$actions .= '<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editData('."'".$data->Id."'".', true)"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteProduct('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
		
			$actions .=' </div>'
	                  .'</div>';
			
			$row[]	=	$actions;		
			// $action = '';
			
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Product_model->countAll(),
						"recordsFiltered" => $this->Product_model->countFiltered($productId,$productCatId),
						"data" => $data1,
				);
		//output to json format
		echo json_encode($output);
		
	}


	
	
	// getProductCode function is called when adding a Product to get the 'code' filled with Last Product Code + 1
	// getting Product code, by calling the stored proceedure getNumberPRO
	public function getProductCode() //calling the stored procedure, to get number.
	{
		$db   	= new Database();
		$data  	= array('PRODUCT', '0');  // to increment second parameter should 1
		$productCode 	= $db->callProcedure("getNumberPRO", $data, TRUE);  //  last parameter is TRUE for get the output.
		if($productCode)
		{
		   		   
		   $resData=array(
					"status"=>true,
					"message"=>"Success!!",
					"productCode"=>$productCode
				   );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, No record for product code!!"
				   );
		   
	   }
	   echo json_encode($resData);  
	}
	
	//==================================== getProductSlug function for generating the Product slug details from site_helper helper's createUriSlug function - by Sajitha ================================	
	public function getProductSlug()
	{
		$slug = createUriSlug($this->input->post('permaLink'));
		$id = $this->input->post('id');
		
		$db  	= new Database();
		$where  = "Slug='{$slug}' AND Id!='{$id}'";
		$res 	= $db->checkExistance("product_master", $where); //  if exists id value will be returned.

		if($res)
		{
			$resData   = array(
									"status" => false,
									"message" =>"This product slug already exists."
							  );		
			echo json_encode($resData);
			exit;
		}
		
		
		$resData=array(
					"status"=>true,
					"message"=>"Success!!",
					"slug"=>$slug
				   );
		echo json_encode($resData); 		   
	}
	
	//==================================== getProductSlug function for generating the Product slug details from site_helper helper's createUriSlug function - by Sajitha ================================	
	public function getModuleSlug()
	{
		$slug = createUriSlug($this->input->post('permaLink'));
		$id = $this->input->post('id');
		
		$db  	= new Database();
		$where  = "Slug='{$slug}' AND Id!='{$id}'";
		$res 	= $db->checkExistance("client_module_head", $where); //  if exists id value will be returned.

		if($res)
		{
			$resData   = array(
									"status" => false,
									"message" =>"This module slug already exists."
							  );		
			echo json_encode($resData);
			exit;
		}
		
		
		$resData=array(
					"status"=>true,
					"message"=>"Success!!",
					"slug"=>$slug
				   );
		echo json_encode($resData); 		   
	}
	
	//==================================== saveProduct function for Saving Product details - by Sajitha ================================
	public function saveProduct()
	{
		$id				= $this->input->post("hidID");
		$uploadDir		= '';
		$launchdate 	= '';
		
		$data 			= array();  
		$productName  	= $this->input->post('Product_Name');
		$status 		= $this->input->post('Status');
		$productCategory 		= $this->input->post('Product_Category');
		$productCode 			= $this->input->post('Product_Code');
		$productRibbon 			= $this->input->post('Product_Ribbon');
		$HsnCode 				= $this->input->post('HSN_Code');
		$description 			= $this->input->post('Description');
		$linkPage 				= $this->input->post('Link_Page');
		$slug 					= $this->input->post('Slug');
		$clientMenuItem 		= $this->input->post('Client_Menu_Item');
		$featureDescription 	= $this->input->post('Feature_Description');
		$modulePriceDescription = $this->input->post('Module_Price_Description');
		$heading				= $this->input->post('Heading');
		if($this->input->post('Launch_Date')) {
			$ldate_str 				= $this->input->post('Launch_Date');
			$ldate_str 				= str_replace('/', '-', $ldate_str);
			$launchdate 			= date('Y-m-d',(strtotime($ldate_str)));
		}
		$clientMenuItem 		= str_replace('product_details/', '', strtolower($this->input->post('Link_Page')));
		$version 				= $this->input->post('Version');
		$seo_keywords 			= $this->input->post('SEO_Keywords');
		$seo_description 		= $this->input->post('SEO_Description');
		
		$db  				= new Database();
		$HsnId 				= $db->getFieldValueById("sys_hsn_master", "Id", "HsnCode={$HsnCode}");			
		if(!$HsnId)
		{
			$resData   = array(
									"status" => false,
									"message" =>"The HSN Code you entered does not exists. Please type correct HSN Code."
							  );		
			echo json_encode($resData);
			exit;
		}
		$HsnType 			= $db->getFieldValueById("sys_hsn_master", "HsnType", "Id={$HsnId}");
		$HsnDescription 	= $db->getFieldValueById("sys_hsn_master", "HsnDescription", "Id={$HsnId}");
		$SkuCode 			= $db->getFieldValueById("sys_hsn_master", "SkuCode", "Id={$HsnId}");	
		
		$where  = "ProductName='{$productName}' AND Id!='{$id}'";
		$res 	= $db->checkExistance("product_master", $where); //  if exists id value will be returned.

		if($res)
		{
			$resData   = array(
									"status" => false,
									"message" =>"This product name already exists."
							  );		
			echo json_encode($resData);
			exit;
		}
		
		$productPhoto   = '';
		// Product Picture uploading starts
		if(isset($_FILES))
		{
			$TotalFiles = $_POST["TotalFiles"];
			if($TotalFiles != 0) {
				//foreach($_FILES as $file)
				for ($i=0;  $i<=$TotalFiles; $i++)
				{
					if(isset($_FILES["file_".$i]))
					{
						// tmp_name | name | type | size | error
						
						// -- Check here type  size and if any error.
						$fileName 	= $_FILES["file_".$i]['name'];
						$imgSize 	= $_FILES["file_".$i]['size'];
								
								// Check file size '5MB' or from max.image byte upload settings, in site settings module.
								if($imgSize < 5000000){}
								else{
											$msgError = "Product picture " . $fileName . " file is too large. Only 5 MB allowed!.";
											$errMSG   = "Error : Sorry," .$msgError;
									}
							
						$tempName	= $_FILES["file_".$i]['tmp_name'];
						$uploadDir	= "./uploads/product_photo/"; // this would be the upload file path. Exactly specify here or from the settings.
						
						// uploadImage is defined in site_helper (system/helper folder).
						$uploadResult = uploadImage($tempName, $uploadDir, "", $fileName, "", "",  TRUE, TRUE, TRUE,$_POST["Pic_Name"]);
						if($uploadResult['status'] == 'true') {
							$productPhoto = $uploadResult['fileName'];
							
						} else {
							echo json_encode(
									array("status" => false, 
										  "message"=>$uploadResult['message']
										 )
								);
							exit;
						}
					}
				}
			} else { 
				if($id==0) {
					$uploadDir	= "./uploads/product_photo/";
					$productPhoto = "product.jpg";
				}
			}
		} 
		
		// Product Picture uploading ends
		
		if($id==0) // if add
		{    
			$data = array(
						'Code' => $productCode,
						'ProductName' => $productName,
						'ProductRibbon' => $productRibbon,
						'Status' => $status,
						'CategoryId' => $productCategory,
						'Description' => $description,
						'LinkPage' => $linkPage,
						'Slug' => $slug,
						'ClientMenuItem' => $clientMenuItem,
						'FeatureDescription' => $featureDescription,
						'ModulePriceDescription' => $modulePriceDescription,
						'Heading' => $heading,
						'LaunchDate' => $launchdate,
						'Version' => $version,
						'SEODescription' => $seo_description,
						'SEOKeywords' => $seo_keywords,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),	
						'ProductPhotoPath' => $uploadDir,
						'ProductMainImage' => $productPhoto,
						'HSNId' => $HsnId,
						'HSNCode' => $HsnCode,
						'HSNType' => $HsnType,
						'HSNDescription' => $HsnDescription,
						'SKU' => $SkuCode,
					);
				
		}
		else { // if edit
				$data = array(
						'ProductName' => $productName,
						'ProductRibbon' => $productRibbon,
						'Status' => $status,
						'CategoryId' => $productCategory,
						'Description' => $description,
						'LinkPage' => $linkPage,
						'Slug' => $slug,
						'ClientMenuItem' => $clientMenuItem,
						'FeatureDescription' => $featureDescription,
						'ModulePriceDescription' => $modulePriceDescription,
						'Heading' => $heading,
						'LaunchDate' => $launchdate,
						'Version' => $version,
						'SEODescription' => $seo_description,
						'SEOKeywords' => $seo_keywords,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),
						'HSNId' => $HsnId,
						'HSNCode' => $HsnCode,
						'HSNType' => $HsnType,
						'HSNDescription' => $HsnDescription,
						'SKU' => $SkuCode,					
						);
				if($productPhoto !='' && $uploadDir != '') {
					$data += [ "ProductMainImage" => $productPhoto, "ProductPhotoPath" => $uploadDir ];
				 		
					//deleting existing product picture and thumbnail		
					$db  				= new Database();
					$productPhoto 		= $db->getFieldValueById("product_master", "ProductMainImage", "Id='{$id}'");	
					$productPhotoPath 	= $db->getFieldValueById("product_master", "ProductPhotoPath", "Id='{$id}'");	
					if($productPhoto != 'product.jpg' && (file_exists($productPhotoPath.$productPhoto))) {
						unlink($productPhotoPath.$productPhoto);
						if(file_exists($productPhotoPath."thumb/".$productPhoto))
							unlink($productPhotoPath."thumb/".$productPhoto);
					}	
				}			
		}
		$res	= $this->Product_model->saveData($data, $id);
		if($id==0) // if add
		{
			//Incrementing the LastNumber by 1 for PRODUCT in sys_setnumber table after inserting product
			$db   	= new Database();
			$data  	= array('PRODUCT', '1');  // to increment second parameter should 1
			$db->callProcedure("getNumberPRO", $data, TRUE);  //  last parameter is TRUE for get the output.
		}
		$db = new BrqDatabase();
		$resCombo = $db->getProductNameCombo();
		$resData  = array(
							"status" => true,
							'message' => 'Product details saved successfully!!',
							'filterProduct' => $resCombo
						 );	
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$moduleTab="product";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		
		$resData = (object) array_merge((array) $resData, (array) $data);
	    echo json_encode($resData);
	}
	
	//=========================== deleteProduct function used for deleting Product details by id from product_master table===========================	 
	public function deleteProduct($id)
	{
        //deleting existing product picture and thumbnail		
		$db  				= new Database();
		$productPhoto 		= $db->getFieldValueById("product_master", "ProductMainImage", "Id='{$id}'");	
		$productPhotoPath 	= $db->getFieldValueById("product_master", "ProductPhotoPath", "Id='{$id}'");	
		if($productPhoto != 'product.jpg' && (file_exists($productPhotoPath.$productPhoto))) {
			unlink($productPhotoPath.$productPhoto);
			if(file_exists($productPhotoPath."thumb/".$productPhoto))
				unlink($productPhotoPath."thumb/".$productPhoto);
		}
		
	   $res    =  $this->Product_model->deleteData($id);
       $resData =array();
	   
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$moduleTab = "product";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		
	   if($res['status'])
	   {
		    $db = new BrqDatabase();
			$resCombo = $db->getProductNameCombo();
			$resData    = array(
								"status" => true,
								'message' => 'Product deleted successfully!!',
								'filterProduct' => $resCombo
						 );
			
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData); 
    }    
    
	//=========================== getEditProduct function used for getting Product details by id from product_master table===========================	 
	public function getEditProduct($id)
	{
		$data = $this->Product_model->getById($id);
		echo json_encode($data);
	}
	
	//==================================== Function to get details of Product Picture details by Id - by Sajitha ================================
	public function getProductPic($id)
	{
		$db  				= new Database();
		$productPhoto 		= $db->getFieldValueById("product_master", "ProductMainImage", "Id='{$id}'");	
		$productPhotoPath 	= $db->getFieldValueById("product_master", "ProductPhotoPath", "Id='{$id}'");	
		if(file_exists($productPhotoPath."thumb/".$productPhoto)) 
			echo 1;
		else
			echo 0;
	}

	//==================================== Function to get Product Names as options according to the selected category Id - by Sajitha ================================
	public function getCategoryProductName()
	{
		$db				= new Database();
		$catid			= $this->input->post("catid");
		$productNames   = $db->fillCombo("product_master", "ProductName", "...Choose...", "", "Id", "CategoryId=$catid", "");
		
		echo $productNames;
	}	
	
	//==================================== Function to get Product plan as options according to the selected product Id - by Sajitha ================================
	public function getProductPlanName()
	{
		$db				= new Database();
		$productid		= $this->input->post("productid");
		$planNames   	= $db->fillCombo("product_plan", "PlanTitle", "...Choose...", "", "Id", "ProductId=$productid", "");
		
		echo $planNames;
	}
	
	//==================================== Function to get Product module as options according to the selected product Id - by Sajitha ================================
	public function getProductModuleName()
	{
		$db				= new Database();
		$productid		= $this->input->post("productid");
		$moduleNames   	= $db->fillCombo("client_module_head", "ModuleName", "...Choose...", "", "Id", "ProductId=$productid", "");
		echo $moduleNames;
	}
	
	//====================================Product Category  start================================
	//==================================== saveProductCategory function for Saving Product Category details - by Sajitha ================================
	public function saveProductCategory()
	   {
                $id		= $this->input->post("hidID");
                // --- checking the existance start;
		
                $db     = new Database();
                
				$catName =$this->input->post('Cat_Name');
		
                $where   ="CategoryName='{$catName}' AND Id!='{$id}'";
				$res = $db->checkExistance("product_category", $where); //  if exists id value will be returned.
	
				if($res)
				{
					$resData   = array(
											"status" => false,
											"message" =>"This category name already exists."
									  );		
					echo json_encode($resData);
					exit;
				}
		// --- checking the existance ends;
              $data 		= array();  
			  $newCategory  = $this->input->post('Cat_Name');//trim(urlencode($this->input->post('Cat_Name')));			  
              if($id==0) // if save
               {    
                $data = array(
								'CategoryName' => $this->input->post('Cat_Name'),
								'Status' => $this->input->post('Status'),
								'CreatedBy' => $_SESSION['ADMIN_ID']
									
							);
           	
               }
                else { // if edit
                    
                        $data = array(
								'CategoryName'=> $this->input->post('Cat_Name'),
								'Status' 	 => $this->input->post('Status'),
								'ModifiedBy' => $_SESSION['ADMIN_ID'],
                                'ModifiedOn' => date('Y-m-d H:i:s'),
                       	
								);
           	  }
                
       $res= $this->ProductCategory_model->saveData($data, $id);
	   
	    $moduleTab = "product_category";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
	   
	   $db = new BrqDatabase();
	   $resCatCombo = $db->getProductCatCombo();
	   $resData    = array(
								"status" => true,
								'message' => 'One product category saved successfully!!',
								'filterProductCatName' => $resCatCombo
						 );	
	   		 
	   if($id==0)
	   {
		   $resData["NewCatId"]  	=$res; // inserted id for CategoryCombo refresh select.
		   $resData["NewCategory"]  =$newCategory;
	   }	
		$resData = (object) array_merge((array) $resData, (array) $data);	   
	   echo json_encode($resData);
                
   } 
   
   //====================================Product Plan start================================
   //==================================== productPlanList function for listing all the Product Plans in DataTables - by Sajitha ================================
   public function productPlanList($subid="")
   {
	   $planId			=		$this->input->post('planid');
	   $productId		=		$this->input->post('productid');
	   $productCategoryId	=		$this->input->post('productcatid');
	   
	   $list 		= $this->ProductPlan_model->getDataTables($planId,$productId,$productCategoryId);
	   
	   $data 		= array();
	   $data1 		= array();
	   $no 		= $_POST['start'];
	   $action 	= '';
	   
	   foreach ($list as $data) {
		   
		   $statusClass = "label label-success";
		   $showClass	 = "label label-success";
		   $statusText	 = "Active";
		   $no++;
		   $row 			= array();
		   $db = new Database();
		   $productCatId = $db->getFieldValueById("product_master", "CategoryId", "Id='{$data->ProductId}'");
		   $productCatName = $db->getFieldValueById("product_category", "CategoryName", "Id='{$productCatId}'");
		   $row[] = $productCatName;
		   $productName  = $db->getFieldValueById("product_master", "ProductName", "Id='{$data->ProductId}'");
		   $row[] = $productName;
		   $row[] = $data->PlanTitle;
		   $row[] = $data->PlanPrice;	
		   $row[] = $data->PlanDuration;
		   $row[] = $data->NoOfUsers;
		   if($data->Status	==	"Inactive")
		   {
			   $statusClass = "label label-danger";
			   $statusText  = "Inactive";
		   }
		   
		   //adding html for action			
		   $row[]		= "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
		   
		   $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
		   $row[] = $data->CreatedBy;
		   
		   //adding html for action	
		   $permission = $_SESSION['GROUP_PERMISSION'];
		   $userGroupPermission =array();
		   $userGroupPermission = explode(",",$permission);
		   // echo $subid;
		   // print_r($userGroupPermission);
		   $actions ="";
		   $view ="Sub_Visible_".$subid;
		   $edit ="Sub_Edit_".$subid;
		   $copy ="Sub_Copy_".$subid;
		   $delete = "Sub_Del_".$subid;
		   $userPermission = $_SESSION['USER_PERMISSION'];
		   $userWisePermission =array();
		   $userWisePermission = explode(",",$userPermission);

		   $actions = '<div class="btn-group">'
					 .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"  aria-expanded="false">'
					 .'Action<span class="sr-only">Toggle Dropdown</span>'
					 .'</button>';
					
					 
		   if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
		   {
			   $actions .=  '<div class="dropdown-menu" role="menu" style="">'
			   .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit"  onclick="editData('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
		   }
		   if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
		   {
			   $actions .= '<div class="dropdown-divider"></div>'
					 .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editData('."'".$data->Id."'".', true)"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
		   }
		   if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
		   {
			   $actions .='<div class="dropdown-divider"></div>'
					 .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteProduct('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
		   }
	   
		   $actions .=' </div>'
					 .'</div>';
		   
		   $row[]	=	$actions;		
		   // $action = '';
		   
		   $data1[] = $row;
	   }

	   $output = array(
					   "draw" => $_POST['draw'],
					   "recordsTotal" => $this->ProductPlan_model->countAll(),
					   "recordsFiltered" => $this->ProductPlan_model->countFiltered($planId,$productId,$productCategoryId),
					   "data" => $data1,
			   );
	   //output to json format
	   echo json_encode($output);
	   
   }
	
	//==================================== saveProductPlan function for Saving Product Plan details - by Sajitha ================================
	public function saveProductPlan()
	   {
                $id		= $this->input->post("hidID");
                // --- checking the existance start;
		
                $db     = new Database();
                
				$planTitle =$this->input->post('Plan_Title');
		
                $where   ="PlanTitle='{$planTitle}' AND Id!='{$id}'";
				$res = $db->checkExistance("product_plan", $where); //  if exists id value will be returned.
	
				if($res)
				{
					$resData   = array(
											"status" => false,
											"message" =>"This plan title already exists."
									  );		
					echo json_encode($resData);
					exit;
				}
		// --- checking the existance ends;
              $data 		= array();  
			  if($id==0) // if save
               {    
                $data = array(
								'ProductId' => $this->input->post('planProductName'),
								'PlanTitle' => $this->input->post('Plan_Title'),
								'Description' => $this->input->post('Plan_Description'),
								'PlanPrice' => $this->input->post('Plan_Price'),
								'PlanDuration' => $this->input->post('Plan_Duration'),
								'NoOfUsers' => $this->input->post('No_Of_Users'),
								'GSTPercentage' => $this->input->post('GST_Percentage'),
								'Status' => $this->input->post('Plan_Status'),
								'CreatedBy' => $_SESSION['ADMIN_ID']
									
							);
           	
               }
                else { // if edit
                    
                        $data = array(
								'ProductId' => $this->input->post('planProductName'),
								'Description' => $this->input->post('Plan_Description'),
								'PlanPrice' => $this->input->post('Plan_Price'),
								'PlanDuration' => $this->input->post('Plan_Duration'),
								'NoOfUsers' => $this->input->post('No_Of_Users'),
								'GSTPercentage' => $this->input->post('GST_Percentage'),
								'PlanTitle'=> $this->input->post('Plan_Title'),
								'Status' 	 => $this->input->post('Plan_Status'),
								'ModifiedBy' => $_SESSION['ADMIN_ID'],
                                'ModifiedOn' => date('Y-m-d H:i:s'),
								);
           	  }
               
       $res= $this->ProductPlan_model->saveData($data, $id);
	   
	    $moduleTab = "product_plan";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
	   
	   $db = new BrqDatabase();
	   $resCatCombo = $db->getProductCatCombo();
	   $resData    = array(
								"status" => true,
								'message' => 'One product category saved successfully!!',
								//'filterProductCatName' => $resCatCombo
						 );	
	  	
		$resData = (object) array_merge((array) $resData, (array) $data);	   
	   echo json_encode($resData);
                
   } 
   
   //=========================== deleteProductPlan function used for deleting Product plan details by id from product_plan table===========================	 
	public function deleteProductPlan($id)
	{
        
	   $res    =  $this->ProductPlan_model->deleteData($id);
       $resData =array();
	   
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$moduleTab = "product_plan";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		
	   if($res)
	   {
		    $resData    = array(
								"status" => true,
								'message' => 'Product plan deleted successfully!!'
						 );
			
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Product Plan!!"
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData); 
    }    
	
	//=========================== getEditProductPlan function used for getting Product plan details by id from product_plan table===========================	 
	public function getEditProductPlan($id)
	{
		$db = new Database();			
		$productId = $db->getFieldValueById("product_plan", "ProductId", "Id='{$id}'");
		$catId = $db->getFieldValueById("product_master", "CategoryId", "Id='{$productId}'");
	    $resData = array(
						"catId" => $catId,
						"ProductId" => $productId
				 );
		$data = $this->ProductPlan_model->getById($id);		 
		$obj_merged = (object) array_merge((array) $data, (array) $resData); 
         
		echo json_encode($obj_merged);
	}
	
   //====================================Product Module start================================
   //==================================== productModuleList function for listing all the Product Module in DataTables - by Sajitha ================================
   public function productModuleList($subid="")
   {
	   $moduleId		=		$this->input->post('moduleid');
	   $productId		=		$this->input->post('productid');
	   $productCatId	=		$this->input->post('productcatid');
	   
	   $list 		= $this->ProductModule_model->getDataTables($moduleId,$productId,$productCatId);
	   
	   $data 		= array();
	   $data1 		= array();
	   $no 		= $_POST['start'];
	   $action 	= '';
	   
	   foreach ($list as $data) {
		   
		   $statusClass = "label label-success";
		   $showClass	 = "label label-success";
		   $statusText	 = "Active";
		   $no++;
		   $row 			= array();
		   $db = new Database();
		   
		   $photoPath 		= base_url().$data->ModulePhotoPath.'thumb/';
		   $modulePhoto 	= $photoPath.$data->ModuleMainImage;
		   $modulePhotoLarge 	= base_url().$data->ModulePhotoPath.$data->ModuleMainImage;
		   if(!(file_exists($data->ModulePhotoPath.'thumb/'.$data->ModuleMainImage))) {			
			   $modulePhoto 	=  base_url().'./uploads/module_images/thumb/module.jpg';
			   $modulePhotoLarge 	= base_url().'./uploads/module_images/module.jpg';
		   }
		   
		   $row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$modulePhotoLarge.'\',\''.$data->ModuleName.'\');" ><img style="margin-left:25px;"   class="rounded-circle" src="'.$modulePhoto.'" height="40" width="40" alt=""></a>';
		   
		   $productCatId = $db->getFieldValueById("product_master", "CategoryId", "Id='{$data->ProductId}'");
		   $productCatName = $db->getFieldValueById("product_category", "CategoryName", "Id='{$productCatId}'");
		   $row[] = $productCatName;
		   $productName  = $db->getFieldValueById("product_master", "ProductName", "Id='{$data->ProductId}'");
		   $row[] = $productName;
		   $row[] = $data->ModuleName;
		   $row[] = $data->ModulePrice;	
		   $row[] = $data->ClientMenuItem;
		   if($data->Status	==	"Inactive")
		   {
			   $statusClass = "label label-danger";
			   $statusText  = "Inactive";
		   }
		   
				   
		   $row[]		= "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
		   if(file_exists($data->ModulePDFPath.$data->PdfFileLink) && $data->PdfFileLink != '')
			   $row[] = '<span class="label label-success"><a href="'.base_url().$data->ModulePDFPath.$data->PdfFileLink.'" target="_blank">View PDF</a></span>';
		   else
			   $row[] = '';
		   
		   $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
		   //adding html for action	
		   $permission = $_SESSION['GROUP_PERMISSION'];
		   $userGroupPermission =array();
		   $userGroupPermission = explode(",",$permission);
		   // echo $subid;
		   // print_r($userGroupPermission);
		   $actions ="";
		   $view ="Sub_Visible_".$subid;
		   $edit ="Sub_Edit_".$subid;
		   $copy ="Sub_Copy_".$subid;
		   $delete = "Sub_Del_".$subid;
		   $userPermission = $_SESSION['USER_PERMISSION'];
		   $userWisePermission =array();
		   $userWisePermission = explode(",",$userPermission);

		   $actions = '<div class="btn-group">'
					 .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"  aria-expanded="false">'
					 .'Action<span class="sr-only">Toggle Dropdown</span>'
					 .'</button>';
					
					 
		   if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
		   {
			   $actions .=  '<div class="dropdown-menu" role="menu" style="">'
			   .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit"  onclick="editData('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
		   }
		   if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
		   {
			   $actions .= '<div class="dropdown-divider"></div>'
					 .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editData('."'".$data->Id."'".', true)"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
		   }
		   if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
		   {
			   $actions .='<div class="dropdown-divider"></div>'
					 .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteProduct('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
		   }
	   
		   $actions .=' </div>'
					 .'</div>';
		   
		   $row[]	=	$actions;		
		   // $action = '';
		   
		   $data1[] = $row;
	   }


	   $output = array(
					   "draw" => $_POST['draw'],
					   "recordsTotal" => $this->ProductModule_model->countAll(),
					   "recordsFiltered" => $this->ProductModule_model->countFiltered($moduleId,$productId,$productCatId),
					   "data" => $data1,
			   );
	   //output to json format
	   echo json_encode($output);
	   
   }
	
	//==================================== saveProductModule function for Saving Product Module details - by Sajitha ================================
	public function saveProductModule()
	{
		$id				= $this->input->post("hidID");
		$uploadDir		= '';
		$uploadDirPDF	= '';
		$launchdate 	= '';
		
		$data 			= array();  
		$status 				= $this->input->post('Module_Status');
		$moduleProductName 		= $this->input->post('ModuleProductName');
		$moduleName 			= $this->input->post('Module_Name');
		$moduleDetails 			= $this->input->post('Module_Details');
		$moduleFaIcon 			= $this->input->post('Module_Fa_Icon');
		$moduleLinkPage 		= $this->input->post('Module_Link_Page');
		$slug 					= $this->input->post('Slug');
		$modulePrice 			= $this->input->post('Module_Price');
		$clientMenuItem 		= $this->input->post('Client_Menu_Item'); 
		$moduleSEOKeywords 		= $this->input->post('Module_SEO_Keywords');
		$moduleSEODescription 	= $this->input->post('Module_SEO_Description');
		$moduleGSTPercentage 	= $this->input->post('Module_GST_Percentage');
		$HsnCode 				= $this->input->post('HSN_Code');
		$db  				= new Database();
		$HsnId 				= $db->getFieldValueById("sys_hsn_master", "Id", "HsnCode={$HsnCode}");			
		if(!$HsnId)
		{
			$resData   = array(
									"status" => false,
									"message" =>"The HSN Code you entered does not exists. Please type correct HSN Code."
							  );		
			echo json_encode($resData);
			exit;
		}
		$HsnType 			= $db->getFieldValueById("sys_hsn_master", "HsnType", "Id={$HsnId}");
		$HsnDescription 	= $db->getFieldValueById("sys_hsn_master", "HsnDescription", "Id={$HsnId}");
		$SkuCode 			= $db->getFieldValueById("sys_hsn_master", "SkuCode", "Id={$HsnId}");	
		
		$db  				= new Database();
		
		$where  = "ModuleName='{$moduleName}' AND Id!='{$id}'";
		$res 	= $db->checkExistance("client_module_head", $where); //  if exists id value will be returned.

		if($res)
		{
			$resData   = array(
									"status" => false,
									"message" =>"This product module name already exists."
							  );		
			echo json_encode($resData);
			exit;
		}
		
		$modulePhoto   = '';
		// Product Module Picture uploading starts
		if(isset($_FILES))
		{
			$TotalFiles = $_POST["TotalFiles"];
			if($TotalFiles != 0) {
				//foreach($_FILES as $file)
				for ($i=0;  $i<=$TotalFiles; $i++)
				{
					if(isset($_FILES["file_".$i]))
					{
						// tmp_name | name | type | size | error
						
						// -- Check here type  size and if any error.
						$fileName 	= $_FILES["file_".$i]['name'];
						$imgSize 	= $_FILES["file_".$i]['size'];
								
								// Check file size '5MB' or from max.image byte upload settings, in site settings module.
								if($imgSize < 5000000){}
								else{
											$msgError = "Module picture " . $fileName . " file is too large. Only 5 MB allowed!.";
											$errMSG   = "Error : Sorry," .$msgError;
									}
							
						$tempName	= $_FILES["file_".$i]['tmp_name'];
						$uploadDir	= "./uploads/module_images/"; // this would be the upload file path. Exactly specify here or from the settings.
												
						// uploadTransparentImage is defined in site_helper (system/helper folder).
						$uploadResult = uploadTransparentImage($tempName, $uploadDir, "", $fileName,TRUE,$_POST["Pic_Name"]);
						
						
						if($uploadResult['status'] == 'true') {
							$modulePhoto = $uploadResult['fileName'];
						} else {
							echo json_encode(
									array("status" => false, 
										  "message"=>$uploadResult['message']
										 )
								);
							exit;
						}
					}
				}
			} else { 
				if($id==0) {
					$uploadDir	= "./uploads/module_images/";
					$modulePhoto = "module.jpg";
				}
			}
		} 
		
		// Product Module Picture uploading ends
		
		// PDF uploading starts
		if(isset($_FILES))
		{
			if(isset($_FILES["filepdf_"]))
					{
						// tmp_name | name | type | size | error
						
						// -- Check here type  size and if any error.
						$fileName 	= $_FILES["filepdf_"]['name'];
						$imgSize 	= $_FILES["filepdf_"]['size'];
								
								// Check file size '5MB' or from max.image byte upload settings, in site settings module.
								if($imgSize < 5000000){}
								else{
											$msgError = "PDF " . $fileName . " file is too large. Only 5 MB allowed!.";
											$errMSG   = "Error : Sorry," .$msgError;
									}
							
						$tempName	= $_FILES["filepdf_"]['tmp_name'];
						$uploadDirPDF	= "./uploads/modules/"; // this would be the upload file path. Exactly specify here or from the settings.
						
						// uploadImage is defined in site_helper (system/helper folder).
						$uploadResult = uploadDocument($tempName, $uploadDirPDF, "", $fileName, "", "",  TRUE, TRUE, TRUE,$_POST["PDF_Name"]);
						if($uploadResult['status'] == 'true') {
							$pdfName = $uploadResult['fileName'];
							
						} else {
							echo json_encode(
									array("status" => false, 
										  "message"=>$uploadResult['message']
										 )
								);
							exit;
						}
				}
			
				
		} 
		
		
		if($id==0) // if add
		{    
			$data = array(
						'Productid' => $moduleProductName,
						'ModuleName' => $moduleName,
						'Details' => $moduleDetails,
						'Status' => $status,
						'FaIcon' => $moduleFaIcon,
						'ModulePrice' => $modulePrice,
						'ClientMenuItem' => $clientMenuItem,
						'SEOKeywords' => $moduleSEOKeywords, 
						'SEODescription' => $moduleSEODescription, 
						'GSTPercentage' => $moduleGSTPercentage,
						'LinkPage' => $moduleLinkPage,
						'Slug' => $slug,
						'CreatedId'	=> $_SESSION['EMPLOYEE_ID'],
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),	
						'ModulePhotoPath' => $uploadDir,
						'ModuleMainImage' => $modulePhoto,
						'ModulePDFPath' => $uploadDirPDF,
						'PdfFileLink' => $pdfName,	
						'HSNId' => $HsnId,
						'HSNCode' => $HsnCode,
						'HSNType' => $HsnType,
						'HSNDescription' => $HsnDescription,
						'SKU' => $SkuCode,						
					);
				
		}
		else { // if edit
				$data = array(
						'Productid' => $moduleProductName,
						'ModuleName' => $moduleName,
						'Details' => $moduleDetails,
						'Status' => $status,
						'FaIcon' => $moduleFaIcon,
						'ModulePrice' => $modulePrice,
						'ClientMenuItem' => $clientMenuItem,
						'SEOKeywords' => $moduleSEOKeywords, 
						'SEODescription' => $moduleSEODescription,
						'GSTPercentage' => $moduleGSTPercentage,
						'LinkPage' => $moduleLinkPage,
						'Slug' => $slug,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),
						'ModifiedId' => $_SESSION['EMPLOYEE_ID'],
						'HSNId' => $HsnId,
						'HSNCode' => $HsnCode,
						'HSNType' => $HsnType,
						'HSNDescription' => $HsnDescription,
						'SKU' => $SkuCode,
						);
				if($modulePhoto !='' && $uploadDir != '') {
					$data += [ "ModuleMainImage" => $modulePhoto, "ModulePhotoPath" => $uploadDir ];
				 		
					//deleting existing product module picture and thumbnail		
					$db  				= new Database();
					$moduleMainImage 	= $db->getFieldValueById("client_module_head", "ModuleMainImage", "Id='{$id}'");	
					$modulePhotoPath 	= $db->getFieldValueById("client_module_head", "ModulePhotoPath", "Id='{$id}'");	
					if($moduleMainImage != 'module.jpg' && (file_exists($modulePhotoPath.$moduleMainImage))) {
						unlink($modulePhotoPath.$moduleMainImage);
						if(file_exists($modulePhotoPath."thumb/".$moduleMainImage))
							unlink($modulePhotoPath."thumb/".$moduleMainImage);
					}	
				}

				if($pdfName !='' && $uploadDirPDF != '') {
					 $data += [ "PdfFileLink" => $pdfName, "ModulePDFPath" => $uploadDirPDF ];
					//deleting existing product module pdf		
					
					$pdfName 		= $db->getFieldValueById("client_module_head", "PdfFileLink", "Id='{$id}'");	
					$uploadDirPDF 	= $db->getFieldValueById("client_module_head", "ModulePDFPath", "Id='{$id}'");	
					if(file_exists($uploadDirPDF.$pdfName)) {
						unlink($uploadDirPDF.$pdfName);						
					}
				}					
		}
		$res	= $this->ProductModule_model->saveData($data, $id);
		
		if($res) // if first time  update add, insert to the table.
		{
			$resLinkPage  = array(
							"LinkPage" => 'module_details/'.$res."/".$moduleLinkPage,
						 );	
			
			$this->db->update('client_module_head',$resLinkPage,array('Id'=> $res));
		}
		
		
		//$db = new BrqDatabase();
		//$resCombo = $db->getProductNameCombo();
		$resData  = array(
							"status" => true,
							'message' => 'Product module details saved successfully!!',
							//'filterProduct' => $resCombo
						 );	
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$moduleTab="product_module";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product_module
		
		$resData = (object) array_merge((array) $resData, (array) $data);
	    echo json_encode($resData);
	}
	
	//=========================== getEditProductModule function used for getting Product Module details by id from client_module_head table===========================	 
	public function getEditProductModule($id)
	{
		$data = $this->ProductModule_model->getById($id);
		$prdtId = $data->ProductId;
		$db = new Database();			
		$catId = $db->getFieldValueById("product_master", "CategoryId", "Id='{$prdtId}'");
		$resData = array(
						"ProductCatId" => $catId,
				 );
				 
		$obj_merged = (object) array_merge((array) $data, (array) $resData); 
         
		echo json_encode($obj_merged);
	}
	
	//==================================== Function to get details of Product Module Picture details by Id - by Sajitha ================================
	public function getProductModulePic($id)
	{
		$db  				= new Database();
		$modulePhoto 		= $db->getFieldValueById("client_module_head", "ModuleMainImage", "Id='{$id}'");	
		$modulePhotoPath 	= $db->getFieldValueById("client_module_head", "ModulePhotoPath", "Id='{$id}'");	
		if(file_exists($modulePhotoPath."thumb/".$modulePhoto)) 
			echo 1;
		else
			echo 0;
	}
	
	//==================================== Function to get details of Product Module PDF details by Id - by Sajitha ================================
	public function getProductModulePDF($id)
	{
		$db  				= new Database();
		$modulePDF 		= $db->getFieldValueById("client_module_head", "PdfFileLink", "Id='{$id}'");	
		$modulePDFPath 	= $db->getFieldValueById("client_module_head", "ModulePDFPath", "Id='{$id}'");	
		if(file_exists($modulePDFPath.$modulePDF)) 
			echo 1;
		else
			echo 0;
	}
	
	//=========================== deleteProductModule function used for deleting Product Module details by id from client_module_head table===========================	 
	public function deleteProductModule($id)
	{
        //deleting existing product picture and thumbnail		
		$db  				= new Database();
		$moduleMainImage 	= $db->getFieldValueById("client_module_head", "ModuleMainImage", "Id='{$id}'");	
		$modulePhotoPath 	= $db->getFieldValueById("client_module_head", "ModulePhotoPath", "Id='{$id}'");	
		if($moduleMainImage != 'module.jpg' && (file_exists($modulePhotoPath.$moduleMainImage))) {
			unlink($modulePhotoPath.$moduleMainImage);
			if(file_exists($modulePhotoPath."thumb/".$moduleMainImage))
				unlink($modulePhotoPath."thumb/".$moduleMainImage);
		}
		
		$pdfFileLink 		= $db->getFieldValueById("client_module_head", "PdfFileLink", "Id='{$id}'");	
		$modulePDFPath 	= $db->getFieldValueById("client_module_head", "ModulePDFPath", "Id='{$id}'");	
		if(file_exists($modulePDFPath.$pdfFileLink)) {
			unlink($modulePDFPath.$pdfFileLink);
		}
		
	   $res    =  $this->ProductModule_model->deleteData($id);
       $resData =array();
	   
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$moduleTab = "product_module";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		
	   if($res)
	   {
		    $db = new BrqDatabase();
			//$resCombo = $db->getProductNameCombo();
			$resData    = array(
								"status" => true,
								'message' => 'Product Module deleted successfully!!',
								//'filterProduct' => $resCombo
						 );
			
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Product!!"
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData); 
    }    
    
	//==================================== installmentBundleList function for listing all the Installment Bundles in DataTables - by Sajitha ================================
	public function installmentBundleList($subid="")
	{
		
		$list 	= $this->InstallmentBundle_model->getDataTables();
		$data 		= array();
        $data1 		= array();
		$no 		= $_POST['start'];
		$action 	= '';
		
		foreach ($list as $data) {
			
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$row   = array();
			$row[] = $data->NoOfInstallment;
			$row[] = $data->InitialPaymnetDescription;	
			$row[] = $data->SubsequentPayments;
			if($data->Status	==	"Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			
			//adding html for action			
			$row[]		= "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] = $data->CreatedBy;
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			// echo $subid;
			// print_r($userGroupPermission);
			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"  aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
					 
	                  
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .=  '<div class="dropdown-menu" role="menu" style="">'
				.'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit"  onclick="editData('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
			{
				$actions .= '<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editData('."'".$data->Id."'".', true)"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteProduct('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
		
			$actions .=' </div>'
	                  .'</div>';
			
			$row[]	=	$actions;		
			// $action = '';
			
			$data1[] = $row;
		}
		$output = array(
			"draw" => $_POST['draw'],
			"recordsTotal" => $this->InstallmentBundle_model->countAll(),
			"recordsFiltered" => $this->InstallmentBundle_model->countFiltered($moduleId,$productId,$productCatId),
			"data" => $data1,
		);
//output to json format
	echo json_encode($output);


	}



	
	//=========================== deleteInstallmentBundle function used for deleting Product Installment Bundle details by id from product_installment_bundle table===========================	     
    public function deleteInstallmentBundle($id)
	{
       $res    =  $this->InstallmentBundle_model->deleteData($id);
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	    $_SESSION["USER_MODULE_PAGE"]	="product_installment_bundle"; // for lock screen management;
		//$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
			   
       $resData =array();
	  
	   if($res)
	   {
			$resData    = array(
								"status" => true,
								'message' => 'Product Installment Bundle deleted successfully!!'
						 );	
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Product Installment Bundle!! "
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
	   
	   echo json_encode($resData);  
	}
	
	
    //=========================== getEditInstallmentBundle function used for getting Product Installment Bundle details by id from product_installment_bundle table===========================	     
    public function getEditInstallmentBundle($id)
	{
		$data = $this->InstallmentBundle_model->getById($id);
		echo json_encode($data);
	}
	
	//==================================== saveInstallmentBundle function for Saving Installment Bundle details - by Sajitha ================================
	public function saveInstallmentBundle()
	{
		$id				= $this->input->post("hidID");
		$uploadDir		= '';
		$launchdate 	= '';
		
		$data 			= array();  
		$noOfInstallment  			= $this->input->post('No_Of_Installment');
		$status 					= $this->input->post('Status');
		$initialPaymnetDescription 	= $this->input->post('Initial_Paymnet_Description');
		$subsequentPayments 		= $this->input->post('Subsequent_Payments');
		
		$db  				= new Database();
		
		$where  = "NoOfInstallment='{$noOfInstallment}' AND Id!='{$id}'";
		$res 	= $db->checkExistance("product_installment_bundle", $where); //  if exists id value will be returned.

		if($res)
		{
			$resData   = array(
									"status" => false,
									"message" =>"This product installment bundle already exists."
							  );		
			echo json_encode($resData);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'NoOfInstallment' => $noOfInstallment,
						'InitialPaymnetDescription' => $initialPaymnetDescription,
						'SubsequentPayments' => $subsequentPayments,
						'Status' => $status,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),	
					);
				
		}
		else { // if edit
				$data = array(
						'NoOfInstallment' => $noOfInstallment,
						'InitialPaymnetDescription' => $initialPaymnetDescription,
						'SubsequentPayments' => $subsequentPayments,
						'Status' => $status,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),
						);
		}
		$res	= $this->InstallmentBundle_model->saveData($data, $id);
		
		$resData  = array(
							"status" => true,
							'message' => 'Product Installment Bundle details saved successfully!!',
						 );	
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$moduleTab="product_installment_bundle";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		
		$resData = (object) array_merge((array) $resData, (array) $data);
	    echo json_encode($resData);
	}
	

	
	public function discountList($id="")
	{
		$list 	= $this->DiscountProduct_model->getDataTables();
		$data 		= array();
        $data1 		= array();
		$no 		= $_POST['start'];
		$action 	= '';
		
		foreach ($list as $data) {
			
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$row   = array();
			$row[] = $data->Scheme;
			$row[] = $data->Percentage;	
			$row[] = $data->CouponCode;
			$row[] = $data->DiscountPercentage;	
			$row[] = $data->EffectiveFrom;
			$row[] = $data->EffectiveTo;
			// echo $data->Status;	
			// $row[] = $data->Status;
			if($data->Status ==	"Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			if($data->Status ==	"Expired")
			{
				$statusClass = "label label-info";
				$statusText  = "Expired";
			}
			
					
			$row[]		= "<span class='" . $statusClass . "'>" . $statusText . "</span>";
			// $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			// $row[] = $data->CreatedBy;
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
		//adding html for action	
			$actions ="";
			$view ="Sub_Visible_".$id;
			$edit ="Sub_Edit_".$id;
			$copy ="Sub_Copy_".$id;
			$delete = "Sub_Del_".$id;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			$action = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit"  onclick="editBundleData('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editBundleData('."'".$data->Id."'".', true)"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteBundle('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}

			$actions .=' </div>'
	                  .'</div>';
			
			$row[]	=	$action;		
			$action = '';			
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->DiscountProduct_model->countAll(),
						"recordsFiltered" => $this->DiscountProduct_model->countFiltered(),
						"data" => $data1,
				);
		//output to json format
		echo json_encode($output);		
	} 
	
		//=========================== deleteInstallmentBundle function used for deleting Product Installment Bundle details by id from product_installment_bundle table===========================	     
		public function deleteDiscount($id)
		{
		   $res    =  $this->DiscountProduct_model->deleteData($id);
		   if(!$this->isSessionSet())
			{
				$this->index();
				return;
			}
			$_SESSION["USER_MODULE_PAGE"]	="product_discount"; // for lock screen management;
			//$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
			
			$data 					= array();
			$headTitleAddText		= " : Login as ";
			$headTitleAddId			= $_SESSION['ADMIN_ID'];
			$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
				   
		   $resData =array();
		  
		   if($res)
		   {
				$resData    = array(
									"status" => true,
									'message' => 'Product Discount Deleted Successfully!!'
							 );	
		   }
		   else
		   {
			   $resData=array(
						"status"=>false,
						"message"=>"Oops! Error, Can't delete Product Discount!! "
					   );
		   }
			
			$resData = (object) array_merge((array) $resData, (array) $data);
		   
		   echo json_encode($resData);  
		}
		
		
		//=========================== getEditInstallmentBundle function used for getting Product Installment Bundle details by id from product_installment_bundle table===========================	     
		public function getEditDiscount($id)
		{
			$data = $this->DiscountProduct_model->getById($id);
			echo json_encode($data);
		}
		
		//==================================== saveInstallmentBundle function for Saving Installment Bundle details - by Sajitha ================================
		public function saveDiscount()
		{
			$id				= $this->input->post("hidID");
			$uploadDir		= '';
			$launchdate 	= '';
			
			$data 			= array();  
			$status 					= $this->input->post('Status');
			$Scheme  			= $this->input->post('Scheme');
			$Percentage 					= $this->input->post('Percentage');
			$CouponCode 		= $this->input->post('CouponCode');
			$DiscountPercentage 			= $this->input->post('DiscountPercentage');
			$EffectiveFrom 		= $this->input->post('EffectiveFrom');
			$EffectiveTo 		= $this->input->post('EffectiveTo');
			$db  				= new Database();
			
			$where  = "id='{$Id}'";
			$res 	= $db->checkExistance("product_discount", $where); //  if exists id value will be returned.
	
		
			if($res)
			{
				$resData   = array(
										"status" => false,
										"message" =>"This product Discount Saved Successfully."
								  );		
				echo json_encode($resData);
				exit;
			}
			
			if($id==0) // if add
			{    
				$data = array(
							'Scheme' => $Scheme,
							'Percentage' => $Percentage,
							'CouponCode' => $CouponCode,
							'DiscountPercentage' => $DiscountPercentage,
							'EffectiveFrom' => $EffectiveFrom,
							'EffectiveTo' => $EffectiveTo,
							'Status' => $status,
						    'CreatedBy' => $_SESSION['ADMIN_ID'],
							'CreatedOn' => date('Y-m-d H:i:s'),
						);
					
			}
			else { // if edit
					$data = array(
							'Scheme' => $noOfInstallment,
							'Percentage' => $initialPaymnetDescription,
							'CouponCode' => $subsequentPayments,
							'DiscountPercentage' => $status,
							'EffectiveFrom' => $EffectiveFrom,
							'EffectiveTo' => $EffectiveTo,
							'Status' => $status,
							'ModifiedBy' => $_SESSION['ADMIN_ID'],
							'ModifiedOn' => date('Y-m-d H:i:s'),
							);
			}
			$res	= $this->DiscountProduct_model->saveData($data, $id);
			
			$resData  = array(
								"status" => true,
								'message' => 'Product Discount details saved successfully!!',
							 );	
			
			if(!$this->isSessionSet())
			{
				$this->index();
				return;
			}
			$moduleTab="product_discount";
			$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
			$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
			
			$data 					= array();
			$headTitleAddText		= " - Products : Login as ";
			$headTitleAddId			= $_SESSION['ADMIN_ID'];
			$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
			
			$data["moduleTab"]		= $moduleTab; // product or product_category
			
			$resData = (object) array_merge((array) $resData, (array) $data);
			echo json_encode($resData);
		}
		
	
    //==================================== productCategoryList function for listing all the Product Categories in DataTables - by Sajitha ================================
	public function productCategoryList($id="")
	{
        $list 	= $this->ProductCategory_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		//$no=1;
		
		foreach ($list as $data) {
		
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row 	= array();
			$row[] = '<input onclick="catItemDelete();"class="del-check" type="checkbox" id="delCat_'.$id.'" />';
			
			$row[] = $data->CategoryName;
			
		    if($data->Status=="Inactive")
			 {
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			 }
			 
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
		    $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
            $row[] = $data->CreatedBy;
           
			//add html for action
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
		
			$actions ="";
			$view ="Sub_Visible_".$id;
			$edit ="Sub_Edit_".$id;
			$copy ="Sub_Copy_".$id;
			$delete = "Sub_Del_".$id;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary ="window" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .= '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="editCatData('."'".$data->Id."'".')"><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .=  '<a  id="deleteCatButton_'. $data->Id.'" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="deleteCatData('."'".$data->Id."'".')"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</a>';
			}
			// important" for delete button id here is deleteCatButton_Id", for delete loading while delete action.		
			//<a id="viewButton" class="btn btn-small btn-info" href="javascript:void(0)" title="Click to edit" onclick="edit_menu('."'". $menu->Id ."'".')"><i class="fa fa-sticky-note-o"></i> View</a>';	  
			$row[] = $actions;
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->ProductCategory_model->countAll(),
						"recordsFiltered" => $this->ProductCategory_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
		
   }




    //=========================== getEditProductCategory function used for getting Product category details by id from product_category table===========================	     
    public function getEditProductCategory($id)
	{
		$data = $this->ProductCategory_model->getById($id);
		echo json_encode($data);
	}
	
	//=========================== deleteProductCategory function used for deleting Product category details by id from product_category table===========================	     
    public function deleteProductCategory($id)
	{
       $res    =  $this->ProductCategory_model->deleteData($id);
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	    $_SESSION["USER_MODULE_PAGE"]	="product"; // for lock screen management;
		//$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
			   
       $resData =array();
	  
	   if($res)
	   {
			$db = new BrqDatabase();
			$resCatCombo = $db->getProductCatCombo();
			$resData    = array(
								"status" => true,
								'message' => 'Product Category deleted successfully!!',
								'filterProductCatName' => $resCatCombo
						 );	
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Product Category!! It is currently used for product."
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
	   
	   echo json_encode($resData);  
	   
	}    
  
    //=========================== deleteSelectedProductCategory function used for deleting Product categories selected by checking checkbox from product_category table===========================	     
	public function deleteSelectedProductCategory() 
	{
	  
		$items   =  $this->input->post('deleteItems');
		$resDataDB =  $this->ProductCategory_model->deleteSelectedProductCategory($items);
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	    $_SESSION["USER_MODULE_PAGE"]	="product_category"; // for lock screen management;
		//$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);

		 if($resDataDB['status'])
	   {
			$db = new BrqDatabase();
			$resCatCombo = $db->getProductCatCombo();
			$resData    = array(
								"status" => true,
								'message' => $resDataDB['message'],
								'filterProductCatName' => $resCatCombo
						 );	
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$resDataDB['message']
				   );
	   }
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData);
	  
	}
	
	//================================= user_group function to view user group details ===========================
	public function user_group($id="")
	{
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	    $_SESSION["USER_MODULE_PAGE"]="user_group"; // for lock screen management;
		//$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]			= $id;
		$this->load->view("brq-admin/user-group", $data);
		
	}
	
	//================================= saveUserGroup function  to save user group details ===========================
	public function saveUserGroup($userGroup="", $id=0, $status="")
	{
			$description = $this->input->post("description");
			$project 			= trim($this->input->post("projectSelected"));

			$userGroup  = trim(urldecode($userGroup));
			
		    // --- checking the existance start;
			$userGroup1 = strtoupper($userGroup);
			$db     	= new Database();
			 
			$where   	=" UPPER(UserGroup)='{$userGroup1}' AND Id!='{$id}'";
			$res 		= $db->checkExistance("sys_user_group", $where); // if exists id value will be returned.
		
			if($res)
			{
				echo json_encode(
									array("status" => false, 
										  "message"=>"This user group already created and exists!"
										 )
								);
				exit;
			}
		
			// --- checking the existance ends;
           
			// getting the user type
               
			   if($id==0)
               {    
					$data = array(
								'UserGroup' => $userGroup,
								'BrqProjectId'=>$project,
								'CreatedBy' => $_SESSION['ADMIN_ID'],
                                'Status' => $status,
								'Description' => $description
								);
           	   }
                else { // if edit
                    
                        $data = array(
									'UserGroup' => $userGroup,
									'BrqProjectId'=>$project,
									'Status' => $status,
									'ModifiedBy' => $_SESSION['ADMIN_ID'],
									'ModifiedOn' => date('Y-m-d H:i:s'),
									'Description' => $description
									);
					 }
                
				
			$res = $this->UserGroup_model->saveData($data,$id);
			
			if(!$this->isSessionSet())
			{
				$this->index();
				return;
			}
			$_SESSION["USER_MODULE_PAGE"]="user_group"; // for lock screen management;
			//$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
			
			$data 					= array();
			$headTitleAddText		= " : Login as ";
			$headTitleAddId			= $_SESSION['ADMIN_ID'];
			$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
			$res = array("status" => true,'message' => 'success');
			$res = (object) array_merge((array) $res, (array) $data);
			echo json_encode($res);			
   }   
  
	//================================= userGroupList function  to list all user groups ===========================
	public function userGroupList($id="")
	{
		
        $list 	= $this->UserGroup_model->getDataTables();
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		//$no=1;
		
		foreach ($list as $data) {
		
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			
			$rightsButton=' <a  id="rightsButton" class="btn btn-sm mb-1 btn-outline-light" href="javascript:void(0)" title="Click to edit and save user rights modules" onclick="userRights('."'".$data->Id."'".')"><i class="fa fa-check-square-o"></i> Group Permissions</a>';
				
			
			$row = array();
			$name= array();
			$row[] = $data->UserGroup;
			
			
			$str	= "";
			$str	= $data->BrqProjectId;
			$res	= explode(',', $str);
			$project=$this->getAllPostProject();
			
				foreach ( $project as $category) : $i++; 
					if (in_array($category->Id,$res)) 
							
							$name[] =$category->ProjectName;
				endforeach;

			$row[] =$name;		
			if($data->Status=="Inactive")
			 {
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
				$rightsButton= "";
			 }
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			
			$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
            $row[] = $data->CreatedBy;
			$permission = $_SESSION['GROUP_PERMISSION'];
		
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
		
			$actions ="";
			$view ="Sub_Visible_".$id;
			$edit ="Sub_Edit_".$id;
			$delete = "Sub_Del_".$id;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				
				$actions .= '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="editData('."'".$data->Id."'".')"><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .= '<a  id="deleteButton" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="deleteData('."'".$data->Id."'".')"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</a>' ;
			}
			 
			$actions .= $rightsButton;
			
			$row[] = $actions;
			//add html for action
		  		  
			// $row[] = '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="editData('."'".$data->Id."'".')"><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>
			// 	<a  id="deleteButton" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="deleteData('."'".$data->Id."'".')"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</a>'. $rightsButton;

			//<a id="viewButton" class="btn btn-small btn-info" href="javascript:void(0)" title="Click to edit" onclick="edit_menu('."'". $menu->Id ."'".')"><i class="fa fa-sticky-note-o"></i> View</a>';	  
		
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->UserGroup_model->countAll(),
						"recordsFiltered" => $this->UserGroup_model->countFiltered(),
						"data" => $data1,
				);
		//output to json format
		echo json_encode($output);
   }

	//================================= getAllPostProjectfunction to get all brq projects =======================
   public function getAllPostProject()
	{
		$this->db->order_by("Id");
		$this->db->where("Status", "Active");
		$res = $this->db->get("sys_erp_projects");
		
        return $res->result();
		
	}
   
	//================================= getEditUserGroup function  to edit the details of a user group ===========================
	public function getEditUserGroup($id)
	{
		$data = $this->UserGroup_model->getById($id);
		echo json_encode($data);
	}
   
	//================================= deleteUserGroup function  to delete a user group ===========================
	public function deleteUserGroup($id)
	{
	   $res    =  $this->UserGroup_model->deleteData($id);
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	    $_SESSION["USER_MODULE_PAGE"]	="user_manager"; // for lock screen management;
		//$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
			   
       $resData =array();
	   if($res)
	   {
		   		   
		   $resData=array(
					"status"=>true,
					"message"=>"User Group deleted successfully!!"
				   );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete this group, this currently used for user!!"
				   );
		   
	   }
	   $resData = (object) array_merge((array) $resData, (array) $data);
	   echo json_encode($resData);  
   }
	
	//=================================== User Manager Functions Start ===========================	
	//=================================== user_manager functions to view list of Users ===========================	
	public function user_manager($id="")
	{
       if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	    $_SESSION["USER_MODULE_PAGE"]	="user_manager"; // for lock screen management;
		//$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]			= $id;
        $this->load->view('brq-admin/user-manager',$data);
	
	}
//=========================== saveUser function used for saving User details to the login table ===========================	
public function saveUser()
{
	$id				=		$this->input->post('id');
	$userGroupId	=		$this->input->post('userGroupId');
	$branchId		=		$this->input->post('branchId');
	$depId			=		$this->input->post('depId');
	$userGroupName	=		$this->input->post('userGroupName');
	$empId			=		$this->input->post('empId');
	$status			=		$this->input->post('status');
	$userId			=		$this->input->post('userId');
	$phno			=		$this->input->post('phno');
	// --- checking the existance start;

	$db     		= new Database();
	$where   		= "UserId='{$userId}' AND Id!='{$id}'";
	
	$res = $db->checkExistance("login", $where); //  if exists id value will be returned.
	
	if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This user id already created and exists!"
									 )
							);
			exit;
		}
		// --- checking the existance ends;
					
			// getting the user type
			
			$db 		=NULL;
			
			//'ModifiedOn' => date('Y-m-d H:i:s');
			$activatedOn    	=NULL;
			$InActivatedOn    	=NULL;
			
			
			if(urldecode($status)=='Active')
				$activatedOn =date('Y-m-d H:i:s');
			else
				$InActivatedOn =date('Y-m-d H:i:s');
			
						   
		   if($id==0)
		   {    
			
			$password		=		$this->input->post('password');
			$data = array(
							'UserId' => trim(urldecode($userId)),
							'UserGropId' => trim(urldecode($userGroupId)),
							'BranchId' => $branchId,
							'DepId' => $depId,
							'password' => encriptPassword($password),
							'UserType' => trim(urldecode($userGroupName)),
							'Status' => $status,
							'ActivatedOn' => $activatedOn,
							'InActivatedOn' => $InActivatedOn,
							'CreatedBy' => $_SESSION['ADMIN_ID'],
							'EmployeeId' => $empId,
						 );
				//Need to run a sql trigger to update all the fields from employee table
		   }
			else { // if edit
				
					$data = array(
									'UserId' => trim(urldecode($userId)),
									'UserGropId' => trim(urldecode($userGroupId)),
									//'BranchId' => $branchId,
									//'DepId' => $depId,
									'UserType' => trim(urldecode($userGroupName)),
									'Status' => $status,
									'ActivatedOn' => $activatedOn,
									'InActivatedOn' => $InActivatedOn,
									'ModifiedBy' 	=> $_SESSION['ADMIN_ID'],
									'ModifiedOn' 	=> date('Y-m-d H:i:s'),
					   
								);
					
				}
			
	//updating the employee_master table's UserGroupId fields
	$this->db->update("employee_master",array("BranchId"=>$branchId,"DepId"=>$depId,"UserGroupId"=>$userGroupId), array('Id' => $empId));
	
	//saving to the login table
	$res= $this->User_model->saveData($data, $id);
	
	if(!$this->isSessionSet())
	{
		$this->index();
		return;
	}
	$_SESSION["USER_MODULE_PAGE"]	="user_manager"; // for lock screen management;
	//$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
	$data 					= array();
	$headTitleAddText		= " : Login as ";
	$headTitleAddId			= $_SESSION['ADMIN_ID'];
	$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
	
	$res = array("status" => true,'message' => 'success');
	$res = (object) array_merge((array) $res, (array) $data);
	echo json_encode($res);	
}   

//=========================== userList function used for listing User details in the data table ===========================	 
public function userList($id="",$userName="",$location="", $status="")
{
	$userId		=		$this->input->post('userid');
	$logTime	=		$this->input->post('logTime');
	$branch		=		$this->input->post('branch');
	$department	=		$this->input->post('department');
	
	$list 	= $this->User_model->getDataTables($userId,$logTime,$branch,$department);
	$data 	= array();
	$data1 	= array();
	$no 	= $_POST['start']; // commented for working
	
	//$no=1;
	
	foreach ($list as $data) {
		$statusClass = "label label-success";
		$showClass	 = "label label-success";
		$statusText	 = "Active";
		$no++;
		$rightsButton=' <a  id="rightsButton" class="btn btn-sm mb-1 btn-outline-light" href="javascript:void(0)" title="Click to edit and save user rights modules" onclick="userPermissions('."'".$data->Id."'".')"><i class="fa fa-check-square-o"></i> User Permissions</a>';

		$row = array();
		$row[] = $data->UserId;
		$row[] = $data->UserType;
		$db    = new Database();
		$branchName 	= $db->getFieldValueById("branches", "BranchName", "Id='{$data->BranchId}'");
		$row[] = $branchName;
		$depName 	= $db->getFieldValueById("department", "DepartmentName", "Id='{$data->DepId}'");
		$row[] = $depName;
		if($data->LastLoginDate!=NULL)
						$row[] = date('d/m/Y h:i:s a', strtotime($data->LastLoginDate)); // converting to indian format with 12hr.
		else
					$row[] ="Not yet login.";
					$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
					$row[] = $data->LastLoginIP;
		
		if($data->Status=="Inactive")
		 {
			$statusClass = "label label-danger";
			$statusText  = "Inactive";
			$rightsButton= "";
		 }
		  
		 
		$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";

		//add html for action
		$permission = $_SESSION["GROUP_PERMISSION"];
		$userPermission =array();
		$userPermission = explode(",",$permission);
	
		$actions ="";
		$view ="Sub_Visible_".$id;
		$edit ="Sub_Edit_".$id;
		$delete = "Sub_Del_".$id;
		
		if(in_array($edit,$userPermission))
		{
			
			$actions .= '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="editData('."'".$data->Id."'".')"><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>';
		 }
		 if(in_array($delete,$userPermission))
		{
			$actions .=  '<a  id="deleteButton" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="deleteData('."'".$data->Id."'".')"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</a>';
		}
		 
		$actions .= $rightsButton;
		
		$row[] = $actions;	  
		//<a id="viewButton" class="btn btn-small btn-info" href="javascript:void(0)" title="Click to edit" onclick="edit_menu('."'". $menu->Id ."'".')"><i class="fa fa-sticky-note-o"></i> View</a>';	  
	
		$data1[] = $row;
	}

	$output = array(
					"draw" => $_POST['draw'],
					"recordsTotal" => $this->User_model->countAll(),
					"recordsFiltered" => $this->User_model->countFiltered($userId,$logTime,$branch,$department),
					"data" => $data1,
			);
	//output to json format
	echo json_encode($output);
}

//=========================== getEditUser function used for getting a User details by id from login table===========================	 
public function getEditUser($id)
{
	$data = $this->User_model->getById($id);
	echo json_encode($data);
}

//=========================== deleteUser function used for deleting User details by id from login table===========================	 
public function deleteUser($id)
{
   $res    =  $this->User_model->deleteData($id);
   if(!$this->isSessionSet())
	{
		$this->index();
		return;
	}
	$_SESSION["USER_MODULE_PAGE"]	="user_manager"; // for lock screen management;
	//$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
	$data 					= array();
	$headTitleAddText		= " : Login as ";
	$headTitleAddId			= $_SESSION['ADMIN_ID'];
	$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
	
   $resData =array();
   if($res['status'])
   {
				  
	   $resData=array(
				"status"=>true,
				"message"=>"User deleted successfully!!"
			   );
	   
   }
   else
   {
	   $resData=array(
				"status"=>false,
				"message"=>$res['message']
			   );
	   
   }
   
   $resData = (object) array_merge((array) $resData, (array) $data);
   echo json_encode($resData); 
}  


	public function user_permission($userId=0)
	{
       if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	     $_SESSION["USER_MODULE_PAGE"]	="user_rights"; // for lock screen management;
		//$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		$data 						= array();
		$headTitleAddText			= " : User rights - Login as ";
		$headTitleAddId				= $_SESSION['ADMIN_ID'];
		$data 						= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["userGroupList"]		= $this->getUserGroupCombo(); // for filling user group combo, in lobibox popup
			
		$where      				= "Id=" . $userId;
		$db							= new Database();
		$user   				= $db->getFieldValueById("Login", "UserId", $where);        
        $data["userGroup"]	 		= $user;     
        $data["userGroupId"]	 	= $userId;     
        
		$this->load->view('brq-admin/user-permission',$data);
	
	}
	public function saveUserPermission($userId)
	{
		
		$checkSelected 		= trim($this->input->post("checkSelected"));
		
		$db 		= new Database();
		$where   	=" UserLoginId=$userId ";

		$permission = $db->getFieldValueById("sys_user_wise_permission", "Permission", $where);

		if($checkSelected!=null)
		{ 	
			
				$checkSelected2 =	array();
				$i=0;
				$checkSelected2 			= explode(",",$checkSelected);
				$permission1				= explode(",",$permission);
				$Permission 			= implode(" ",$permission1);
				foreach($checkSelected2 as $checkSelected2=>$CheckSelected2_value)
				{
					
					$pos = strpos($Permission,$CheckSelected2_value);
						if($pos!==false)
						{
							$Permission =$checkSelected;
						}
						
						else
						{
						
							$Permission .=' ';
							$Permission .=$CheckSelected2_value ;

						}
						$i++;
					}
					
				

				$checkSelected =$Permission;
				
		}	
					
					$data = array(
						'UserLoginId'  => $userId,
						'Permission'   => $checkSelected,
						
					);
	
			$result 	= $this->db->update('sys_user_wise_permission',$data,$where);
				if($result)
					{
						echo json_encode($data);
					}
				
		
	}
	//==********========********** User Rights Functions for User Group=======*******************
	public function user_rights($userGroupId=0)
	{
       if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	     $_SESSION["USER_MODULE_PAGE"]	="user_rights"; // for lock screen management;
		//$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		$data 						= array();
		$headTitleAddText			= " : User rights - Login as ";
		$headTitleAddId				= $_SESSION['ADMIN_ID'];
		$data 						= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["userGroupList"]		= $this->getUserGroupCombo(); // for filling user group combo, in lobibox popup
			
		$where      				= "Id=" . $userGroupId;
		$db							= new Database();
		$userGroup   				= $db->getFieldValueById("sys_user_group", "UserGroup", $where);        
        $data["userGroup"]	 		= $userGroup;     
        $data["userGroupId"]	 	= $userGroupId;     
        
		$this->load->view('brq-admin/user-rights',$data);
	
	}
	
	
	
	// Note : This function for user rights for different User Groups
	
	public function getMenuItemList($userGroupId , $who)
	{
		
		// $SQL ="SELECT Id, MenuItem, VisibleStatus,BrqProjectId FROM sys_admin_menu WHERE Status ='Showing' ORDER BY MenuItem";
		$SQL ="SELECT Id, MenuItem, VisibleStatus,BrqProjectId FROM sys_admin_menu WHERE Status ='Showing' ORDER BY MenuOrder";

		if($_POST['length'] != -1)  
				$SQL .=" LIMIT " . $_POST['start'] .", " . $_POST['length'];
		
		$db	 	=  new Database();
		$count  = $db->totalCount("Id", 'sys_admin_menu',"Status='Showing'"); // where 'showing' status is to make Developer only.
		
		$menu 			= $this->db->query($SQL)->result_array();

		$where			= " UserGroupId='{$userGroupId}'";
		$visibleButton= $db->getFieldValueById("sys_user_group_permission", "Permission", $where);        
		 if($who == "user")
		 {
			$where			= " UserLoginId='{$userGroupId}'";
			$visibleButton= $db->getFieldValueById("sys_user_wise_permission", "Permission", $where);        
				
		 }
		if($visibleButton!=null)
				{ 	
				$checkSelected =	array();
			
				$checkSelected 			= explode(",",$visibleButton);
				$Menu					= implode(" ",$checkSelected);
				$checkedId				=$checkSelected;
				
				}
				
		foreach($menu as $row)
		{
			
			$data			= 	 array();
			$menuId			=	 $row["Id"];
			$visibleStatus	=   "<small style='color:#40A62C;' id='view_{$menuId}'><b> Visible</b></small>";
			$vStatus		=	 $row["VisibleStatus"];
			$brqProjectId	=	 $row["BrqProjectId"];
			$textMuted		=    "";
			
			if($vStatus==="0")
			{
				$visibleStatus	="<small style='color:#C60000;' id='view_{$menuId}'><b> Non-Visible</b></small>";
				$textMuted		=   " class='text-muted'";
			}
			
			$menuItem			=	$row["MenuItem"];
			$disabled			=	"";
			$checked			= 	"";
			
			// checking the sub menu exists or not, for sub menu window pop up.
			$isSubMenu		    = 0;
			$isSubMenu		    =  $db->totalCount("Id", 'sys_admin_sub_menu',"Status='1' AND MenuItemId='{$menuId}'"); // where '1' status is to make Developer only.
		    $action 			="";
			
				
			if(!$isSubMenu && $vStatus!=0)
			{
				
				//visible
				$input				=    "<span id='{$menuId}'>";
				$pos = stripos($Menu,"Main_Visible_{$menuId}");
				if($pos!==false)
				{
					$checked = " checked";
				}
					
				$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Main_Visible_{$menuId}' name='menu_right[]' value='Main_Visible_{$menuId}' {$disabled} {$checked}/> ";
				$input			   .=	 " &nbsp; <span> View</span> ";
				$checked			= 	"";
				
				//add
				$pos = strpos($Menu,"Main_Add_{$menuId}");
				if($pos!==false)
				{
					$checked = " checked";
				}
				$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Main_Add_{$menuId}' name='menu_right[]' value='Main_Add_{$menuId}' {$disabled} {$checked}/> ";
				$input			   .=	 " &nbsp; <span> Add</span> ";
				$checked			= 	"";
				
				//edit 
				$pos = strpos($Menu,"Main_Edit_{$menuId}");
				if($pos!==false)
				{
					$checked = "checked";
				}
				$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Main_Edit_{$menuId}' name='menu_right[]' value='Main_Edit_{$menuId}' {$disabled} {$checked}/> ";
				$input			   .=	 " &nbsp; <span> Edit</span> ";
				$checked			= 	"";
				
				//delete
				$pos = strpos($Menu,"Main_Del_{$menuId}");
				if($pos!==false)
				{
					$checked = "checked";
					
				}
				$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Main_Del_{$menuId}' name='menu_right[]' value='Main_Del_{$menuId}' {$disabled} {$checked}/> ";
				$input			   .=	 " &nbsp; <span> Delete</span> ";
				$checked			= 	"";
				
				//Approve
				$pos = strpos($Menu,"Main_App_{$menuId}");
				if($pos!==false)
				{
					$checked = "checked";
					
				}
				$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Main_App_{$menuId}' name='menu_right[]' value='Main_App_{$menuId}' {$disabled} {$checked}/> ";
				$input			   .=	 " &nbsp; <span> Approve</span> ";
				$checked			= 	"";
				
				$input  			.="<br>";
				//Accept
				$pos = strpos($Menu,"Main_Accept_{$menuId}");
				if($pos!==false)
				{
					$checked = "checked";
					
				}
				$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Main_Accept_{$menuId}' name='menu_right[]' value='Main_Accept_{$menuId}' {$disabled} {$checked}/> ";
				$input			   .=	 " &nbsp; <span> Accept</span> ";
				$checked			= 	"";
				
				//Verify
				$pos = strpos($Menu,"Main_Verify_{$menuId}");
				if($pos!==false)
				{
					$checked = "checked";
					
				}
				$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Main_Verify_{$menuId}' name='menu_right[]' value='Main_Verify_{$menuId}' {$disabled} {$checked}/> ";
				$input			   .=	 " &nbsp; <span> Verify</span> ";
				$checked			= 	"";
				
				//Finish
				$pos = strpos($Menu,"Main_Finish_{$menuId}");
				if($pos!==false)
				{
					$checked = "checked";
					
				}
				$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Main_Finish_{$menuId}' name='menu_right[]' value='Main_Finish_{$menuId}' {$disabled} {$checked}/> ";
				$input			   .=	 " &nbsp; <span> Finish</span> ";
				$checked			= 	"";
				
				//Reject
				$pos = strpos($Menu,"Main_Reject_{$menuId}");
				if($pos!==false)
				{
					$checked = "checked";
					
				}
				$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Main_Reject_{$menuId}' name='menu_right[]' value='Main_Reject_{$menuId}' {$disabled} {$checked}/> ";
				$input			   .=	 " &nbsp; <span> Reject</span> ";
				$checked			= 	"";

				//Copy
				$pos = strpos($Menu,"Main_Copy_{$menuId}");
				if($pos!==false)
				{
					$checked = "checked";
					
				}
				$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Main_Copy_{$menuId}' name='menu_right[]' value='Main_Copy_{$menuId}' {$disabled} {$checked}/> ";
				$input			   .=	 " &nbsp; <span> Copy</span> ";
				$checked			= 	"";

				//Update
				$pos = strpos($Menu,"Main_Update_{$menuId}");
				if($pos!==false)
				{
					$checked = "checked";
					
				}
				$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Main_Update_{$menuId}' name='menu_right[]' value='Main_Update_{$menuId}' {$disabled} {$checked}/> ";
				$input			   .=	 " &nbsp; <span> Update Status</span> ";
				$checked			= 	"";


				$input			   .=    "</span>";
				$action 			=  $input;
			
				$menuName			="<span {$textMuted}>" . $menuItem . "</span>";
				$space				="&emsp;"; // 4 spaces gap
			}
			else
			{
				$menuName			="<span {$textMuted}><strong style='color:#7571F9;'>";
				$menuName		   .=$menuItem . "<strong></span>";
				$space				="";		
			}
			
			$data[]			=" &nbsp;". $space ." <input onclick='itemSelect(this.id,$vStatus);' class='item-check-visible' type='checkbox' value='{$menuId}_{$menuItem}' name='menu_item[]' id='item_{$menuId}' />&nbsp;" . $menuName;

			$data[]			=  $visibleStatus;
			$data[]			=  $action;
			
			$data1[]		= $data;
			// }
			
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $count,
						"recordsFiltered" => $count,
						"data" => $data1,
						// "Menu" =>$checkedId
				);
		//output as json format
		echo json_encode($output);
	}
	
	
	//---- Listing all sub menu item list.. for user rights module (in user-rights.php ->javascript)
	public function getSubMenuItemList($mainMenuId=0,$userGroupId ,$who,$menuItem)
	{
		
		if($menuItem=='SubMenu')
		{
			$SQL 	="SELECT Id, SubMenuItem,VisibleStatus,BrqProjectId, Status FROM sys_admin_sub_menu";
			$SQL   .=" WHERE Status ='1' AND MenuItemId='{$mainMenuId}' ORDER BY SubMenuItem";
			
			$db	 	=  new Database();
		
			// checking the sub menu exists or not, for sub menu window pop up.
			$isUnderSubMenu		    = 0;
			//$isUnderSubMenu		    =  $db->totalCount("Id", 'sys_admin_under_sub_menu',"Status='1' AND SubMenuItemId='{$mainMenuId}'"); // where '1' status is to make Developer only.
			
			if($_POST['length'] != -1)  
				$SQL .=" LIMIT " . $_POST['start'] .", " . $_POST['length'];
		}
		if($menuItem=='UnderSubMenu')
		{
			
			$SQL 	="SELECT Id, UnderSubMenuItem,VisibleStatus,BrqProjectId, Status FROM sys_admin_under_sub_menu";
			$SQL   .=" WHERE Status ='1' AND SubMenuItemId='{$mainMenuId}' ORDER BY UnderSubMenuItem";
			
			$db	 	=  new Database();
		
			
			//$count	    =   $db->totalCount("Id", 'sys_admin_under_sub_menu',"Status='1' AND SubMenuItemId='{$mainMenuId}'"); // where '1' status is to make Developer only.
			if($_POST['length'] != -1)  
			$SQL .=" LIMIT " . $_POST['start'] .", " . $_POST['length'];
		}

		$menu 			= $this->db->query($SQL)->result_array();

		$where			= " UserGroupId='{$userGroupId}'";
		$visibleButton= $db->getFieldValueById("sys_user_group_permission", "Permission", $where);        
		
		if($who =="user")
		{
			$where			= " UserLoginId='{$userGroupId}'";
			$visibleButton= $db->getFieldValueById("sys_user_wise_permission", "Permission", $where);        
				
		}

		if($visibleButton!=null)
			{ 	
				$checkSelected =	array();
			
				$checkSelected 			= explode(",",$visibleButton);
				$Menu					= implode(" ",$checkSelected);
			
			}
		foreach($menu as $row)
			{
				if($menuItem== "SubMenu")
				{
					
						$data			= 	 array();
					$menuId			=	 $row["Id"];
					$visibleStatus	="<small style='color:#40A62C;' id='view_{$menuId}' ><b> Visible</b></small>";

					$vStatus		=	 $row["VisibleStatus"];
					$brqProjectId	=	 $row["BrqProjectId"];
					$textMuted		=    "";
					$action			=	 "";
					$disabled		=	 "";
					$checked		=	 "";
					$subMenuItem		=	$row["SubMenuItem"];
					// checking the sub menu exists or not, for sub menu window pop up.
					 //$isUnderSubMenu		    = 0;
					 $isUnderSubMenu		    =  $db->totalCount("Id", 'sys_admin_under_sub_menu',"Status='1' AND SubMenuItemId='{$menuId}'"); // where '1' status is to make Developer only.
					//$action 			=""; 
					
					if($vStatus==0)
					{
						$visibleStatus	="<small style='color:#C60000;' id='view_{$menuId}'><b> Non-Visible</b></small>";
						$textMuted		=   " class='text-muted'";
					}
					
						
					if(!$isUnderSubMenu	&& $vStatus!=0)
					{
							
							//visible
						$input				=    "<span id='sub_{$menuId}'>";
					
						$pos = strpos($Menu,"Sub_Visible_{$menuId}");
							if($pos!==false)
							{
								$checked = " checked";
							}
						$input			   .=    " &nbsp; <input onclick='subItemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Sub_Visible_{$menuId}' name='menu_right[]' value='Sub_Visible_{$menuId}' {$disabled} {$checked}/> ";
						$input			   .=	 " &nbsp; <span> View</span> ";
						$checked			="";
						//add
						$pos = strpos($Menu,"Sub_Add_{$menuId}");
						
						if($pos!==false)
						{
							$checked = " checked";
						}
						$input			   .=    " &nbsp; <input onclick='subItemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Sub_Add_{$menuId}' name='menu_right[]' value='Sub_Add_{$menuId}' {$disabled} {$checked}/> ";
						$input			   .=	 " &nbsp; <span> Add</span> ";
						$checked			="";
						
						//edit 
						$pos = strpos($Menu,"Sub_Edit_{$menuId}");
						if($pos!==false)
						{
							$checked = " checked";
						}
						$input			   .=    " &nbsp; <input onclick='subItemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Sub_Edit_{$menuId}' name='menu_right[]' value='Sub_Edit_{$menuId}' {$disabled} {$checked}/> ";
						$input			   .=	 " &nbsp; <span> Edit</span> ";
						$checked			="";
						
						//delete
						$pos = strpos($Menu,"Sub_Del_{$menuId}");
						if($pos!==false)
						{
							$checked = " checked";
						}
						$input			   .=    " &nbsp; <input onclick='subItemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Sub_Del_{$menuId}' name='menu_right[]' value='Sub_Del_{$menuId}' {$disabled} {$checked}/> ";
						
						$input			   .=	 " &nbsp; <span> Delete</span> ";
						$checked			="";
						
						//Approve
						$pos = strpos($Menu,"Sub_App_{$menuId}");
						if($pos!==false)
						{
							$checked = " checked";
						}
						$input			   .=    " &nbsp; <input onclick='subItemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Sub_App_{$menuId}' name='menu_right[]' value='Sub_App_{$menuId}' {$disabled} {$checked}/> ";
						
						$input			   .=	 " &nbsp; <span> Approve</span> ";
						$checked			="";

								
						//Verify
						$pos = strpos($Menu,"Sub_Verify_{$menuId}");
						if($pos!==false)
						{
							$checked = "checked";
							
						}
						$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Sub_Verify_{$menuId}' name='menu_right[]' value='Sub_Verify_{$menuId}' {$disabled} {$checked}/> ";
						$input			   .=	 " &nbsp; <span> Verify</span> ";
						$checked			= 	"";
						
						$input  			.="<br>";
						//Finish
						$pos = strpos($Menu,"Sub_Finish_{$menuId}");
						if($pos!==false)
						{
							$checked = "checked";
							
						}
						$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Sub_Finish_{$menuId}' name='menu_right[]' value='Sub_Finish_{$menuId}' {$disabled} {$checked}/> ";
						$input			   .=	 " &nbsp; <span> Finish</span> ";
						$checked			= 	"";
						
						//Reject
						$pos = strpos($Menu,"Sub_Reject_{$menuId}");
						if($pos!==false)
						{
							$checked = "checked";
							
						}
						$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Sub_Reject_{$menuId}' name='menu_right[]' value='Sub_Reject_{$menuId}' {$disabled} {$checked}/> ";
						$input			   .=	 " &nbsp; <span> Reject</span> ";
						$checked			= 	"";

						
						//Copy
						$pos = strpos($Menu,"Sub_Copy_{$menuId}");
						if($pos!==false)
						{
							$checked = "checked";
							
						}
						$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Sub_Copy_{$menuId}' name='menu_right[]' value='Sub_Copy_{$menuId}' {$disabled} {$checked}/> ";
						$input			   .=	 " &nbsp; <span> Copy</span> ";
						$checked			= 	"";

						//Update
						$pos = strpos($Menu,"Sub_Update_{$menuId}");
						if($pos!==false)
						{
							$checked = "checked";
							
						}
						$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Sub_Update_{$menuId}' name='menu_right[]' value='Sub_Update_{$menuId}' {$disabled} {$checked}/> ";
						$input			   .=	 " &nbsp; <span> Update Status</span> ";
						$checked			= 	"";


						$input			   .=    "</span>";
						
						$action 			=  $input;
						$menuName			="<span {$textMuted}>" . $subMenuItem . "</span>";
						$space				="&emsp;"; // 4 spaces gap
					}
					
					$data[]			= "&nbsp;<input onclick='subMenuSelect(this.id);' class='item-check-visible item-check ' type='checkbox' value='{$menuId}_{$subMenuItem}' name='menu_item[]' id='item_{$menuId}' {checked} />&nbsp;" . $subMenuItem ;
					
					$data[]			=  $visibleStatus;
					$data[]			=  $action;
					$data[]			='<div class="alert alert-danger alert-dismissable divError" style="margin-top:5px; width:100%; text-align:left; font-weight:bold; display:none; color:#fff!important;" id="divError" name="divError">Error</div>';
			
					$data1[]		=  $data;
				}
				if($menuItem== "UnderSubMenu")
				{
					
						$data			= 	 array();
						$menuId			=	 $row["Id"];
						$visibleStatus	="<small style='color:#40A62C;' id='view_{$menuId}' ><b> Visible</b></small>";

						$vStatus		=	 $row["VisibleStatus"];
						$brqProjectId	=	 $row["BrqProjectId"];
						$textMuted		=    "";
						$action			=	 "";
						$disabled		=	 "";
						$checked		=	 "";
						$subMenuItem		=	$row["UnderSubMenuItem"];
						
						if($vStatus==0)
						{
							$visibleStatus	="<small style='color:#C60000;' id='view_{$menuId}'><b> Non-Visible</b></small>";
							$textMuted		=   " class='text-muted'";
						}
						
						if($vStatus!=0)
						{
								//visible
							$input				=    "<span id='Under_{$menuId}'>";
						
							$pos = strpos($Menu,"Under_Visible_{$menuId}");
								if($pos!==false)
								{
									$checked = " checked";
								}
							$input			   .=    " &nbsp; <input onclick='subItemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Under_Visible_{$menuId}' name='menu_right[]' value='Under_Visible_{$menuId}' {$disabled} {$checked}/> ";
							$input			   .=	 " &nbsp; <span> View</span> ";
							$checked			="";
							//add
							$pos = strpos($Menu,"Under_Add_{$menuId}");
							
							if($pos!==false)
							{
								$checked = " checked";
							}
							$input			   .=    " &nbsp; <input onclick='subItemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Under_Add_{$menuId}' name='menu_right[]' value='Under_Add_{$menuId}' {$disabled} {$checked}/> ";
							$input			   .=	 " &nbsp; <span> Add</span> ";
							$checked			="";
							
							//edit 
							$pos = strpos($Menu,"Under_Edit_{$menuId}");
							if($pos!==false)
							{
								$checked = " checked";
							}
							$input			   .=    " &nbsp; <input onclick='subItemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Under_Edit_{$menuId}' name='menu_right[]' value='Under_Edit_{$menuId}' {$disabled} {$checked}/> ";
							$input			   .=	 " &nbsp; <span> Edit</span> ";
							$checked			="";
							
							//delete
							$pos = strpos($Menu,"Under_Del_{$menuId}");
							if($pos!==false)
							{
								$checked = " checked";
							}
							$input			   .=    " &nbsp; <input onclick='subItemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Under_Del_{$menuId}' name='menu_right[]' value='Under_Del_{$menuId}' {$disabled} {$checked}/> ";
							
							$input			   .=	 " &nbsp; <span> Delete</span> ";
							$checked			="";
							
							//Approve
							$pos = strpos($Menu,"Under_App_{$menuId}");
							if($pos!==false)
							{
								$checked = " checked";
							}
							$input			   .=    " &nbsp; <input onclick='subItemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Under_App_{$menuId}' name='menu_right[]' value='Under_App_{$menuId}' {$disabled} {$checked}/> ";
							
							$input			   .=	 " &nbsp; <span> Approve</span> ";
							$checked			="";

								//Verify
							$pos = strpos($Menu,"Under_Verify_{$menuId}");
							if($pos!==false)
							{
								$checked = "checked";
								
							}
							$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Under_Verify_{$menuId}' name='menu_right[]' value='Under_Verify_{$menuId}' {$disabled} {$checked}/> ";
							$input			   .=	 " &nbsp; <span> Verify</span> ";
							$checked			= 	"";
							$input  			.="<br>";
							//Finish
							$pos = strpos($Menu,"Under_Finish_{$menuId}");
							if($pos!==false)
							{
								$checked = "checked";
								
							}
							$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Under_Finish_{$menuId}' name='menu_right[]' value='Under_Finish_{$menuId}' {$disabled} {$checked}/> ";
							$input			   .=	 " &nbsp; <span> Finish</span> ";
							$checked			= 	"";
							
							//Reject
							$pos = strpos($Menu,"Under_Reject_{$menuId}");
							if($pos!==false)
							{
								$checked = "checked";
								
							}
							$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Under_Reject_{$menuId}' name='menu_right[]' value='Under_Reject_{$menuId}' {$disabled} {$checked}/> ";
							$input			   .=	 " &nbsp; <span> Reject</span> ";
							$checked			= 	"";


							//Copy
							$pos = strpos($Menu,"Under_Copy_{$menuId}");
							if($pos!==false)
							{
								$checked = "checked";
								
							}
							$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Under_Copy_{$menuId}' name='menu_right[]' value='Under_Copy_{$menuId}' {$disabled} {$checked}/> ";
							$input			   .=	 " &nbsp; <span> Copy</span> ";
							$checked			= 	"";
							
							//Update
							$pos = strpos($Menu,"Under_Update_{$menuId}");
							if($pos!==false)
							{
								$checked = "checked";
								
							}
							$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Under_Update_{$menuId}' name='menu_right[]' value='Under_Update_{$menuId}' {$disabled} {$checked}/> ";
							$input			   .=	 " &nbsp; <span> Update Status</span> ";
							$checked			= 	"";

							//Issue
							$pos = strpos($Menu,"Under_Issue_{$menuId}");
							if($pos!==false)
							{
								$checked = "checked";
								
							}
							$input			   .=    " &nbsp; <input onclick='itemRight(this.id);' class='item-check-rights toggle' type='checkbox' id='Under_Issue_{$menuId}' name='menu_right[]' value='Under_Issue_{$menuId}' {$disabled} {$checked}/> ";
							$input			   .=	 " &nbsp; <span> Issue Application</span> ";
							$checked			= 	"";

							$input			   .=    "</span>";
							
							$action 			=  $input;
							$menuName			="<span {$textMuted}>" . $subMenuItem . "</span>";
							$space				="&emsp;"; // 4 spaces gap
						}
						
						$data[]			= "&nbsp;<input onclick='subMenuSelect(this.id);' class='item-check-visible item-check ' type='checkbox' value='{$menuId}_{$subMenuItem}' name='menu_item[]' id='item_{$menuId}' {checked} />&nbsp;" . $subMenuItem ;
						
						$data[]			=  $visibleStatus;
						$data[]			=  $action;
						$data[]			='<div class="alert alert-danger alert-dismissable divError" style="margin-top:5px; width:100%; text-align:left; font-weight:bold; display:none; color:#fff!important;" id="divError" name="divError">Error</div>';
				
						$data1[]		=  $data;
					}
			}
			
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $count,
						"recordsFiltered" => $count,
						"data" => $data1
				);
		//output as json format
		echo json_encode($output);
		
	}	
	
	public function isUnderSubMenuExists($subMenuId)
	{
		$db	 	=  new Database();
		$count  =  $db->totalCount("Id", 'sys_admin_under_sub_menu',"Status='1' AND SubMenuItemId='{$subMenuId}'"); // where '1' status is to make Developer only.
		$where			= " Id='{$subMenuId}'";
		$data  = array(
			'VisibleStatus' => '1'
		);
		if($count<=0)
		{
			$result 	= $this->db->update('sys_admin_sub_menu',$data,$where);

		}	
		$output = array(
							"status" => $count
					   );
		//output as json format
		echo json_encode($output);

	}
	public function isSubMenuExists($mainMenuId)
	{
		$db	 	=  new Database();
		$count  =  $db->totalCount("Id", 'sys_admin_sub_menu',"Status='1' AND MenuItemId='{$mainMenuId}'"); // where '1' status is to make Developer only.
		$where			= " Id='{$mainMenuId}'";
		$data  = array(
			'VisibleStatus' => '1'
		);
		if($count<=0)
		{
			$result 	= $this->db->update('sys_admin_menu',$data,$where);

		}	
		$output = array(
							"status" => $count
					   );
		//output as json format
		echo json_encode($output);

	}
	
	public function getUserGroupRights()
	{
	
		$menuItemId 	= trim($this->input->post("subItemId"));
		// $userGroupId 	= trim($this->input->post("hidGroupId"));
		
		$db				= new Database();
		$where			= " Id='{$menuItemId}'";
		$VisibleStatus= $db->getFieldValueById("sys_admin_sub_menu", "VisibleStatus", $where);        
	
		if($VisibleStatus == 1)
		{
			$VisibleStatus1 =0;
		}
		else
		{
			$VisibleStatus1 =1;
		}

		$data  = array(
			'VisibleStatus' => $VisibleStatus1
		);
		
		$result 	= $this->db->update('sys_admin_sub_menu',$data,$where);

			
		if($result)
		{
			$output = array(
				'VisibleStatus' => $VisibleStatus1,
				'result' => $result ,
				'status' => true
			);
		}
		
		echo json_encode($output);
	}
	
	public function getMenuUserGroupMenuRights()
	{
	
		$menuItemId 	= trim($this->input->post("menuItemId"));
		// $userGroupId 	= trim($this->input->post("hidGroupId"));
		
		$db				= new Database();
		$where			= " Id='{$menuItemId}'";
		$VisibleStatus= $db->getFieldValueById("sys_admin_menu", "VisibleStatus", $where);        
	
		if($VisibleStatus == 1)
		{
			$VisibleStatus1 =0;
		}
		else
		{
			$VisibleStatus1 =1;
		}

		$data  = array(
			'VisibleStatus' => $VisibleStatus1
		);
		
		$result 	= $this->db->update('sys_admin_menu',$data,$where);

			
		if($result)
		{
			$output = array(
				'VisibleStatus' => $VisibleStatus1,
				'result' => $result ,
				'status' => true
			);
		}
		
		
		
		echo json_encode($output);
	}	
	
	public function saveUserGroupPermission($userGroup)
	{
		
		$checkSelected 		= trim($this->input->post("checkSelected"));
		
		$db 		= new Database();
		$where   	=" UserGroupId=$userGroup ";
		// echo "Check ::".$checkSelected ."        			";
		$permission = $db->getFieldValueById("sys_user_group_permission", "Permission", $where);
		
		if($checkSelected!=null)
		{ 	
			
				$checkSelected2 =	array();
				$i=0;
				$checkSelected2 			= explode(",",$checkSelected);
				$permission1				= explode(",",$permission);
				$Permission 			= implode(" ",$permission1);
				
				foreach($checkSelected2 as $checkSelected2=>$CheckSelected2_value)
				{
					
					$pos = strpos($Permission,$CheckSelected2_value);
				
						if($pos!==false)
						{
							
							// $Permission =$checkSelected;
							$Permission	=$Permission;
							
						}
						
						else
						{
							if($Permission == "")
							{
								$Permission =$CheckSelected2_value ;
							}
							else{

								$Permission .=' ';
								$Permission .=$CheckSelected2_value ;
	
							}
							
						}
						$i++;
					}
				$permission1			= explode(" ",$Permission);
				$Permission 			= implode(",",$permission1);

				$checkSelected =$Permission;
				
		}	
		
					$data = array(
						'UserGroupId'  => $userGroup,
						'Permission'   => $checkSelected,
						
					);
	
			$result 	= $this->db->update('sys_user_group_permission',$data,$where);
				if($result)
					{
						echo json_encode($data);
					}
				
		
	}


	//========================== Super Admin(Developer) Admin Menu Modules ====================

	public function adminMainMenu($id="")
	{
       if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$data 						= array();
		$data 						= $this->Common_model->common_sidebar_counts();
		$data["subMenuId"]			= $id;
		$this->load->view('brq-admin/admin-main-menu',$data);
        
	}

	//-------- Get Main Menu for MainMenu combo filling :  for AdminSubMenu Module
	public function getMainMenuComboList() 
	{
		$db			= new Database();
		$mainMenu   = $db->fillCombo("sys_admin_menu", "MenuItem", "...Choose...", "", "Id", "", "MenuItem");
		
		echo $mainMenu;
		
	} 
	public function getSubMenuComboList() 
	{
		$db			= new Database();
		$mainMenu   = $db->fillCombo("sys_admin_sub_menu", "SubMenuItem", "...Choose...", "", "Id", "", "SubMenuItem");
		
		echo $mainMenu;
		
	} 
	
	//-------- Get Main Menu Order from MainMenuId
	public function getMainMenuOrder($id) 
	{
		$db  = new Database();
        echo $menuOrder = $db->getFieldValueById("sys_admin_menu", "MenuOrder", "Id='{$id}'");
	}
		//-------- Get Sub Menu Order from SubMenuId
		public function getSubMenuOrder($id) 
		{
			$db  = new Database();
			echo $menuOrder = $db->getFieldValueById("sys_admin_sub_menu", "SubMenuOrder", "Id='{$id}'");
		}
	
	//====================================Function to get DataTables of Admin Main Menu ================================
	public function menuList($subid="")
	{
		$list = $this->adminMainMenu->getDataTables();
		
		$data = array();
		$no = $_POST['start']; // commented for working
		//$no=1;
		
		foreach ($list as $menu) {
		
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Showing";
			$countText	 = "Yes";
			  
			$no++;
			$row = array();
			$row[] = $menu->MenuItem;
			
			//--- new added by sandeep start -->
			// $projectId = $menu->BrqProjectId;
			// $db		   = new Database();
						
			// if(is_null($projectId))
			// 	$row[] = "Not set";
			// else
			// 	$row[] = $db->getFieldValueById("sys_erp_projects", "ProjectName", "Id='{$projectId}'");
			//--- new added by sandeep end -->
			// -------------Added By  Sruthi ------------------------>
			$name= array();
			
			$str	= "";
			$str	=$menu->BrqProjectId;
			$res	= explode(',', $str);
			$project=$this->getAllPostProject();
			
				foreach ( $project as $category) : $i++; 
					if (in_array($category->Id,$res)) 
							
							$name[] =$category->ProjectName;
				endforeach;

			$row[] =$name;
			//------------------------------------------> 
			if($menu->showCount=="No")
				{
					$showClass = "label label-danger";
					//$countText	 = "No";
				}	
			
			$row[] = "<span class='" . $showClass . "'>" . $menu->showCount . "</span>";
			$row[] = $menu->countTitle; 
		
                        $row[] = $menu->linkPage;
			
			if($menu->Status=="Hided")
			 {
				$statusClass = "label label-danger";
				$statusText  = "Hided";
			  }
			  
			$row[] =$menu->MenuOrder;  
			if($menu->Status == 'Showing')		
				$checked = "checked";
			else
				$checked = "";
			$row[] = '<label class="switch"><input onClick="showHide('."'".$menu->Id."'".');" id="Show_Hide'.$menu->Id.'" '.$checked.' class="switch-input" type="checkbox" /><span class="switch-label" data-on="Show" data-off="Hide"></span><span class="switch-handle"></span></label>';
			$row[] = "<span class='" . $statusClass . "'>" . $menu->Status . "</span>";
			
			//add html for action
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .= '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="rememberEntryCheck('."'".$menu->Id."'".',\'edit\')"><i class="glyphicon glyphicon-pencil"></i> Edit</a>';
			}
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{
				$actions .=' <a  id="deleteButton" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="rememberEntryCheck('."'".$menu->Id."'".',\'delete\')"><i class="glyphicon glyphicon-trash"></i> Delete</a>';
			}
			$row[] =$actions;
			$data[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->adminMainMenu->countAll(),
						"recordsFiltered" => $this->adminMainMenu->countFiltered(),
						"data" => $data,
				);
		//output to json format
		echo json_encode($output);
	}
		
	

	// -------------------- for getting the admin main menu details for editing ---
	 
	public function getEditAdminMenu($id)
	{
		$data = $this->adminMainMenu->getById($id);
		echo json_encode($data);
	}
	
	//==================================== saveAdminMenu function for Saving Main Menu details ================================
	public function saveAdminMenu()
	{  
		$id		= $this->input->post("hidID");
        $db     = new Database();
		

                
        // --- checking the existance start;
		$item	 =  trim(urldecode($this->input->post('MenuItem')));
		$where   = "MenuItem='{$item}' AND Id!='{$id}'";
		$res 	 = $db->checkExistance("sys_admin_menu", $where); //  if exists id value will be returned.
	
		if($res)
			{
				echo json_encode(
									array(	
											"status"  => false,
											"message" => "This item alreay added and exists!.",
										 )
								);
				exit;
			}
		// --- checking the existance ends;
                $data = array(
								'MenuItem' 	=> trim(urldecode($this->input->post('MenuItem'))),
								'FaIcon' 	=> trim(urldecode($this->input->post('FaIcon'))),
								'showCount' => trim(urldecode($this->input->post('ShowCount'))),
								'countTitle'=> trim(urldecode($this->input->post('CountTitle'))),
								'countTable'=> trim(urldecode($this->input->post('CountTable'))),
								'MenuOrder' => trim(urldecode($this->input->post('MenuOrder'))),
								'linkPage'  => trim(urldecode($this->input->post('LinkPage'))),
								'Status' 	=> trim(urldecode($this->input->post('Status'))),
								'countWhereClause'=>trim(urldecode($this->input->post('CountWhereClause'))),
								'VisibleStatus' =>trim(urldecode($this->input->post('VisibleStatus'))),
								'AreaExpanded' =>trim(urldecode($this->input->post('AreaExpanded'))),
								'CategoryId' 		=>trim(urldecode($this->input->post('Category'))),
								 'BrqProjectId'  =>trim(urldecode($this->input->post('projectSelected1'))),
								// 'BrqProjectId' 			=> trim($this->input->post(" projectSelected1")),
								'Description' =>trim(urldecode($this->input->post('Description'))),
								'IconImagePath' =>trim(urldecode($this->input->post('IconImagePath'))),
								
								
							);
  	
		$res= $this->adminMainMenu->saveData($data, $id);
		echo json_encode(array(
								
								'status'  =>  true,	
								'message' => 'Item saved successfully!.'
							  )
						);
	}
	
	//====================================Function to delete Main Menu by Id ================================
	public function deleteMainMenu($id)
	{
		
	   $res = $this->adminMainMenu->deleteData($id);
	   if(!$res)
	   {
		   echo json_encode(
							 array(
									'status'  =>  false,	
									'message' => 'Oops! Can\'t delete this item, detail exists!.'
								  )
						   );	 
		   exit;
	   }
	   echo json_encode(
	   
							 array(
									'status'  =>  true,	
									'message' => 'Item has been removed successfully!.'
								 )
						);	
	}
	
	//==================================== updateShowHide function for Updating Showing/Hide Status in admin main menu to show / hide a main menu - by Sajitha ================================
	public function updateShowHide() {
		$showHideStatus = $this->input->post("show");
		$id = $this->input->post("id");
		
		if($showHideStatus == 1) {
			$this->db->set('Status', 'Showing');
		} else {
			$this->db->set('Status', 'Hided');
		}			
		$where = array('Id' =>$id);
		$this->db->where($where);
		$this->db->update('sys_admin_menu');	
	}	
	//====================================Function to get DataTables of Admin Under Sub Menu  - Added By Sruthi ================================
	public function adminUnderSubMenu($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$data 						= array();
		$data 						= $this->Common_model->common_sidebar_counts();
		$db			= new Database();
		$mainMenu   = $db->fillCombo("sys_admin_under_sub_menu", "SubMenuItem", "Choose..", "", "Id", "", "SubMenuItem", "");
		$data["subMenuId"]	=$id;
		// $data["project"]=$this->getAllPostProject();
		
		$this->load->view('brq-admin/admin-under-sub-menu',$data);
        
	}
	
	//====================================Function to get DataTables of Admin Under Sub Menu  - Added by Sruthi ================================
	public function underSubMenuList($subid="")
	{
		$list = $this->AdminUnderSubMainMenu_model->getDataTables();
		
		$data = array();
		$no = $_POST['start']; // commented for working
		//$no=1;
		
		foreach ($list as $menu) {
		
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Showing";
			$countText	 = "Yes";
			  
			$no++;
			$row = array();
			$row[] = $menu->UnderSubMenuItem;
			$row[] = $menu->SubMenuItem;
			
			$name= array();
			
			$str	= "";
			$str	=$menu->BrqProjectId;
			$res	= explode(',', $str);
			$project=$this->getAllPostProject();
			
				foreach ( $project as $category) : $i++; 
					if (in_array($category->Id,$res)) 
							
							$name[] =$category->ProjectName;
				endforeach;

			$row[] =$name;
			$row[] = $menu->pageLink;
			$row[] = $menu->SubMenuOrder;
			$row[] = $menu->UnderSubMenuOrder;
			 if($menu->Status=="0")
			{
				$statusClass = "label label-danger";
				$statusText  = "Hided";
			}
			
			$row[] = "<span class='" . $statusClass . "'>" . $statusText . "</span>";
			
			//add html for action
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .= '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="rememberEntryCheck('."'".$menu->Id."'".',\'edit\')"><i class="glyphicon glyphicon-pencil"></i> Edit</a>';
			}
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{
				$actions .='  <a  id="deleteButton" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="rememberEntryCheck('."'".$menu->Id."'".',\'delete\')"><i class="glyphicon glyphicon-trash"></i> Delete</a>';
			}	  
			//<a id="viewButton" class="btn btn-small btn-info" href="javascript:void(0)" title="Click to edit" onclick="edit_menu('."'". $menu->Id ."'".')"><i class="fa fa-sticky-note-o"></i> View</a>';	  
		
			$row[] = $actions;
			$data[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->AdminUnderSubMainMenu_model->countAll(),
						"recordsFiltered" => $this->AdminUnderSubMainMenu_model->countFiltered(),
						"data" => $data,
				);
		//output to json format
		echo json_encode($output);
	}


	//==================================== saveAdminSubMenu function for Saving Sub Menu details - by Sajitha ================================
	public function saveAdminUnderSubMenu()
	{
		$id		= $this->input->post("hidID");
		$menuid		= $this->input->post('MenuItem');
		$underSub		= $this->input->post('UnderSubMenuItem');
		$subMenuItemId = trim(urldecode($this->input->post('SubMenuItem')));

        $db     = new Database();
		  
        // --- checking the existance start;
		$item	 =  trim(urldecode($this->input->post('UnderSubMenuItem')));
		$where   = "UnderSubMenuItem='{$item}' AND Id!='{$id}'";
		$res 	 = $db->checkExistance("sys_admin_under_sub_menu", $where); //  if exists id value will be returned.
		
		if($res)
			{
				echo json_encode(
									array(	
											"status"  => false,
											"message" => "This item alreay added and exists!.",
										 )
								);
				exit;
			}
		// --- checking the existance ends;
                $data = array(
								'MenuItemId' => $this->input->post('MenuItem'),
								'SubMenuItemId' => trim(urldecode($this->input->post('SubMenuItem'))),
								'SubMenuItem' => $db->getFieldValueById("sys_admin_sub_menu", "SubMenuItem", "Id='{$subMenuItemId}'"),
								'UnderSubMenuItem' => trim(urldecode($this->input->post('UnderSubMenuItem'))),
								'FaIcon' => trim(urldecode($this->input->post('FaIcon'))),
								'UnderSubMenuOrder' => trim(urldecode($this->input->post('UnderSubMenuOrder'))),
								'SubMenuOrder' => trim(urldecode($this->input->post('SubMenuOrder'))),
								'pageLink' => trim(urldecode($this->input->post('LinkPage'))),
								'Status' => trim(urldecode($this->input->post('Status'))),
								'ShowInSeparatePage' => trim(urldecode($this->input->post('ShowInSeparatePage'))),
								
								'CountTitle' => trim(urldecode($this->input->post('CountTitle'))),
								
								'CategoryId' 		=>trim(urldecode($this->input->post('Category'))),
								// 'BrqProjectId'  =>trim(urldecode($this->input->post('BrqProjectId'))),
								'BrqProjectId'  =>trim(urldecode($this->input->post('projectSelected1'))),

								'Description' =>trim(urldecode($this->input->post('Description'))),
								
								'IconImagePath' =>trim(urldecode($this->input->post('IconImagePath'))),
								
							);
           	
		$res= $this->AdminUnderSubMainMenu_model->saveData($data, $id);
		echo json_encode(array(
								'status'  =>  true,	
								'message' => 'Item saved successfully!.'
							  )
						);
	}
		// -------------------- for getting the sub menu details for editing ---
	 
		public function getEditAdminUnderSubMenu($id)
		{
			$data = $this->AdminUnderSubMainMenu_model->getById($id);
			echo json_encode($data);
		}

		//====================================Function to delete Under Sub Menu by Id ================================
		public function deleteUnderSubMenu($id)
		{
			
		   $res = $this->AdminUnderSubMainMenu_model->deleteData($id);
		   if(!$res)
		   {
			   echo json_encode(
								 array(
										'status'  =>  false,	
										'message' => 'Oops! Can\'t delete this item, detail exists!.'
									  )
							   );	 
			   exit;
		   }
		   echo json_encode(
		   
								 array(
										'status'  =>  true,	
										'message' => 'Item has been removed successfully!.'
									 )
							);	
		}
	//====================================Function to get DataTables of Admin Sub Menu ================================
	public function adminSubMenu($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$data 						= array();
		$data 						= $this->Common_model->common_sidebar_counts();
		$db			= new Database();
		$mainMenu   = $db->fillCombo("sys_admin_menu", "MenuItem", "Choose..", "", "Id", "", "MenuItem", "");
		$data["subMenuId"]		= $id;
		// $data["project"]=$this->getAllPostProject();
		
		$this->load->view('brq-admin/admin-sub-menu',$data);
        
	}
	
	//====================================Function to get DataTables of Admin Sub Menu ================================
	public function subMenuList($subid="")
	{
		$list = $this->adminSubMainMenu->getDataTables();
		
		$data = array();
		$no = $_POST['start']; // commented for working
		//$no=1;
		
		foreach ($list as $menu) {
		
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Showing";
			$countText	 = "Yes";
			  
			$no++;
			$row = array();
			$row[] = $menu->SubMenuItem;
			$row[] = $menu->MenuItem;
			
			//--- new added by sandeep start 08-10-22 -->
			// $projectId = $menu->BrqProjectId;
			// $db		   = new Database();
						
			// if(is_null($projectId))
			// 	$row[] = "Not set";
			// else
			// 	$row[] = $db->getFieldValueById("sys_erp_projects", "ProjectName", "Id='{$projectId}'");
			// //--- new added by sandeep end 08-10-22-->
			
			$name= array();
			
			$str	= "";
			$str	=$menu->BrqProjectId;
			$res	= explode(',', $str);
			$project=$this->getAllPostProject();
			
				foreach ( $project as $category) : $i++; 
					if (in_array($category->Id,$res)) 
							
							$name[] =$category->ProjectName;
				endforeach;

			$row[] =$name;
			$row[] = $menu->pageLink;
			$row[] = $menu->MenuOrder;
			$row[] = $menu->SubMenuOrder;
			 if($menu->Status=="0")
			{
				$statusClass = "label label-danger";
				$statusText  = "Hided";
			}
			
			$row[] = "<span class='" . $statusClass . "'>" . $statusText . "</span>";
			
			//add html for action
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="rememberEntryCheck('."'".$menu->Id."'".',\'edit\')"><i class="glyphicon glyphicon-pencil"></i> Edit</a>';
			}
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{
				$actions .=' <a  id="deleteButton" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="rememberEntryCheck('."'".$menu->Id."'".',\'delete\')"><i class="glyphicon glyphicon-trash"></i> Delete</a>';
			}	
			//<a id="viewButton" class="btn btn-small btn-info" href="javascript:void(0)" title="Click to edit" onclick="edit_menu('."'". $menu->Id ."'".')"><i class="fa fa-sticky-note-o"></i> View</a>';	  
		
			$row[] = $actions;
			$data[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->adminSubMainMenu->countAll(),
						"recordsFiltered" => $this->adminSubMainMenu->countFiltered(),
						"data" => $data,
				);
		//output to json format
		echo json_encode($output);
	}
		

		
	

	// -------------------- for getting the sub menu details for editing ---
	 
	public function getEditAdminSubMenu($id)
	{
		$data = $this->adminSubMainMenu->getById($id);
		echo json_encode($data);
	}
	
	//==================================== saveAdminSubMenu function for Saving Sub Menu details - by Sajitha ================================
	public function saveAdminSubMenu()
	{
		$id		= $this->input->post("hidID");
		$menuid		= $this->input->post('MenuItem');
        $db     = new Database();
		  
        // --- checking the existance start;
		$item	 =  trim(urldecode($this->input->post('SubMenuItem')));
		$where   = "SubMenuItem='{$item}' AND Id!='{$id}'";
		$res 	 = $db->checkExistance("sys_admin_sub_menu", $where); //  if exists id value will be returned.
		
		if($res)
			{
				echo json_encode(
									array(	
											"status"  => false,
											"message" => "This item alreay added and exists!.",
										 )
								);
				exit;
			}
		// --- checking the existance ends;
                $data = array(
								'MenuItemId' => $this->input->post('MenuItem'),
								'MenuItem' => $db->getFieldValueById("sys_admin_menu", "MenuItem", "Id='{$menuid}'"),
								'SubMenuItem' => trim(urldecode($this->input->post('SubMenuItem'))),
								'FaIcon' => trim(urldecode($this->input->post('FaIcon'))),
								'MenuOrder' => trim(urldecode($this->input->post('MenuOrder'))),
								'SubMenuOrder' => trim(urldecode($this->input->post('SubMenuOrder'))),
								'pageLink' => trim(urldecode($this->input->post('LinkPage'))),
								'Status' => trim(urldecode($this->input->post('Status'))),
								'ShowInSeparatePage' => trim(urldecode($this->input->post('ShowInSeparatePage'))),
								'CountTitle' => trim(urldecode($this->input->post('CountTitle'))),
								'CountTable' => trim(urldecode($this->input->post('CountTable'))),
								'CategoryId' 		=>trim(urldecode($this->input->post('Category'))),
								// 'BrqProjectId'  => trim(urldecode($this->input->post('BrqProjectId'))),
								'TopNavClass' =>trim(urldecode($this->input->post('TopNavClass'))),
								'BrqProjectId'  =>trim(urldecode($this->input->post('projectSelected1'))),
								'Description' =>trim(urldecode($this->input->post('Description'))),
								'IconImagePath' =>trim(urldecode($this->input->post('IconImagePath'))),
								
							);
           	
		$res= $this->adminSubMainMenu->saveData($data, $id);
		echo json_encode(array(
								'status'  =>  true,	
								'message' => 'Item saved successfully!.'
							  )
						);
	}
	
	//====================================Function to delete Sub Menu by Id ================================
	public function deleteSubMenu($id)
	{
		
	   $res = $this->adminSubMainMenu->deleteData($id);
	   if(!$res)
	   {
		   echo json_encode(
							 array(
									'status'  =>  false,	
									'message' => 'Oops! Can\'t delete this item, detail exists!.'
								  )
						   );	 
		   exit;
	   }
	   echo json_encode(
	   
							 array(
									'status'  =>  true,	
									'message' => 'Item has been removed successfully!.'
								 )
						);	
	}

	//========================== Super Admin(Developer) SMS Log Modules ====================
	public function sms_log($id="")
	{
       if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$data 						= array();
		$data 						= $this->Common_model->common_sidebar_counts();
		$data["subMenuId"]			= $id;
		$this->load->view('brq-admin/sms-log',$data);
        
	}
	
	
	//==================================== smsLogList function to get DataTables of SMS Log  - by Sajitha ================================
	
	public function smsLogList($subid="")
	{

		$smsCategory	= $this->input->post('category');
		$deliverySatus	= $this->input->post('delSatus');
		
        $list 	= $this->SMSLogAdmin_model->getDataTables($smsCategory,$deliverySatus);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$statusClass = "label label-success";
			$delStatusClass	 = "label label-success";
			$statusText	 = "Active";
			$delStatusText	 = "Delivered";
			
			$no++;
			
			$row 	= array();
			$row[] = $data->SmsCategory;
		    $row[] = $data->MobileNo;
			$row[] = $data->EntityName;
			$row[] = $data->MessageId;
			$row[] = $data->SuccessCode;
			if($data->DeliveryStatus==0)
			 {
				$delStatusClass = "label label-danger";
				$delStatusText  = "Not Delivered";
			 }
			  
			 
			$row[] = "<span class='" . $delStatusClass . "'>" . $delStatusText . "</span>";
			
			if($data->Status==0)
			 {
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			 }
			  
			 
			$row[] = "<span class='" . $statusClass . "'>" . $statusText . "</span>";
			$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			//add html for action
			// $actions = '<a  id="viewButton" class="btn btn-sm btn-info" href="javascript:void(0)" title="Click to View" onclick="viewSMSLog('."'".$data->Id."'".');"><i class="fa fa-search" aria-hidden="true" data-boundary="window" ></i> View</a>';
		  	// if($_SESSION['ADMIN_USER_TYPE'] == 'SUPER ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'DEVELOPER') {		  
	        //     $actions .= '<a  id="deleteButton" class="btn btn-sm btn-danger ml-2" href="javascript:void(0)" title="Click to Delete" onclick="deleteData('."'".$data->Id."'".')"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</a>';
			// }
			$actions=$this->useractionpermission($subid,$data->Id);
			$row[] = $actions;
			
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->SMSLogAdmin_model->countAll(),
						"recordsFiltered" => $this->SMSLogAdmin_model->countFiltered($smsCategory,$deliverySatus),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
 	
	// ==========================  Function to view audit log - By Sajitha   ==================================	
	public function view_sms_log($id=0)
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	="view_sms_log"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data1 					= $this->SMSLogAdmin_model->getById($id);
		$data = (object) array_merge((array) $data, (array) $data1);
		$this->load->view("brq-admin/view-sms-log", $data);
	} 	
	
	//====================================Function to delete SMS Log Details by Id ================================
	public function deleteSMSLogData($id)
	{
		
	   $res = $this->SMSLogAdmin_model->deleteData($id);
	   if(!$res)
	   {
		   echo json_encode(
							 array(
									'status'  =>  false,	
									'message' => 'Oops! Can\'t delete SMS Log Detail!.'
								  )
						   );	 
		   exit;
	   }
	   echo json_encode(
	   
							 array(
									'status'  =>  true,	
									'message' => 'SMS Log Detail has been deleted successfully!.'
								 )
						);	
	}
	
	//====================================Function to delete all the SMS Log Details================================
	public function deleteAllSMSLogData()
	{
		
	   $res = $this->SMSLogAdmin_model->deleteAllData();
	   if(!$res)
	   {
		   echo json_encode(
							 array(
									'status'  =>  false,	
									'message' => 'Oops! Can\'t delete all SMS Log Detail!.'
								  )
						   );	 
		   exit;
	   }
	   echo json_encode(
	   
							 array(
									'status'  =>  true,	
									'message' => 'All SMS Log Details has been deleted successfully!.'
								 )
						);	
	}
	
	//========================== Super Admin(Developer) Site Number Log Modules ====================
	public function set_number_log()
	{
       if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$data 						= array();
		$data 						= $this->Common_model->common_sidebar_counts();
		
		$this->load->view('brq-admin/set-number-log',$data);
        
	}
	
	//==================================== SetNumberLogList function to get DataTables of Set Number Log  - by Sajitha ================================
	public function SetNumberLogList()
	{

		$numberType	= $this->input->post('numberType');
		$year		= $this->input->post('year');
		
        $list 	= $this->SetNumberLogAdmin_model->getDataTables($numberType,$year);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$statusClass = "label label-success";
			$delStatusClass	 = "label label-success";
			$statusText	 = "Active";
			$delStatusText	 = "Delivered";
			
			$no++;
			
			$row 	= array();
			$row[] = $data->UserLogId;
		    $row[] = $data->UserName;
			$row[] = $data->Actions;
			$row[] = $data->ActionIP;
			$row[] = $data->Year; 
			$row[] = $data->NumberType;
			$row[] = '<strong><span  style="background-color:red;color:white !important;padding:3px;" >'.$data->Number.'</span></strong>';
			$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			//add html for action
			
			if($_SESSION['ADMIN_USER_TYPE'] == 'SUPER ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'DEVELOPER') {		  
	            $row[] = '<a  id="deleteButton" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="deleteData('."'".$data->Id."'".')"><i class="fa fa-trash-o" aria-hidden="true" data-boundary="window" ></i> Delete</a>';
			}	  
	        
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->SetNumberLogAdmin_model->countAll(),
						"recordsFiltered" => $this->SetNumberLogAdmin_model->countFiltered($numberType,$year),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
	//====================================Function to delete Set Number Log Details by Id ================================
	public function deleteSetNumberLogData($id)
	{
		
	   $res = $this->SetNumberLogAdmin_model->deleteData($id);
	   if(!$res)
	   {
		   echo json_encode(
							 array(
									'status'  =>  false,	
									'message' => 'Oops! Can\'t delete Set Number Log Detail!.'
								  )
						   );	 
		   exit;
	   }
	   echo json_encode(
	   
							 array(
									'status'  =>  true,	
									'message' => 'Set Number Log Detail has been deleted successfully!.'
								 )
						);	
	}
		
	//====================================Function to delete all the Set Number Log Details================================
	public function deleteAllSetNumberLogData()
	{
		
	   $res = $this->SetNumberLogAdmin_model->deleteAllData();
	   if(!$res)
	   {
		   echo json_encode(
							 array(
									'status'  =>  false,	
									'message' => 'Oops! Can\'t delete all Set Number Log Detail!.'
								  )
						   );	 
		   exit;
	   }
	   echo json_encode(
	   
							 array(
									'status'  =>  true,	
									'message' => 'All Set Number Log Details has been deleted successfully!.'
								 )
						);	
	}
	
	  
	//--------------------------- FAQ  module                                                                                                        ------------------
	public function faq($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	=	"faq"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$db  					 = new Database();
		$headText				 = $db->getFieldValueById("sys_site_faq", "HeadText", "Id=1 AND Status=1");
		$headDescription		 = $db->getFieldValueById("sys_site_faq", "HeadDescription",  "Id=1 AND Status=1");
		$data["headText"]	 	 = $headText; // from table.
		$data["headDescription"] = $headDescription; // from table.
		$data["subMenuId"]			= $id;

		$this->load->view("brq-admin/faq", $data);
	}	
	
	// ========================= saveFAQHead() for saving FAQ Head datas - by Sajitha ================================
	public function saveFAQHead()
	{
		$headText				=	trim($_POST["Head_Text"]);
		$description			=	trim($_POST["Description"]);
				
		$headText				=	str_replace("'","\'",$headText); // replacing the quotes
		$description			=	str_replace("'","\'",$description); 
		
		$headText				=	htmlspecialchars($headText);
		$description			=	htmlspecialchars($description);
		
		$resData = array();
		
		if(empty($headText))
			{
				echo "Error! FAQ Head should not be blank.";
				exit;
			}
		if(empty($description))
			{
				echo "Error! FAQ Head Description should not be blank.";
				exit;
			}
		
		$data = array(
						'HeadText'			=> $headText,
						'HeadDescription'	=> $description,
						
					);
					
		$this->db->update('sys_site_faq', $data, array('Id' =>1));
		
		$db  					 = new Database();
		$headText				 = $db->getFieldValueById("sys_site_faq", "HeadText", "Id=1 AND Status=1");
		$headDescription		 = $db->getFieldValueById("sys_site_faq", "HeadDescription",  "Id=1 AND Status=1");
		$data["headText"]	 	 = $headText; // from table.
		$data["headDescription"] = $headDescription; // from table.
		//output as json format
		echo json_encode($data);
	}
	
	//==================================== faqList function to get DataTables of faq  - by Sajitha ================================
	public function faqList($id="")
	{
		$faqId	= $this->input->post('faqid');
        $list 	= $this->FAQ_model->getDataTables($faqId);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start'];
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = stripslashes($data->Question);
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			if($data->ModifiedOn == null)
				$row[] = '';
			else
				$row[] = date('d/m/Y h:i:s a', strtotime($data->ModifiedOn));
			$row[] =  $data->ModifiedBy;

			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
		
			$actions ="";
			$view ="Sub_Visible_".$id;
			$edit ="Sub_Edit_".$id;
			$copy ="Sub_Copy_".$id;
			$delete = "Sub_Del_".$id;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			//add html for action
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit"   onclick="editFaq('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editFaq('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteFaq('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			$actions .=' </div>'
	                  .'</div>';
			
			$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->FAQ_model->countAll(),
						"recordsFiltered" => $this->FAQ_model->countFiltered($faqId),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}




	//==================================== saveFaq function for Saving Faq details - by Sajitha ================================
	public function saveFaq()
	{
		$id				= $this->input->post("hidID");
		$data 			= array();  
		$faqName  	= trim(addslashes($this->input->post('Question')));
				
		$status 		= $this->input->post('Status');
		$details  		= trim(addslashes($this->input->post('Answer')));
		//if($id == 0) {
			$db  			= new Database();
			$where   		= " UPPER(Question)='".strtoupper($faqName)."' and Id!={$id}";
			$res 			= $db->checkExistance("sys_site_faq_questions_answers", $where); // if exists id value will be returned.
		
			if($res)
			{
				
				echo json_encode(
									array("status" => false, 
										  "message"=>"This FAQ is already created and exists! Please change the FAQ name."
										 )
								);
				exit;
			}
		//}
		if($id==0) // if add
		{    
			$data = array(
						'Question' => $faqName,
						'Status' => $status,
						'Answer' => $details,
						'CreatedId'	=> $_SESSION['EMPLOYEE_ID'],
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),						
					);
				
		}
		else { // if edit
				$data = array(
						'Question' => $faqName,
						'Status' => $status,
						'Answer' => $details,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),
						'ModifiedId'	=> $_SESSION['EMPLOYEE_ID'],						
						);
		}
		$res	= $this->FAQ_model->saveData($data, $id);
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$moduleTab = "faq";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$db = new BrqDatabase();
		$resCombo = $db->getFAQNameCombo();
		$resData    = array(
								"status" => true,
								'message' => 'FAQ details saved successfully!!',
								'filterFaq' => $resCombo
						 );
		$resData = (object) array_merge((array) $resData, (array) $data);					
		echo json_encode($resData);
                
	}
	
	//=========================== getEditFaq function used for getting a FAQ details by id from client_faq table===========================	 
	public function getEditFaq($id)
	{
		$data = $this->FAQ_model->getById($id);
		echo json_encode($data);
	}
	
	//=========================== deleteFaq function used for deleting FAQ details by id from sys_site_faq table===========================	 
	public function deleteFaq($id)
	{
       $res    =  $this->FAQ_model->deleteData($id);
       $resData =array();
	   
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$moduleTab = "faq";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		
	   if($res)
	   {
		    $db = new BrqDatabase();
			$resCombo = $db->getFAQNameCombo();
			$resData    = array(
								"status" => true,
								'message' => 'FAQ deleted successfully!!',
								'filterFaq' => $resCombo
						 );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete FAQ!!"
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData); 
    }    
    
	//--------------------------- News  module                                                                                                        ------------------
	public function news($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	=	"news"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]			= $id;

		$this->load->view("brq-admin/news", $data);
	}	
	
	//==================================== newsList function to get DataTables of News  - by Sajitha ================================
	public function newsList($id="")
	{
		$newsId		= $this->input->post('newsid');
		$newsDate	= $this->input->post('newsdate');
        $list 		= $this->News_model->getDataTables($newsId,$newsDate);
		
		$data 		= array();
        $data1 		= array();
		$no 		= $_POST['start']; 
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();	

			$newsPath 	= base_url().$data->NewsPhotoPath.'thumb/';
			$newsPhoto 	= $newsPath.$data->NewsPhoto;
			$newsPhotoLarge 	= base_url().$data->NewsPhotoPath.$data->NewsPhoto;
			if(!(file_exists($data->NewsPhotoPath.'thumb/'.$data->NewsPhoto))) {			
				$newsPhoto 	=  base_url().'./uploads/news_photo/thumb/news.jpg';
				$newsPhotoLarge 	= base_url().'./uploads/news_photo/news.jpg';
			}
			
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$newsPhotoLarge.'\',\''.$data->Title.'\');" ><img style="margin-left:25px;"   class="rounded-circle" src="'.$newsPhoto.'" height="40" width="40" alt=""></a>';	
			
			$row[] = stripslashes($data->Title);
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->NewsDate));
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			if($data->ModifiedOn == null)
				$row[] = '';
			else
				$row[] = date('d/m/Y h:i:s a', strtotime($data->ModifiedOn));
			$row[] =  $data->ModifiedBy;
			$permission = $_SESSION['GROUP_PERMISSION'];
		
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
		
			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			//add html for action
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editNews('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editNews('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			} 
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete"  onclick="deleteNews('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
				$actions .=' </div>'
	                  .'</div>';
			
			$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->News_model->countAll(),
						"recordsFiltered" => $this->News_model->countFiltered($newsId,$newsDate),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
 	
	//==================================== saveNews function for Saving News details - by Sajitha ================================
	public function saveNews()
	{
		$id				= $this->input->post("hidID");
		$uploadDir		= '';
		$data 			= array();  
		$newsName  	= trim(addslashes($this->input->post('NewsName')));
				
		$status 		= $this->input->post('Status');
		
		$ndate_str 		= $this->input->post('News_Date'); 
		$ndate_str 		= str_replace('/', '-', $ndate_str);
		$newsDate 	= date('Y-m-d',(strtotime($ndate_str)));
		
		$details  		= trim(addslashes($this->input->post('Details')));
		
		$db  			= new Database();
		$where   		= " UPPER(Title)='".strtoupper($newsName)."' and Id!={$id}";
		$res 			= $db->checkExistance("client_news", $where); // if exists id value will be returned.
	
		if($res)
		{
			echo json_encode(
				array("status" => false, 
					  "message"=>"This News is already created and exists! Please change the News name."
					 )
			);
			exit;
		}
		
		// News Photo uploading starts
		if(isset($_FILES))
		{
			if(isset($_FILES["file_"]))
					{
						// tmp_name | name | type | size | error
						
						// -- Check here type  size and if any error.
						$fileName 	= $_FILES["file_"]['name'];
						$imgSize 	= $_FILES["file_"]['size'];
								
								// Check file size '5MB' or from max.image byte upload settings, in site settings module.
								if($imgSize < 5000000){}
								else{
											$msgError = "Product picture " . $fileName . " file is too large. Only 5 MB allowed!.";
											$errMSG   = "Error : Sorry," .$msgError;
									}
							
						$tempName	= $_FILES["file_"]['tmp_name'];
						$uploadDir	= "./uploads/news_photo/"; // this would be the upload file path. Exactly specify here or from the settings.
						
						// uploadImage is defined in site_helper (system/helper folder).
						$uploadResult = uploadImage($tempName, $uploadDir, "", $fileName, "", "",  TRUE, TRUE, TRUE,$_POST["Pic_Name"]);
						if($uploadResult['status'] == 'true') {
							$newsPhoto = $uploadResult['fileName'];
							
						} else {
							echo json_encode(
									array("status" => false, 
										  "message"=>$uploadResult['message']
										 )
								);
							exit;
						}
				}
			else { 
				if($id==0) {
					$uploadDir	= "./uploads/news_photo/";
					$newsPhoto = "news.jpg";
				}
			}	
		} 
		
		
		// News Photo uploading ends
		
		if($id==0) // if add
		{    
			$data = array(
						'Title' => $newsName,
						'Status' => $status,
						'Details' => $details,
						'NewsDate' => $newsDate,
						'NewsPhotoPath' => $uploadDir,
						'NewsPhoto' => $newsPhoto,
						'CreatedId'	=> $_SESSION['EMPLOYEE_ID'],
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),						
					);
				
		}
		else { // if edit
				$data = array(
						'Title' => $newsName,
						'Status' => $status,
						'Details' => $details,
						'NewsDate' => $newsDate,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),
						'ModifiedId'	=> $_SESSION['EMPLOYEE_ID'],						
						);
				if($newsPhoto !='' && $uploadDir != '') {
					$data += [ "NewsPhoto" => $newsPhoto, "NewsPhotoPath" => $uploadDir ];
				 	//deleting existing news photo and thumbnail		
					$db  				= new Database();
					$newsPhoto	 		= $db->getFieldValueById("client_news", "NewsPhoto", "Id='{$id}'");	
					$newsPhotoPath 		= $db->getFieldValueById("client_news", "NewsPhotoPath", "Id='{$id}'");	
					if($newsPhoto != 'news.jpg' && (file_exists($newsPhotoPath.$newsPhoto))) {
						unlink($newsPhotoPath.$newsPhoto);
						if(file_exists($newsPhotoPath."thumb/".$newsPhoto))
							unlink($newsPhotoPath."thumb/".$newsPhoto);
					}	
				}			
		}
		$res	= $this->News_model->saveData($data, $id);
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$moduleTab = "news";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$db = new BrqDatabase();
		$resCombo = $db->getNewsNameCombo();
		$resData    = array(
								"status" => true,
								'message' => 'News details saved successfully!!',
								'filterNews' => $resCombo
						 );
		$resData = (object) array_merge((array) $resData, (array) $data);					
		echo json_encode($resData);
	}
	
	//=========================== getEditNews function used for getting a News details by id from client_news table===========================	 
	public function getEditNews($id)
	{
		$data = $this->News_model->getById($id);
		echo json_encode($data);
	}
	
	//==================================== Function to get News Photo details by Id - by Sajitha ================================
	public function getNewsPhoto($id)
	{
		$db  				= new Database();
		$newsPhoto 		= $db->getFieldValueById("client_news", "NewsPhoto", "Id='{$id}'");	
		$newsPhotoPath 	= $db->getFieldValueById("client_news", "NewsPhotoPath", "Id='{$id}'");	
		if(file_exists($newsPhotoPath."thumb/".$newsPhoto)) 
			echo 1;
		else
			echo 0;
	}
	
	//=========================== deleteNews function used for deleting News details by id from client_news table===========================	 
	public function deleteNews($id)
	{
        //deleting existing news photo and thumbnail		
		$db  				= new Database();
		$newsPhoto 		= $db->getFieldValueById("client_news", "NewsPhoto", "Id='{$id}'");	
		$newsPhotoPath 	= $db->getFieldValueById("client_news", "NewsPhotoPath", "Id='{$id}'");	
		if($newsPhoto != 'news.jpg' && (file_exists($newsPhotoPath.$newsPhoto))) {
			unlink($newsPhotoPath.$newsPhoto);
			if(file_exists($newsPhotoPath."thumb/".$newsPhoto))
				unlink($newsPhotoPath."thumb/".$newsPhoto);
		}
		
	   $res    =  $this->News_model->deleteData($id);
       $resData =array();
	   
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$moduleTab = "news";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		
	   if($res)
	   {
		    $db = new BrqDatabase();
			$resCombo = $db->getNewsNameCombo();
			$resData    = array(
								"status" => true,
								'message' => 'News deleted successfully!!',
								'filterNews' => $resCombo
						 );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete News!!"
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData); 
    }    
    
	//--------------------------- Trending News  module                                                                                                        ------------------
	public function trending_news($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	=	"trending_news"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$db  					 = new Database();
		$headDescription		 = $db->getFieldValueById("trending_news_head", "Description",  "Id=1 and Status='Active'");
		$data["headDescription"] = $headDescription; // from table.
		$data["subMenuId"]			= $id;

		$this->load->view("brq-admin/trending-news", $data);
	}	
		
	// ========================= saveTrendNewsHead() for saving Trending News Head Description - by Sajitha ================================
	public function saveTrendNewsHead()
	{
		$description			=	trim($_POST["Description"]);
				
		$description			=	str_replace("'","\'",$description); 
		
		$description			=	htmlspecialchars($description);
		
		$resData = array();
		
		if(empty($description))
			{
				echo "Error! Trending News Head Description should not be blank.";
				exit;
			}
		
		$data = array(
						'Description'	=> $description,
						
					);
					
		$this->db->update('trending_news_head', $data, array('Id' =>1));
		echo "success";
	}
	
	
	//==================================== trendNewsList function to get DataTables of Trending News  - by Sajitha ================================
	public function trendNewsList($subid="")
	{
		$newsId		= $this->input->post('newsid');
		$newsDate	= $this->input->post('newsdate');
        $list 		= $this->TrendingNews_model->getDataTables($newsId,$newsDate);
		
		$data 		= array();
        $data1 		= array();
		$no 		= $_POST['start']; 
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = stripslashes($data->Title);
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->NewsDate));
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			if($data->ModifiedOn == null)
				$row[] = '';
			else
				$row[] = date('d/m/Y h:i:s a', strtotime($data->ModifiedOn));
			$row[] =  $data->ModifiedBy;

			//add html for action
			$permission = $_SESSION['GROUP_PERMISSION'];
		
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			// print_r($userGroupPermission);
			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editNews('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editNews('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Delete" onclick="deleteNews('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			$actions .=' </div>'
	                  .'</div>';
			$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->TrendingNews_model->countAll(),
						"recordsFiltered" => $this->TrendingNews_model->countFiltered($newsId,$newsDate),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}

	//=========================== getEditNews function used for getting a Trending News details by id from trening_news table===========================	 
	public function getEditTrendNews($id)
	{
		$this->db->from('trending_news_video_photo');
		$this->db->where('NewsId',$id);
		$query = $this->db->get();
		$rowcount = $query->num_rows();
		
		$resData = array(
						"PhotoDetailsCount" => $rowcount,	
					 );
		
		$data = $this->TrendingNews_model->getById($id);
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData);
	}
	
	//================================= getEditTrendNewsPhoto function to get Trending News Files ===========================
	public function getEditTrendNewsPhoto($id=0)
	{
        $resData = array();		
		$this->db->from('trending_news_video_photo');
		$this->db->where('NewsId',$id);
		$query = $this->db->get();
		$list  = $query->result();
		
		$db  		= new Database();
		$newsName 	= $db->getFieldValueById("trending_news", "Title", "Id='{$id}'");	
		
		$tr 	= '';
		$i	= 0;
		//Trending News files details to be loaded in the Edit Trending News's Existing file section		
		foreach ($list as $row) {
			if($i == 0 || $i % 3 == 0)
				$tr .= '<tr>';
			$i++;
			if($row->VideoOrPhoto == 'Photo') {
				$src = base_url().$row->ImagePath."thumb/".$row->ImageFileName;
				$link = base_url().$row->ImagePath.$row->ImageFileName;
				$tr .= '<td><a href="'.$link.'" target="_blank"><img src="'.$src.'" height="150" width="150" alt=""></a><br/>'.$row->VideoOrPhoto;
				$tr .= '<br/><input class="optional toggle" type="checkbox" id="TrendNewsFile_Remove'.$i.'" name="TrendNewsFile_Remove'.$i.'" value="'.$row->Id.'"><label  id="TrendNewsFile_Remove_Label'.$i.'" name="TrendNewsFile_Remove_Label'.$i.'" for="TrendNewsFile_Remove"> &nbsp;Remove file</label></td>';
			} else if($row->VideoOrPhoto == 'Video'){
				//$src = base_url().$row->VideoPath."thumb/".$row->VideoPosterImageName;
				$link = base_url().$row->VideoPath.$row->VideoFileName;
				$tr .= '<td><a href="'.$link.'" target="_blank"><video width="150" height="150" controls><source src="'.$link.'" type="video/mp4"></video></a><br/>'.$row->VideoOrPhoto;
				$tr .= '<br/><input class="optional toggle" type="checkbox" id="TrendNewsFile_Remove'.$i.'" name="TrendNewsFile_Remove'.$i.'" value="'.$row->Id.'"><label  id="TrendNewsFile_Remove_Label'.$i.'" name="TrendNewsFile_Remove_Label'.$i.'" for="TrendNewsFile_Remove"> &nbsp;Remove file</label></td>';
			} 
			
			
			if($i % 3 == 0)
				$tr .= '</tr>';
		}
		
		//output as html format
		
		echo $tr;
	}
	
	
	//==================================== saveTrendNews function for Saving Trending News details - by Sajitha ================================
	public function saveTrendNews()
	{
		$id				= $this->input->post("hidID");
		$uploadDir		= '';
		$data 			= array();  
		$newsName  		= trim(addslashes($this->input->post('NewsName')));
		$media			= $this->input->post('Media');
		$status 		= $this->input->post('Status');
		
		$ndate_str 		= $this->input->post('News_Date'); 
		$ndate_str 		= str_replace('/', '-', $ndate_str);
		$newsDate 	= date('Y-m-d',(strtotime($ndate_str)));
		
		$details  		= trim(addslashes($this->input->post('Details')));
		$db  			= new Database();
		$where   		= " UPPER(Title)='".strtoupper($newsName)."' and Id!={$id}";
		$res 			= $db->checkExistance("trending_news", $where); // if exists id value will be returned.
	
		if($res)
		{
			echo json_encode(
				array("status" => false, 
					  "message"=>"This Trending News is already created and exists! Please change the Trending News name."
					 )
			);
			exit;
		}
		
		$newsPhoto   = '';
		// Product Picture uploading starts
		if(isset($_FILES))
		{
			
			$TotalFiles = $_POST["TotalFiles"];
			if($TotalFiles != 0) {
				//foreach($_FILES as $file)
				for ($i=0;  $i<=$TotalFiles; $i++)
				{
					if(isset($_FILES["file_".$i]))
					{
						// tmp_name | name | type | size | error
						
						// -- Check here type  size and if any error.
						$fileName 	= $_FILES["file_".$i]['name'];
						$imgSize 	= $_FILES["file_".$i]['size'];
								
								// Check file size '5MB' or from max.image byte upload settings, in site settings module.
								if($imgSize < 5000000){}
								else{
											$msgError = "Product picture " . $fileName . " file is too large. Only 5 MB allowed!.";
											$errMSG   = "Error : Sorry," .$msgError;
									}
							
						$tempName	= $_FILES["file_".$i]['tmp_name'];
						if($media == 'Photo') {
							$uploadDir	= "./uploads/trend_news_photo/"; // this would be the upload file path. Exactly specify here or from the settings.
							// uploadImage is defined in site_helper (system/helper folder).
							$uploadResult = uploadImage($tempName, $uploadDir, "", $fileName, "", "",  TRUE, TRUE, TRUE,$_POST["Pic_Name"]);
						} else if($media == 'Video') {
							$uploadDir	= "./uploads/trend_news_video/"; // this would be the upload file path. Exactly specify here or from the settings.
							// uploadImage is defined in site_helper (system/helper folder).
							$uploadResult = uploadVideo($tempName, $uploadDir, "", $fileName, "", "", "",  FALSE, "", FALSE, FALSE,$_POST["Pic_Name"]);
						}
						
						if($uploadResult['status'] == 'true') {
							$newsPhoto = $uploadResult['fileName'];							
						} else {
							echo json_encode(
									array("status" => false, 
										  "message"=>$uploadResult['message']
										 )
								);
							exit;
						}
					}
				}
			} 
		} 
		
		if($id==0) // if add
		{    
			$data = array(
						'Title' => $newsName,
						'Status' => $status,
						'Details' => $details,
						'NewsDate' => $newsDate,
						'CreatedId'	=> $_SESSION['EMPLOYEE_ID'],
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),						
					);
				
		}
		else { // if edit
				$data = array(
						'Title' => $newsName,
						'Status' => $status,
						'Details' => $details,
						'NewsDate' => $newsDate,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),
						'ModifiedId'	=> $_SESSION['EMPLOYEE_ID'],						
						);
		}
		$res	= $this->TrendingNews_model->saveData($data, $id);
		if($id!=0) // if edit
				$res = $id; // assiging the document id 
		// inserting trending news photo / video files details in the trending_news_video_photo table	
		if($newsPhoto) {
			if($media == 'Photo') {
				$filedata = array(
							'NewsId' => $res,
							'Status' => $status,
							'ImagePath' => $uploadDir,
							'ImageFileName' => $newsPhoto,
							'VideoOrPhoto' => $media,
							'CreatedBy' => $_SESSION['ADMIN_ID'],
							'CreatedId'	=> $_SESSION['EMPLOYEE_ID'],
							'CreatedOn' => date('Y-m-d H:i:s')
						);
			}	else if($media == 'Video') {
				$filedata = array(
							'NewsId' => $res,
							'Status' => $status,
							'VideoPath' => $uploadDir,
							'VideoFileName' => $newsPhoto,
							'VideoPosterImageName' => $newsName.".jpg",
							'VideoOrPhoto' => $media,
							'CreatedBy' => $_SESSION['ADMIN_ID'],
							'CreatedId'	=> $_SESSION['EMPLOYEE_ID'],
							'CreatedOn' => date('Y-m-d H:i:s')
						);
			}			
			$this->db->insert('trending_news_video_photo',$filedata);		
		}			
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$moduleTab = "news";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$db = new BrqDatabase();
		$resCombo = $db->getTrendingNewsNameCombo();
		$resData    = array(
								"status" => true,
								'message' => 'Trending News details saved successfully!!',
								'filterNews' => $resCombo,
								'resId' => $res
						 );
		$resData = (object) array_merge((array) $resData, (array) $data);					
		echo json_encode($resData);
	}
	
	//=========================== deleteTrendNews function used for deleting trending news details by id from trending_news table===========================	 
	public function deleteTrendNews($id)
	{
        
	   $res    =  $this->TrendingNews_model->deleteData($id);
	   $resData 	= array();	
	   if($res)
	   {
			$this->db->from('trending_news_video_photo');
			$this->db->where('NewsId',$id);
			$query = $this->db->get();
			$list  = $query->result();
			
			//deleting the trending news files from trend_news_photo folder in upload folder when deleting Trending News detials from the trending_news table
			foreach ($list as $row) {
				if($row->VideoOrPhoto == 'Photo') {
					unlink($row->ImagePath.$row->ImageFileName);	
					if(file_exists($row->ImagePath."thumb/".$row->ImageFileName))
						unlink($row->ImagePath."thumb/".$row->ImageFileName);	
				} else if($row->VideoOrPhoto == 'Video') {
					unlink($row->VideoPath.$row->VideoFileName);	
					if(file_exists($row->VideoPath."thumb/".$row->VideoPosterImageName))
						unlink($row->VideoPath."thumb/".$row->VideoPosterImageName);	
				}			
			}
			//deleting the trending news files records from trending_news_video_photo table when deleting Trending News detials from the trending_news table
			$resfiles     	= $this->db->delete('trending_news_video_photo', array('NewsId' => $id));
			if($resfiles)
			{	    			
				$db = new BrqDatabase();
				$resCombo = $db->getTrendingNewsNameCombo();
				$resData    = array(
									"status" => true,
									'message' => 'Trending News deleted successfully!!',
									'filterNews' => $resCombo
							 );
			} else {	
				$resData    = array(
									"status" => true,
									'message' => 'Trending News deleted successfully!!'
							 );
			}				 
	   }
	   else
	   {
		    $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Trending News !!"
				   );
	   }
	   
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$moduleTab = "news";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData); 
    }    
		
	//================================= deleteTrendNewsFile function to delete Trending News file/s ===========================
	public function deleteTrendNewsFile($id=0)
	{
			$db  			= new Database();
			$videoPhoto 	= $db->getFieldValueById("trending_news_video_photo", "VideoOrPhoto", "Id='{$id}'");
			
			if($videoPhoto == 'Photo') {
				$fileName = $db->getFieldValueById("trending_news_video_photo", "ImageFileName", "Id='{$id}'");
				$filePath 		= $db->getFieldValueById("trending_news_video_photo", "ImagePath", "Id='{$id}'");
				if(file_exists($filePath."thumb/".$fileName))
					unlink($filePath."thumb/".$fileName);			
			} else if($videoPhoto == 'Video') {
				$fileName = $db->getFieldValueById("trending_news_video_photo", "VideoFileName", "Id='{$id}'");
				$filePath = $db->getFieldValueById("trending_news_video_photo", "VideoPath", "Id='{$id}'");
				$posterName = $db->getFieldValueById("trending_news_video_photo", "VideoPosterImageName", "Id='{$id}'");
				if(file_exists($filePath."thumb/".$posterName))
					unlink($filePath."thumb/".$posterName);			
			}
			
			//deleting the trending news files from trend_news_photo folder in upload folder 
			unlink($filePath.$fileName);
			
			//deleting the trending news files record from trend_news_photo table
			$res    =  $this->db->delete('trending_news_video_photo', array('Id' => $id));
			$resData =array();
		    if($res)
		    {
				$resData    = array(
									"status" => true,
									'message' => 'Trending news file deleted successfully!!'
							 );
			   
		    }
		    else
		    {
				$resData=array(
						"status"=>false,
						"message"=>"Oops! Error, Can't delete Trending news file!!"
					   );
		    }
		    echo json_encode($resData); 	
	}
	
	//==================================== trendNewsCommentsList function to get DataTables of Trending News Comments  - by Sajitha ================================
	public function trendNewsCommentsList($subid="")
	{
		$newsId		= $this->input->post('newsid');
		$newsDate	= $this->input->post('newsdate');
        $list 		= $this->TrendingNewsComments_model->getDataTables($newsId,$newsDate);
		
		$data 		= array();
        $data1 		= array();
		$no 		= $_POST['start']; 
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();
			$db  	= new Database();
			$row[] 	= getWords($db->getFieldValueById("trending_news", "Title", "Id='{$data->TrendingNewsId}'"),3)."...";
			$row[] = $data->ReaderName;
			$row[] = $data->Email;
			$row[] = $data->WhatsApp;
			$row[] =  date('d/m/Y h:i:s a', strtotime($db->getFieldValueById("trending_news", "NewsDate", "Id='{$data->TrendingNewsId}'")));
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			}
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			
			if($data->ModifiedOn == null)
				$row[] = '';
			else
				$row[] = date('d/m/Y h:i:s a', strtotime($data->ModifiedOn));
			$row[] =  $data->ModifiedBy;
			//add html for action
			$permission = $_SESSION['GROUP_PERMISSION'];
		
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
		
			$actions ="";
			$edit ="Sub_Edit_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
				{
					$actions .= '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="editNewsComment('."'".$data->Id."'".')" ><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>';
				}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
				{
					$actions .='<a  id="deleteButton" class="btn btn-sm btn-danger mt-1" href="javascript:void(0)" title="Click to Delete" onclick="deleteNewsComment('."'".$data->Id."'".')"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</a> ';
				}
			$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"Id"=> $subid,
						"recordsTotal" => $this->TrendingNewsComments_model->countAll(),
						"recordsFiltered" => $this->TrendingNewsComments_model->countFiltered($newsId,$newsDate),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
	
	//=========================== getEditTrendNewsComment function used for getting a Trending News Comments details by id from trening_news_comment table===========================	 
	public function getEditTrendNewsComment($id)
	{
		$data   = $this->TrendingNewsComments_model->getById($id);
		$db  	= new Database();
		$newsId = $db->getFieldValueById("trending_news_comment", "TrendingNewsId", "Id='{$id}'");
		$newsTitle 	= $db->getFieldValueById("trending_news", "Title", "Id='{$newsId}'");
		$newsDate	= $db->getFieldValueById("trending_news", "NewsDate", "Id='{$newsId}'");		
		
		$resData = array();
		
	    $resData = array(
						"NewsTitle" => $newsTitle,
						"NewsDate" => $newsDate
				 );
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData);
	}
	
	//==================================== saveTrendNewsComment function for Saving Trending News Comment details - by Sajitha ================================
	public function saveTrendNewsComment()
	{
		$id				= $this->input->post("hidID");
		$data 			= array();  
				
		$status 		= $this->input->post('Status');
				
		$data = array(
				'Status' => $status,
				'ModifiedBy' => $_SESSION['ADMIN_ID'],
				'ModifiedOn' => date('Y-m-d H:i:s'),
				'ModifiedId'	=> $_SESSION['EMPLOYEE_ID'],						
				);
		$res	= $this->TrendingNewsComments_model->saveData($data, $id);
		
		$resData    = array(
								"status" => true,
								'message' => 'Trending News Comment Status edited successfully!!',
						 );
		echo json_encode($resData);
	}
	
	//=========================== deleteTrendNewsComment function used for deleting trending news comments by id from trending_news_comment table===========================	 
	public function deleteTrendNewsComment($id)
	{
        
	    $res    =  $this->TrendingNewsComments_model->deleteData($id);
	    $resData 	= array();	
	  
		if($res)
		{	    			
			$resData    = array(
								"status" => true,
								'message' => 'Trending News deleted successfully!!',
						 );
		} else {	
			$resData    = array(
								"status" => false,
								'message' => "Oops! Error, Can't delete Trending News !!"
						 );
		}
		echo json_encode($resData); 
    }    
	
	//--------------------------- Our Team  module                                                                                                        ------------------
	public function our_team($id="")
	{
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	=	"Our Team"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]			= $id;
		

		$this->load->view("brq-admin/our-team", $data);
	}	
	
	//==================================== teamList function to get DataTables of Our Team  - by Sajitha ================================
	public function teamList($subid="")
	{

		$employeeName		= $this->input->post('employeeName');
		$designation		= $this->input->post('designation');
		$branch				= $this->input->post('branch');
		$department			= $this->input->post('department');
        $list 		= $this->Team_model->getDataTables($employeeName,$designation,$branch,$department);
		
		$data 		= array();
        $data1 		= array();
		$no 		= $_POST['start']; 
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();	

			$photoPath 			= base_url().$data->ProfilePhotoPath.'thumb/';
			$profilePhoto 	   	= $photoPath.$data->ProfilePhoto;
			$profilePhotoLarge 	= base_url().$data->ProfilePhotoPath.$data->ProfilePhoto;
			if(!(file_exists($data->ProfilePhotoPath.'thumb/'.$data->ProfilePhoto))) {			
				$profilePhoto 		= base_url().'./uploads/team_photo/thumb/team.jpg';
				$teamPhotoLarge 	= base_url().'./uploads/team_photo/team.jpg';
			}
			
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$data->FullName.'\');" ><img style="margin-left:25px;"   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';	
			
			$row[] = stripslashes($data->FullName);
			$row[] = stripslashes($data->Designation);
			$branchId = $data->BranchId;
			$branchName = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");
			$row[] = $branchName;
			$depId = $data->DepId;
			$depName = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");
			$row[] = $depName;
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			if($data->ModifiedOn == null)
				$row[] = '';
			else
				$row[] = date('d/m/Y h:i:s a', strtotime($data->ModifiedOn));
			$row[] =  $data->ModifiedBy;

			//add html for action
			$permission = $_SESSION['GROUP_PERMISSION'];
		
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			// print_r($userGroupPermission);
			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
				
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  	  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editOurTeam('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';

						}
			if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  	  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editOurTeam('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  	.'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete"  onclick="deleteOurTeam('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			$actions .=' </div>'
	                  .'</div>';
			
			$row[] = $actions;	 

			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Team_model->countAll(),
						"recordsFiltered" => $this->Team_model->countFiltered($employeeName,$designation,$branch,$department),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}



 	
	//==================================== saveTeam function for Saving Team details - by Sajitha ================================
	public function saveTeam()
	{
		$id				= $this->input->post("hidID");
		$uploadDir		= '';
		$data 			= array();  
		$fullName  		= trim(addslashes($this->input->post('FullName')));
		$designation  	= trim(addslashes($this->input->post('Designation')));	
		$branchId  		= trim(addslashes($this->input->post('BranchId')));	
		$depId  		= trim(addslashes($this->input->post('DepId')));
		$quali  		= trim(addslashes($this->input->post('Qualification')));		
		$skills  		= trim(addslashes($this->input->post('Skills')));
		$exp  			= trim(addslashes($this->input->post('Experience')));				
		
		$status 		= $this->input->post('Status');
		
		$details  		= trim(addslashes($this->input->post('Details')));
		
		$db  			= new Database();
		$where   		= " UPPER(FullName)='".strtoupper($fullName)."' and BranchId={$branchId} and DepId={$depId} and Id!={$id}";
		$res 			= $db->checkExistance("sys_about_our_team", $where); // if exists id value will be returned.
	
		if($res)
		{
			echo json_encode(
				array("status" => false, 
					  "message"=>"This team person is already created and exists! Please change the team person's details."
					 )
			);
			exit;
		}
		
		// Team Person's Photo uploading starts
		if(isset($_FILES))
		{
			if(isset($_FILES["file_"]))
					{
						// tmp_name | name | type | size | error
						
						// -- Check here type  size and if any error.
						$fileName 	= $_FILES["file_"]['name'];
						$imgSize 	= $_FILES["file_"]['size'];
								
								// Check file size '5MB' or from max.image byte upload settings, in site settings module.
								if($imgSize < 5000000){}
								else{
											$msgError = "Product picture " . $fileName . " file is too large. Only 5 MB allowed!.";
											$errMSG   = "Error : Sorry," .$msgError;
									}
							
						$tempName	= $_FILES["file_"]['tmp_name'];
						$uploadDir	= "./uploads/team_photo/"; // this would be the upload file path. Exactly specify here or from the settings.
						
						// uploadImage is defined in site_helper (system/helper folder).
						$uploadResult = uploadImage($tempName, $uploadDir, "", $fileName, "", "",  TRUE, TRUE, false,$_POST["Pic_Name"]);
						if($uploadResult['status'] == 'true') {
							$teamPhoto = $uploadResult['fileName'];
							
						} else {
							echo json_encode(
									array("status" => false, 
										  "message"=>$uploadResult['message']
										 )
								);
							exit;
						}
				}
			else { 
				if($id==0) {
					$uploadDir	= "./uploads/team_photo/";
					$teamPhoto = "team.jpg";
				}
			}	
		} 
		
		
		// Profile Photo uploading ends
		
		if($id==0) // if add
		{    
			$data = array(
						'FullName' => $fullName,
						'Status' => $status,
						'Description' => $details,
						'Designation' => $designation,
						'BranchId' => $branchId,
						'DepId' => $depId,
						'Skills' => $skills,
						'Qualification' => $quali,
						'Experience' => $exp,
						'ProfilePhotoPath' => $uploadDir,
						'ProfilePhoto' => $teamPhoto,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),						
					);
				
		}
		else { // if edit
				$data = array(
						'FullName' => $fullName,
						'Status' => $status,
						'Description' => $details,
						'Designation' => $designation,
						'BranchId' => $branchId,
						'DepId' => $depId,
						'Skills' => $skills,
						'Qualification' => $quali,
						'Experience' => $exp,
						'Status' => $status,
						'ModifiedOn' => date('Y-m-d H:i:s'),
						'ModifiedBy'	=> $_SESSION['ADMIN_ID'],						
						);
				if($teamPhoto !='' && $uploadDir != '') {
					$data += [ "ProfilePhoto" => $teamPhoto, "ProfilePhotoPath" => $uploadDir ];
				 	//deleting existing profile photo and thumbnail		
					$db  				= new Database();
					$teamPhoto	 		= $db->getFieldValueById("sys_about_our_team", "ProfilePhoto", "Id='{$id}'");	
					$teamPhotoPath 		= $db->getFieldValueById("sys_about_our_team", "ProfilePhotoPath", "Id='{$id}'");	
					if($teamPhoto != 'team.jpg' && (file_exists($teamPhotoPath.$teamPhoto))) {
						unlink($teamPhotoPath.$teamPhoto);
						if(file_exists($teamPhotoPath."thumb/".$teamPhoto))
							unlink($teamPhotoPath."thumb/".$teamPhoto);
					}	
				}			
		}
		$res	= $this->Team_model->saveData($data, $id);
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$moduleTab = "Our Team";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$resData    = array(
								"status" => true,
								'message' => 'Our Team details saved successfully!!'
						 );
		$resData = (object) array_merge((array) $resData, (array) $data);					
		echo json_encode($resData);
	}
	
	//=========================== getEditOurTeam function used for getting a Our Team details by id from sys_about_our_team table===========================	 
	public function getEditOurTeam($id)
	{
		$data = $this->Team_model->getById($id);
		echo json_encode($data);
	}
	
	//==================================== Function to get Team Photo details by Id - by Sajitha ================================
	public function getTeamPhoto($id)
	{
		$db  				= new Database();
		$profilePhoto 		= $db->getFieldValueById("sys_about_our_team", "ProfilePhoto", "Id='{$id}'");	
		$profilePhotoPath 	= $db->getFieldValueById("sys_about_our_team", "ProfilePhotoPath", "Id='{$id}'");	
		if(file_exists($profilePhotoPath."thumb/".$profilePhoto)) 
			echo 1;
		else
			echo 0;
	}
	
	//=========================== deleteOurTeam function used for deleting Our Team details by id from sys_about_our_team table===========================	 
	public function deleteOurTeam($id)
	{
        //deleting existing team photo and thumbnail		
		$db  				= new Database();
		$profilePhoto 		= $db->getFieldValueById("sys_about_our_team", "ProfilePhoto", "Id='{$id}'");	
		$profilePhotoPath 	= $db->getFieldValueById("sys_about_our_team", "ProfilePhotoPath", "Id='{$id}'");	
		if($profilePhoto != 'team.jpg' && (file_exists($profilePhotoPath.$profilePhoto))) {
			unlink($profilePhotoPath.$profilePhoto);
			if(file_exists($profilePhotoPath."thumb/".$profilePhoto))
				unlink($profilePhotoPath."thumb/".$profilePhoto);
		}
		
	   $res    =  $this->Team_model->deleteData($id);
       $resData =array();
	   
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$moduleTab = "Our Team";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		
	   if($res)
	   {
		    $resData    = array(
								"status" => true,
								'message' => 'Team Person deleted successfully!!'
						 );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Team Person!!"
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData); 
    }    
	
	//--------------------------- Our Directors  module                                                                                                        ------------------
	public function our_directors($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	=	"Our Directors"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]			= $id;
		$this->load->view("brq-admin/our-directors", $data);
	}	
	
	//==================================== directorsList function to get DataTables of Our Directors  - by Sajitha ================================
	public function directorsList($subid="")
	{
		$directorsName		= $this->input->post('directorsName');
		$designation		= $this->input->post('designation');
		$list 		= $this->Directors_model->getDataTables($directorsName,$designation);
		
		$data 		= array();
        $data1 		= array();
		$no 		= $_POST['start']; 
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();	

			$photoPath 			= base_url().$data->ProfilePhotoPath.'thumb/';
			$profilePhoto 	   	= $photoPath.$data->ProfilePhoto;
			$profilePhotoLarge 	= base_url().$data->ProfilePhotoPath.$data->ProfilePhoto;
			if(!(file_exists($data->ProfilePhotoPath.'thumb/'.$data->ProfilePhoto))) {			
				$profilePhoto 		= base_url().'./uploads/directors_photo/thumb/directors.jpg';
				$directorsPhotoLarge 	= base_url().'./uploads/directors_photo/directors.jpg';
			}
			
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$data->FullName.'\');" ><img style="margin-left:25px;"   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';	
			
			$row[] = stripslashes($data->FullName);
			$row[] = stripslashes($data->Designation);
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			if($data->ModifiedOn == null)
				$row[] = '';
			else
				$row[] = date('d/m/Y h:i:s a', strtotime($data->ModifiedOn));
			$row[] =  $data->ModifiedBy;
			$permission = $_SESSION['GROUP_PERMISSION'];
		
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			// print_r($userGroupPermission);
			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
					  if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
					  {
						  $actions .='<div class="dropdown-menu" role="menu" style="">'
						.'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editOurDirectors('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
	                  
					}
					if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
					{
						$actions .='<div class="dropdown-divider"></div>'
						.'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editOurDirectors('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
					 }
					if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
					{
						$actions .= '<div class="dropdown-divider"></div>'
						.'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete"  onclick="deleteOurDirectors('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
					}
					$actions .=' </div>'
	                  .'</div>';
			
			$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Directors_model->countAll(),
						"recordsFiltered" => $this->Directors_model->countFiltered($directorsName,$designation),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}

 	
	//==================================== saveDirectors function for Saving Directors details - by Sajitha ================================
	public function saveDirectors()
	{
		$id				= $this->input->post("hidID");
		$uploadDir		= '';
		$data 			= array();  
		$fullName  		= trim(addslashes($this->input->post('FullName')));
		$designation  	= trim(addslashes($this->input->post('Designation')));
		$quali  		= trim(addslashes($this->input->post('Qualification')));
		$exp  			= trim(addslashes($this->input->post('Experience')));				
		
		$status 		= $this->input->post('Status');
		
		$details  		= trim(addslashes($this->input->post('Details')));
		
		$db  			= new Database();
		$where   		= " UPPER(FullName)='".strtoupper($fullName)."' and Id!={$id}";
		$res 			= $db->checkExistance("sys_about_our_directors", $where); // if exists id value will be returned.
	
		if($res)
		{
			echo json_encode(
				array("status" => false, 
					  "message"=>"This director is already created and exists! Please change the director's details."
					 )
			);
			exit;
		}
		
		// Director's Photo uploading starts
		if(isset($_FILES))
		{
			if(isset($_FILES["file_"]))
					{
						// tmp_name | name | type | size | error
						
						// -- Check here type  size and if any error.
						$fileName 	= $_FILES["file_"]['name'];
						$imgSize 	= $_FILES["file_"]['size'];
								
								// Check file size '5MB' or from max.image byte upload settings, in site settings module.
								if($imgSize < 5000000){}
								else{
											$msgError = "Product picture " . $fileName . " file is too large. Only 5 MB allowed!.";
											$errMSG   = "Error : Sorry," .$msgError;
									}
							
						$tempName	= $_FILES["file_"]['tmp_name'];
						$uploadDir	= "./uploads/directors_photo/"; // this would be the upload file path. Exactly specify here or from the settings.
						
						// uploadImage is defined in site_helper (system/helper folder).
						$uploadResult = uploadImage($tempName, $uploadDir, "", $fileName, "", "",  TRUE, TRUE, false,$_POST["Pic_Name"]);
						if($uploadResult['status'] == 'true') {
							$directorsPhoto = $uploadResult['fileName'];
							
						} else {
							echo json_encode(
									array("status" => false, 
										  "message"=>$uploadResult['message']
										 )
								);
							exit;
						}
				}
			else { 
				if($id==0) {
					$uploadDir	= "./uploads/directors_photo/";
					$directorsPhoto = "directors.jpg";
				}
			}	
		} 
		
		
		// Profile Photo uploading ends
		
		if($id==0) // if add
		{    
			$data = array(
						'FullName' => $fullName,
						'Status' => $status,
						'Description' => $details,
						'Designation' => $designation,
						'Qualification' => $quali,
						'ProfilePhotoPath' => $uploadDir,
						'ProfilePhoto' => $directorsPhoto,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),						
					);
				
		}
		else { // if edit
				$data = array(
						'FullName' => $fullName,
						'Status' => $status,
						'Description' => $details,
						'Designation' => $designation,
						'Qualification' => $quali,
						'Status' => $status,
						'ModifiedOn' => date('Y-m-d H:i:s'),
						'ModifiedBy'	=> $_SESSION['ADMIN_ID'],						
						);
				if($directorsPhoto !='' && $uploadDir != '') {
					$data += [ "ProfilePhoto" => $directorsPhoto, "ProfilePhotoPath" => $uploadDir ];
				 	//deleting existing profile photo and thumbnail		
					$db  				= new Database();
					$directorsPhoto	 		= $db->getFieldValueById("sys_about_our_directors", "ProfilePhoto", "Id='{$id}'");	
					$directorsPhotoPath 		= $db->getFieldValueById("sys_about_our_directors", "ProfilePhotoPath", "Id='{$id}'");	
					if($directorsPhoto != 'directors.jpg' && (file_exists($directorsPhotoPath.$directorsPhoto))) {
						unlink($directorsPhotoPath.$directorsPhoto);
						if(file_exists($directorsPhotoPath."thumb/".$directorsPhoto))
							unlink($directorsPhotoPath."thumb/".$directorsPhoto);
					}	
				}			
		}
		$res	= $this->Directors_model->saveData($data, $id);
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$moduleTab = "Our Directors";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$resData    = array(
								"status" => true,
								'message' => 'Our Directors details saved successfully!!'
						 );
		$resData = (object) array_merge((array) $resData, (array) $data);					
		echo json_encode($resData);
	}
	
	//=========================== getEditOurdirectors function used for getting a Our Directors details by id from sys_about_our_directors table===========================	 
	public function getEditOurDirectors($id)
	{
		$data = $this->Directors_model->getById($id);
		echo json_encode($data);
	}
	
	//==================================== Function to get Directors Photo details by Id - by Sajitha ================================
	public function getDirectorsPhoto($id)
	{
		$db  				= new Database();
		$profilePhoto 		= $db->getFieldValueById("sys_about_our_directors", "ProfilePhoto", "Id='{$id}'");	
		$profilePhotoPath 	= $db->getFieldValueById("sys_about_our_directors", "ProfilePhotoPath", "Id='{$id}'");	
		if(file_exists($profilePhotoPath."thumb/".$profilePhoto)) 
			echo 1;
		else
			echo 0;
	}
	
	//=========================== deleteOurDirectors function used for deleting Our Directors details by id from sys_about_our_directors table===========================	 
	public function deleteOurDirectors($id)
	{
        //deleting existing directors photo and thumbnail		
		$db  				= new Database();
		$profilePhoto 		= $db->getFieldValueById("sys_about_our_directors", "ProfilePhoto", "Id='{$id}'");	
		$profilePhotoPath 	= $db->getFieldValueById("sys_about_our_directors", "ProfilePhotoPath", "Id='{$id}'");	
		if($profilePhoto != 'directors.jpg' && (file_exists($profilePhotoPath.$profilePhoto))) {
			unlink($profilePhotoPath.$profilePhoto);
			if(file_exists($profilePhotoPath."thumb/".$profilePhoto))
				unlink($profilePhotoPath."thumb/".$profilePhoto);
		}
		
	   $res    =  $this->Directors_model->deleteData($id);
       $resData =array();
	   
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$moduleTab = "Our Directors";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		
	   if($res)
	   {
		    $resData    = array(
								"status" => true,
								'message' => "Director's details deleted successfully!!"
						 );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Director!!"
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData); 
    }    
	
	// Function for loading the Common Site Settings page - By Sajitha //	
	public function site_settings()
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	="site_settings"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$db = new Database();
		

		$timeZoneId				=	"";	
		$timeZoneValue			=	"";
		$adController			=	"";
		$clientController 		=	"";
		$payrollController		=	"";
		$hrController			=	"";
		$leadController			=	"";
		$accountsController		=	"";
		$mobileAppController	=	"";
		$currencyId				=	"";
		$address 				=	"";
		$officePhone			=	"";
		$whatsApp				=	"";
		$supportNumber			=	"";
		$salesEmail				=	"";
		$infoEmail				=	"";
		$noReplyEmail			=	"";
		$noReplyPassword 		=	"";
		$companyName			=	"";
		$designedBy				=	"";
		$maxExecutionTime		=	"";
		$memoryLimit			=	"";
		$postMaxSize			=	"";
		$uploadMaxFileSize		=	"";
		$otpExpTime				=	"";
		$activeExpTime			=	"";
		$blockUserTimeframe			=	"";
		$InvoiceCreditPeriod	="";

		
		$timeZoneId				=	$db->getFieldValueById("sys_settings", "TimeZoneId", "Id=1 AND Status=1");
		$timeZoneValue			=	$db->getFieldValueById("sys_timezone", "TimeZone", "Id=".$timeZoneId);
		$adController			=	$db->getFieldValueById("sys_settings", "AdminController", "Id=1 AND Status=1");
		$clientController 		=	$db->getFieldValueById("sys_settings", "ClientController", "Id=1 AND Status=1");
		$payrollController		=	$db->getFieldValueById("sys_settings", "PayrollController", "Id=1 AND Status=1");
		$hrController			=	$db->getFieldValueById("sys_settings", "HrController", "Id=1 AND Status=1");
		$leadController			=	$db->getFieldValueById("sys_settings", "LeadController", "Id=1 AND Status=1");
		$accountsController		=	$db->getFieldValueById("sys_settings", "AccountController", "Id=1 AND Status=1");
		$mobileAppController	=	$db->getFieldValueById("sys_settings", "MobileAppController", "Id=1 AND Status=1");
		$currencyId				=	$db->getFieldValueById("sys_settings", "CurrencyId", "Id=1 AND Status=1");
		$address 				=	$db->getFieldValueById("sys_settings", "Address", "Id=1 AND Status=1");
		$officePhone			=	$db->getFieldValueById("sys_settings", "OfficePhone", "Id=1 AND Status=1");
		$whatsApp				=	$db->getFieldValueById("sys_settings", "WhatsappNo", "Id=1 AND Status=1");
		$supportNumber			=	$db->getFieldValueById("sys_settings", "SupportTolFreeNumber", "Id=1 AND Status=1");
		$salesEmail				=	$db->getFieldValueById("sys_settings", "SalesEmail", "Id=1 AND Status=1");
		$infoEmail				=	$db->getFieldValueById("sys_settings", "InfoEmail", "Id=1 AND Status=1");
		$noReplyEmail			=	$db->getFieldValueById("sys_settings", "NoReplyEmail", "Id=1 AND Status=1");
		$noReplyPassword 		=	$db->getFieldValueById("sys_settings", "NoReplyPassword", "Id=1 AND Status=1");
		$companyName			=	$db->getFieldValueById("sys_settings", "CompanyName", "Id=1 AND Status=1");
		$designedBy				=	$db->getFieldValueById("sys_settings", "BottomDesingedAndDevlopedBy", "Id=1 AND Status=1");
		$maxExecutionTime		=	$db->getFieldValueById("sys_settings", "MaxExecutionTime", "Id=1 AND Status=1");
		$memoryLimit			=	$db->getFieldValueById("sys_settings", "MemoryLimit", "Id=1 AND Status=1");
		$postMaxSize			=	$db->getFieldValueById("sys_settings", "PostMaxSize", "Id=1 AND Status=1");
		$uploadMaxFileSize		=	$db->getFieldValueById("sys_settings", "UploadMaxFileSize", "Id=1 AND Status=1");
		$serviceGST				=	$db->getFieldValueById("sys_settings", "ServiceGSTPercentage", "Id=1 AND Status=1");
		$softwareGST			=	$db->getFieldValueById("sys_settings", "SoftwareGSTPercentage", "Id=1 AND Status=1");
		$blockUserTimeframe		=	$db->getFieldValueById("sys_settings", "BlockUserTimeframe", "Id=1 AND Status=1");
		$siteFooterText			=	$db->getFieldValueById("sys_settings", "SiteFooterText", "Id=1 AND Status=1");
		$adminPanelFooterText	=	$db->getFieldValueById("sys_settings", "AdminPanelFooterText", "Id=1 AND Status=1");
		
		$otpExpTime				=	$db->getFieldValueById("sys_settings", "OTPExpiryTime", "Id=1 AND Status=1");
		$activeExpTime				=	$db->getFieldValueById("sys_settings", "AcivationLinkExpiryTime", "Id=1 AND Status=1");
		$InvoiceCreditPeriod		=	$db->getFieldValueById("sys_settings", "InvoiceCreditPeriod", "Id=1 AND Status=1");
		$data 					= array();
		$headTitleAddText		= " - Settings : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["timeZoneValue"]	 		=$timeZoneValue; // from table.
		$data["adController"]	 		=$adController; // from table.
		$data["clientController"]	 	=$clientController; // from table.
		$data["payrollController"]	 	=$payrollController; // from table.
		$data["hrController"]	 	 	=$hrController; // from table.
		$data["leadController"]	 	 	=$leadController; // from table.
		$data["accountsController"]	 	=$accountsController; // from table.
		$data["mobileAppController"]	=$mobileAppController; // from table.
		$data["currencyId"]	 	 	    =$currencyId; // from table.
		$data["address"]	 	 		=$address; // from table.
		$data["officePhone"]	 	 	=$officePhone; // from table.
		$data["whatsApp"]	 			=$whatsApp; // from table.
		$data["supportNumber"]			=$supportNumber; // from table.
		$data["salesEmail"]	 	 		=$salesEmail; // from table.
		$data["infoEmail"]	 	 		=$infoEmail; // from table.
		$data["noReplyEmail"]	 	 	=$noReplyEmail; // from table.
		$data["noReplyPassword"]	 	=$noReplyPassword; // from table.
		$data["companyName"]			=$companyName; // from table.
		$data["designedBy"]	 	 		=$designedBy; // from table.
		$data["maxExecutionTime"]	 	=$maxExecutionTime; // from table.
		$data["memoryLimit"]	 		=$memoryLimit; // from table.
		$data["postMaxSize"]	 		=$postMaxSize; // from table.
		$data["uploadMaxFileSize"]	 	=$uploadMaxFileSize; // from table.
		$data["serviceGST"]	 			=$serviceGST."%"; // from table.
		$data["softwareGST"]	 		=$softwareGST."%"; // from table.
		
		$data["siteFooterText"]	 		=$siteFooterText; // from table.
		$data["adminPanelFooterText"]	=$adminPanelFooterText; // from table.
		$data["blockUserTimeframe"]		=$blockUserTimeframe;
		$data["otpExpTime"]	 	 		=$otpExpTime; // from table.
		$data["activeExpTime"]	 	 	=$activeExpTime; // from table.
		$data["InvoiceCreditPeriod"]	 	 	=$InvoiceCreditPeriod; // from table.

		$this->load->view("brq-admin/site-settings", $data);
	}
	
	// Function for loading the SMS API Settings page - By Sajitha //	
	public function sms_api_settings()
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	="sms_api_settings"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
				
		$db = new Database();

		$apiURL			=	"";
		$userName		=	"";
		$password 		=	"";
		$entityId		=	"";
		$port			=	"";
		$deliveryReportStatus	=	"";
		
		$apiURL					=	$db->getFieldValueById("sys_sms_api_settings", "ApiUrl", "Id=1 AND Status=1");
		$userName				=	$db->getFieldValueById("sys_sms_api_settings", "UserName", "Id=1 AND Status=1");
		$password				=	$db->getFieldValueById("sys_sms_api_settings", "Password", "Id=1 AND Status=1");
		$entityId 				=	$db->getFieldValueById("sys_sms_api_settings", "EntityId", "Id=1 AND Status=1");
		$deliveryReportStatus	=	$db->getFieldValueById("sys_sms_api_settings", "DeliveryReportStatus", "Id=1 AND Status=1");
		$port				    =	$db->getFieldValueById("sys_sms_api_settings", "Port", "Id=1 AND Status=1");
		$sender				    =	$db->getFieldValueById("sys_sms_api_settings", "Sender", "Id=1 AND Status=1");
		
		$data 					= array();
		$headTitleAddText		= " - SMS API Settings : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["apiURL"]	 				=$apiURL; // from table.
		$data["userName"]	 			=$userName; // from table.
		//$data["password"]	 			=$password; // from table. password is not Decrypted
		
		$data["SMSpassword"]	 		= encrypt_decrypt('D',$password); // from table. 
		 
		$data["entityId"]	 			=$entityId; // from table.
		$data["port"]	 				=$port; // from table.
		$data["sender"]	 				=$sender; // from table.
		
		$data["deliveryReportStatus"]	=$deliveryReportStatus; // from table.
		
		$this->load->view("brq-admin/sms-api-settings", $data);
	}
	
	// ========================= saveSMSAPISettings() for saving SMS API Settings datas - by Sajitha ================================
	public function saveSMSAPISettings()
	{
		$apiURL					=	trim($_POST["API_URL"]);
		$portNo					=   trim($_POST["Port_No"]);
		$sender					= 	trim($_POST["Sender_Id"]);
		$userName				=	trim($_POST["User_Name"]);
		$password 				=	trim($_POST["Password"]);
		$entityId				=	trim($_POST["Entity_Id"]);
		$deliveryReportStatus	=	trim($_POST["Delivery_Report_Status"]);
		
		$apiURL					=	str_replace("'","\'",$apiURL); // replacing the quotes
		$userName				=	str_replace("'","\'",$userName); 
		$password 				=	str_replace("'","\'",$password);
		$entityId				=	str_replace("'","\'",$entityId);
		$deliveryReportStatus	=	str_replace("'","\'",$deliveryReportStatus);
		
		$apiURL					=	htmlspecialchars($apiURL);
		$userName				=	htmlspecialchars($userName);
		$password 				=	encrypt_decrypt('E',htmlspecialchars($password));
		$entityId				=	htmlspecialchars($entityId);
		$deliveryReportStatus	=	htmlspecialchars($deliveryReportStatus);
		
		$resData = array();
		
		
		if(empty($apiURL))
			{
				echo "Error! API URL should not be blank.";
				exit;
			}
			
		if(empty($portNo))
			{
				
				echo "Error! Port no. should not be blank.";
				exit;
			
			}
			
		if(empty($sender))
		{
			echo "Error! sender id  should not be blank.";
			exit;
			
		}	
				
			
		if(empty($userName))
			{
				echo "Error! User Name should not be blank.";
				exit;
			}
		if(empty($password))
			{
				echo "Error! Password should not be blank.";
				exit;
			}	
		if(empty($entityId))
			{
				echo "Error! Entity Id should not be blank.";
				exit;
			}	
		if(empty($deliveryReportStatus) && $deliveryReportStatus!=0)
			{
				echo "Error! Delivery Report Status should not be blank.";
				exit;
			}
		
		$data = array(
						'ApiUrl'				=> $apiURL,
						'Port'					=> $portNo,
						'Sender'				=> $sender,
						'UserName'				=> $userName,
						'Password' 				=> $password,
						'EntityId'				=> $entityId,
						'DeliveryReportStatus'	=> $deliveryReportStatus,
						'ModifiedBy' 			=> $_SESSION['ADMIN_ID'],
						'ModifiedOn' 			=> date('Y-m-d H:i:s')
						
					);
					
		$this->db->update('sys_sms_api_settings', $data, array('Id' =>1));
		echo "success";
	}
	
	/*
	// Function for loading the Email API Settings page - By Sajitha //	
	public function email_api_settings()
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	="sms_api_settings"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
				
		$db = new Database();
		
		$Type				=	"";
		$SMTPAuth			=	"";
		$SMTPSecure			=	"";
		$SMTPHost			=	"";
		$SMTPPort			=	"";
		$userName 			=	"";
		$password 			=	"";
		$EmailErrorReport	=	"";
		$IMAPHost			=	"";
		$IMAPUserName		=	"";
		$IMAPPort			=	"";
		$IMAPMailBox		=	"";
		$IMAPPath			=	"";
		$IMAPServerEncoding	=	"";
		$IMAPAttachementDir =	"";
		
		$Type						=	$db->getFieldValueById("sys_email_api_settings", "Type", "Id=1 AND Status=1");
		$SMTPAuth					=	$db->getFieldValueById("sys_email_api_settings", "SMTPAuth", "Id=1 AND Status=1");
		$SMTPSecure					=	$db->getFieldValueById("sys_email_api_settings", "SMTPSecure", "Id=1 AND Status=1");
		$SMTPHost					=	$db->getFieldValueById("sys_email_api_settings", "SMTPHost", "Id=1 AND Status=1");
		$SMTPPort					=	$db->getFieldValueById("sys_email_api_settings", "SMTPPort", "Id=1 AND Status=1");
		$userName					=	$db->getFieldValueById("sys_email_api_settings", "UserName", "Id=1 AND Status=1");
		$password					=	$db->getFieldValueById("sys_email_api_settings", "Password", "Id=1 AND Status=1");
		$EmailErrorReport 			=	$db->getFieldValueById("sys_email_api_settings", "EmailErrorReport", "Id=1 AND Status=1");
		$IMAPHost					=	$db->getFieldValueById("sys_email_api_settings", "IMAPHost", "Id=1 AND Status=1");
		$IMAPUserName				=	$db->getFieldValueById("sys_email_api_settings", "IMAPUserName", "Id=1 AND Status=1");
		$IMAPPort					=	$db->getFieldValueById("sys_email_api_settings", "IMAPPort", "Id=1 AND Status=1");
		$IMAPMailBox				=	$db->getFieldValueById("sys_email_api_settings", "IMAPMailBox", "Id=1 AND Status=1");
		$IMAPPath					=	$db->getFieldValueById("sys_email_api_settings", "IMAPPath", "Id=1 AND Status=1");
		$IMAPServerEncoding			=	$db->getFieldValueById("sys_email_api_settings", "IMAPServerEncoding", "Id=1 AND Status=1");
		$IMAPAttachementDir 		=	$db->getFieldValueById("sys_email_api_settings", "IMAPAttachementDir", "Id=1 AND Status=1");
		
		$data 					= array();
		$headTitleAddText		= " - Email API Settings : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["Type"]	 			=$Type; // from table.
		$data["SMTPAuth"]	 		=$SMTPAuth; // from table.
		$data["SMTPSecure"]	 		=$SMTPSecure; // from table.
		$data["SMTPHost"]	 		=$SMTPHost; // from table.
		$data["SMTPPort"]	 		=$SMTPPort; // from table.
		$data["userName"]	 		=$userName; // from table.
		$data["password"]	 		=encrypt_decrypt('D',$password); // from table.
		$data["EmailErrorReport"]	=$EmailErrorReport; // from table.
		$data["IMAPHost"]			=$IMAPHost; // from table.
		$data["IMAPUserName"]	 	=$IMAPUserName; // from table.
		$data["IMAPPort"]	 		=$IMAPPort; // from table.
		$data["IMAPMailBox"]	 	=$IMAPMailBox; // from table.
		$data["IMAPPath"]	 		=$IMAPPath; // from table.
		$data["IMAPServerEncoding"]	=$IMAPServerEncoding; // from table.
		$data["IMAPAttachementDir"]	=$IMAPAttachementDir; // from table.
		
		$this->load->view("brq-admin/email-api-settings", $data);
	}
	
	// ========================= saveEmailAPISettings() for saving Email API Settings datas - by Sajitha ================================
	public function saveEmailAPISettings()
	{
		$Type					=	trim($_POST["Type"]);
		$SMTPAuth				=	trim($_POST["SMTPAuth"]);
		$SMTPSecure				=	trim($_POST["SMTPSecure"]);
		$SMTPPort				=	trim($_POST["SMTPPort"]);
		$SMTPHost				=	trim($_POST["SMTPHost"]);
		$userName				=	trim($_POST["User_Name"]);
		$password 				=	trim($_POST["Password"]);
		$EmailErrorReport		=	trim($_POST["EmailErrorReport"]);
		$IMAPHost				=	trim($_POST["IMAPHost"]);
		$IMAPUserName			=	trim($_POST["IMAPUserName"]);
		$IMAPPort				=	trim($_POST["IMAPPort"]);
		$IMAPMailBox			=	trim($_POST["IMAPMailBox"]);
		$IMAPPath				=	trim($_POST["IMAPPath"]);
		$IMAPServerEncoding 	=	trim($_POST["IMAPServerEncoding"]);
		$IMAPAttachementDir		=	trim($_POST["IMAPAttachementDir"]);
		
		$Type					=	str_replace("'","\'",$Type); // replacing the quotes
		$SMTPAuth				=	str_replace("'","\'",$SMTPAuth); // replacing the quotes
		$SMTPSecure				=	str_replace("'","\'",$SMTPSecure);
		$SMTPHost				=	str_replace($_POST["SMTPHost"]);
		$SMTPPort				=	str_replace("'","\'",$SMTPPort); 		
		$userName				=	str_replace("'","\'",$userName); 		
		$password 				=	str_replace("'","\'",$password);
		$EmailErrorReport		=	str_replace("'","\'",$EmailErrorReport);
		$IMAPHost				=	str_replace("'","\'",$IMAPHost);
		$IMAPUserName			=	str_replace("'","\'",$IMAPUserName);
		$IMAPPort				=	str_replace("'","\'",$IMAPPort);
		$IMAPMailBox			=	str_replace("'","\'",$IMAPMailBox);
		$IMAPPath				=	str_replace("'","\'",$IMAPPath);
		$IMAPServerEncoding		=	str_replace("'","\'",$IMAPServerEncoding);
		$IMAPAttachementDir		=	str_replace("'","\'",$IMAPAttachementDir);
		
		$Type					=	htmlspecialchars($Type);
		$SMTPAuth				=	htmlspecialchars($SMTPAuth);
		$SMTPSecure				=	htmlspecialchars($SMTPSecure);
		$SMTPHost				=	htmlspecialchars($_POST["SMTPHost"]);
		$SMTPPort				=	htmlspecialchars($SMTPPort);
		$userName				=	htmlspecialchars($userName);
		$password 				=	encrypt_decrypt('E',htmlspecialchars($password));
		$EmailErrorReport		=	htmlspecialchars($EmailErrorReport);
		$IMAPHost				=	htmlspecialchars($IMAPHost);
		$IMAPUserName			=	htmlspecialchars($IMAPUserName);
		$IMAPPort				=	htmlspecialchars($IMAPPort);
		$IMAPMailBox			=	htmlspecialchars($IMAPMailBox);
		$IMAPPath				=	htmlspecialchars($IMAPPath);
		$IMAPServerEncoding		=	htmlspecialchars($IMAPServerEncoding);
		$IMAPAttachementDir		=	htmlspecialchars($IMAPAttachementDir);
		
		$resData = array();
		
		if(empty($Type))
			{
				echo "Error! Type should not be blank.";
				exit;
			}
		if(empty($SMTPAuth))
			{
				echo "Error! SMTP Auth should not be blank.";
				exit;
			}
		if(empty($SMTPSecure))
			{
				echo "Error! SMTP Secure should not be blank.";
				exit;
			}
		if(empty($SMTPHost))
			{
				echo "Error! SMTP Host should not be blank.";
				exit;
			}	
		if(empty($SMTPPort))
			{
				echo "Error! SMTP Port should not be blank.";
				exit;
			}
		if(empty($userName))
			{
				echo "Error! user Name should not be blank.";
				exit;
			}	
		if(empty($password))
			{
				echo "Error! Password should not be blank.";
				exit;
			}	
		if($EmailErrorReport == '')
			{
				echo "Error! Email Error Report should not be blank.";
				exit;
			}
		if(empty($IMAPHost))
			{
				echo "Error! IMAP Host should not be blank.";
				exit;
			}
		if(empty($IMAPUserName))
			{
				echo "Error! IMAP User Name should not be blank.";
				exit;
			}	
		if(empty($IMAPPort))
			{
				echo "Error! IMAP Port should not be blank.";
				exit;
			}
		if(empty($IMAPMailBox))
			{
				echo "Error! IMAP Mail Box should not be blank.";
				exit;
			}	
		if(empty($IMAPPath))
			{
				echo "Error! IMAP Path should not be blank.";
				exit;
			}	
		if(empty($IMAPServerEncoding))
			{
				echo "Error! IMAP Server Encoding should not be blank.";
				exit;
			}	
		if(empty($IMAPAttachementDir))
			{
				echo "Error! IMAP Attachement Dir should not be blank.";
				exit;
			}		
			
		
		$data = array(
						'Type'					=> $Type,
						'SMTPSecure'			=> $SMTPSecure,
						'SMTPAuth'				=> $SMTPAuth,
						'SMTPHost'				=> $SMTPHost,
						'SMTPPort'				=> $SMTPPort,
						'UserName'				=> $userName,
						'Password' 				=> $password,
						'EmailErrorReport'		=> $EmailErrorReport,
						'IMAPHost'				=> $IMAPHost,
						'IMAPUserName'			=> $IMAPUserName,
						'IMAPPort'				=> $IMAPPort,
						'IMAPMailBox'			=> $IMAPMailBox,
						'IMAPPath'				=> $IMAPPath,
						'IMAPServerEncoding'	=> $IMAPServerEncoding,
						'IMAPAttachementDir'	=> $IMAPAttachementDir,
						'ModifiedBy' 			=> $_SESSION['ADMIN_ID'],
						'ModifiedOn' 			=> date('Y-m-d H:i:s')
						
					);
					
		$this->db->update('sys_email_api_settings', $data, array('Id' =>1));
		echo "success";
	}*/
	
	
	// -------------------------- email_api_settings function to add/edit/delete all the Email API Settings ----------------
	public function email_api_settings($id="",$moduleTab="payment_api_settings")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["subMenuId"]			= $id;
		$this->load->view("brq-admin/email-api-settings", $data);
	} 
	//==================================== emailAPISettingsList function to get DataTables of Email API Settings  - by Sajitha ================================
	public function emailAPISettingsList($subid="")
	{
        $list 	= $this->EmailAPISettings_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = $data->Type;
			$row[] = $data->UserName;
			$row[] = $data->SMTPHost;
			$row[] = $data->SMTPPort;
			if($data->Status == "1") {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == "0") {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] = $data->CreatedBy;
	
			$actions= $this->useractionpermission($subid,$data->Id);
			$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->EmailAPISettings_model->countAll(),
						"recordsFiltered" => $this->EmailAPISettings_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	} 
	
	//==================================== saveEmailAPI function for Saving Email API Settings details - by Sajitha ================================
	public function saveEmailAPI()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		
		$Type					=	trim($this->input->post("Type"));
		$SMTPAuth				=	trim($this->input->post("SMTPAuth"));
		$SMTPSecure				=	trim($this->input->post("SMTPSecure"));
		$SMTPPort				=	trim($this->input->post("SMTPPort"));
		$SMTPHost				=	trim($this->input->post("SMTPHost"));
		$userName				=	trim($this->input->post("UserName"));
		$password 				=	trim($this->input->post("Password"));
		$EmailErrorReport		=	trim($this->input->post("EmailErrorReport"));
		$IMAPHost				=	trim($this->input->post("IMAPHost"));
		$IMAPUserName			=	trim($this->input->post("IMAPUserName"));
		$IMAPPort				=	trim($this->input->post("IMAPPort"));
		$IMAPMailBox			=	trim($this->input->post("IMAPMailBox"));
		$IMAPPath				=	trim($this->input->post("IMAPPath"));
		$IMAPServerEncoding 	=	trim($this->input->post("IMAPServerEncoding"));
		$IMAPAttachementDir		=	trim($this->input->post("IMAPAttachementDir")); 
		$Status					=	trim($this->input->post("Status"));
		
		$Type					=	str_replace("'","\'",$Type); // replacing the quotes
		$SMTPAuth				=	str_replace("'","\'",$SMTPAuth); // replacing the quotes
		$SMTPSecure				=	str_replace("'","\'",$SMTPSecure);
		$SMTPHost				=	str_replace($_POST["SMTPHost"]);
		$SMTPPort				=	str_replace("'","\'",$SMTPPort); 		
		$userName				=	str_replace("'","\'",$userName); 		
		$password 				=	str_replace("'","\'",$password);
		$EmailErrorReport		=	str_replace("'","\'",$EmailErrorReport);
		$IMAPHost				=	str_replace("'","\'",$IMAPHost);
		$IMAPUserName			=	str_replace("'","\'",$IMAPUserName);
		$IMAPPort				=	str_replace("'","\'",$IMAPPort);
		$IMAPMailBox			=	str_replace("'","\'",$IMAPMailBox);
		$IMAPPath				=	str_replace("'","\'",$IMAPPath);
		$IMAPServerEncoding		=	str_replace("'","\'",$IMAPServerEncoding);
		$IMAPAttachementDir		=	str_replace("'","\'",$IMAPAttachementDir);
		
		$Type					=	htmlspecialchars($Type);
		$SMTPAuth				=	htmlspecialchars($SMTPAuth);
		$SMTPSecure				=	htmlspecialchars($SMTPSecure);
		$SMTPHost				=	htmlspecialchars($_POST["SMTPHost"]);
		$SMTPPort				=	htmlspecialchars($SMTPPort);
		$userName				=	htmlspecialchars($userName);
		$password 				=	encrypt_decrypt('E',htmlspecialchars($password));
		$EmailErrorReport		=	htmlspecialchars($EmailErrorReport);
		$IMAPHost				=	htmlspecialchars($IMAPHost);
		$IMAPUserName			=	htmlspecialchars($IMAPUserName);
		$IMAPPort				=	htmlspecialchars($IMAPPort);
		$IMAPMailBox			=	htmlspecialchars($IMAPMailBox);
		$IMAPPath				=	htmlspecialchars($IMAPPath);
		$IMAPServerEncoding		=	htmlspecialchars($IMAPServerEncoding);
		$IMAPAttachementDir		=	htmlspecialchars($IMAPAttachementDir);
		
		
		$db  			= new Database();
		$where   		= " UPPER(`UserName`)='".strtoupper($userName)."' and UPPER(`Type`)='".strtoupper($Type)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("sys_email_api_settings", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Email API Setting is already created and exists! Please change the Username / Type."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'Type'					=> $Type,
						'SMTPSecure'			=> $SMTPSecure,
						'SMTPAuth'				=> $SMTPAuth,
						'SMTPHost'				=> $SMTPHost,
						'SMTPPort'				=> $SMTPPort,
						'UserName'				=> $userName,
						'Password' 				=> $password,
						'EmailErrorReport'		=> $EmailErrorReport,
						'IMAPHost'				=> $IMAPHost,
						'IMAPUserName'			=> $IMAPUserName,
						'IMAPPort'				=> $IMAPPort,
						'IMAPMailBox'			=> $IMAPMailBox,
						'IMAPPath'				=> $IMAPPath,
						'IMAPServerEncoding'	=> $IMAPServerEncoding,
						'IMAPAttachementDir'	=> $IMAPAttachementDir,
						'CreatedBy' 			=> $_SESSION['ADMIN_ID'],
						'CreatedOn' 			=> date('Y-m-d H:i:s'),
						'Status' 				=> $Status						
					);
		}
		else { // if edit
			$data = array(
						'Type'					=> $Type,
						'SMTPSecure'			=> $SMTPSecure,
						'SMTPAuth'				=> $SMTPAuth,
						'SMTPHost'				=> $SMTPHost,
						'SMTPPort'				=> $SMTPPort,
						'UserName'				=> $userName,
						'Password' 				=> $password,
						'EmailErrorReport'		=> $EmailErrorReport,
						'IMAPHost'				=> $IMAPHost,
						'IMAPUserName'			=> $IMAPUserName,
						'IMAPPort'				=> $IMAPPort,
						'IMAPMailBox'			=> $IMAPMailBox,
						'IMAPPath'				=> $IMAPPath,
						'IMAPServerEncoding'	=> $IMAPServerEncoding,
						'IMAPAttachementDir'	=> $IMAPAttachementDir,
						'ModifiedBy' 			=> $_SESSION['ADMIN_ID'],
						'ModifiedOn' 			=> date('Y-m-d H:i:s'),
						'Status' 				=> $Status						
					);					
		}
		
		$res	= $this->EmailAPISettings_model->saveData($data, $id);
		
		$resData    = array(
								"status" => true,
								'message' => 'Payment API Settings saved successfully!!',
						 );	
		
		echo json_encode($resData);
	}	  
			
	//=========================== getEditEmailAPI function used for getting a Email API Settings details by id from sys_email_api_settings table===========================	 
	public function getEditEmailAPI($id)
	{
		$data = $this->EmailAPISettings_model->getById($id);
		$resData = array();
		
		$db = new Database();			
		$password = encrypt_decrypt('D',$data->Password);
		$resData = array(
						"PasswordEMailAPI" => $password
				 );
		$resData = (object) array_merge((array) $resData,(array) $resData, (array) $data);
		echo json_encode($resData);
	}  
	
	//=========================== deleteEmailAPI function used for deleting Email API Settings details by id from sys_email_api_settings table===========================	 
	public function deleteEmailAPI($id)
	{
       $res    =  $this->EmailAPISettings_model->deleteData($id);
       	 
	   if($res['status'])
	   {
			$resData    = array(
								"status" => true,
								'message' => 'Email API Settings deleted successfully!!',
						 );	
		}
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
	    echo json_encode($resData); 
    }
	
	// Function for loading the Email Notification Settings page - By Sajitha //	
	public function email_notification_settings()
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	="sms_api_settings"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
				
		$db = new Database();
		
		$Disclaimer			=	"";
		$Status				=	"";
		
		$Disclaimer					=	$db->getFieldValueById("sys_email_notification_settings", "Disclaimer", "Id=1");
		$Status						=	$db->getFieldValueById("sys_email_notification_settings", "Status", "Id=1");
		
		$data 					= array();
		$headTitleAddText		= " - Email Notification Settings : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["Disclaimer"]	 		=$Disclaimer; // from table.
		$data["Status"]	 			=$Status; // from table.
		
		$this->load->view("brq-admin/email-notification-settings", $data);
	}
	
	// ========================= saveEmailNotificationSettings() for saving Email Notification Settings datas - by Sajitha ================================
	public function saveEmailNotificationSettings()
	{
		$Disclaimer				=	trim($_POST["Disclaimer"]);
		$Status					=	trim($_POST["Status"]);
		
		$Disclaimer				=	str_replace("'","\'",$Disclaimer); // replacing the quotes
		$Status					=	str_replace("'","\'",$Status); // replacing the quotes
		
		$Disclaimer				=	htmlspecialchars($Disclaimer);
		$Status					=	htmlspecialchars($Status);
		
		$resData = array();
		
		if(empty($Disclaimer))
			{
				echo "Error! Disclaimer should not be blank.";
				exit;
			}
		if(empty($Status))
			{
				echo "Error! Status should not be blank.";
				exit;
			}
		
		$data = array(
						'Disclaimer'			=> $Disclaimer,
						'Status'				=> $Status
					);
					
		$this->db->update('sys_email_notification_settings', $data, array('Id' =>1));
		echo "success";
	}
	
	//for to create the new employee by himself. without login to login area. 
	function newEmployeeCommon() // for common
	{
		$data["adminController"] 	= $this->adminController;
		$data["headTitle"] 		 	= $this->headTitle ." - New employee registration form";
		$data["RegCaptcha"] 		= $this->createCaptcha();
		$this->load->view("brq-admin/new_employee_join_form", $data);
	}

	// function to save new employee from admin side without login.
	// Employee details saving by himself.
	
	function saveNewEmloyeeCommon()
	{
		$resData = array();
		if(isset($_SESSION["REG_CAPTCHA_WORD"]))
        {
            if($_REQUEST['RegCaptcha'] ==  $_SESSION["REG_CAPTCHA_WORD"] )
            {
					// all other saving data..here
				
			}
			else{
			
				$resData  = array(
									"status" => false,
									"message" => "Error! Invalid security code entered, please try again."
					
								  );
		     }	
		 }else{
			
				$resData  = array(
									"status" => false,
									"message" => "Error! Invalid security code entered, please try again."
								  );
		      }	
		echo json_encode($resData);	  
			
	}// save function ends

	//=========================== forgot_password function to view forgot-password page - by Sajitha ===========================	
	function forgot_password($verify='no',$userId='')  
	{
		$data["adminController"] 	= $this->adminController;
		$data["headTitle"] 		 	= $this->headTitle ." - Forgot password request";
		$data["verify"] 		 	= $verify;
		$data["userId"] 		 	= $userId;
		
		$this->load->view("brq-admin/forgot-password", $data);
	} 

	//=========================== forgotPasswordCheck for forgot password entry checking - by Sajitha===========================	
	public function forgotPasswordCheck()
	{
		$userId			=		$this->input->post('userId');
		$dob			=		$this->input->post('dob');
		$dob = str_replace('/', '-', $dob);
		$new_date 			= date('Y-m-d',(strtotime($dob)));
		$gender			=		$this->input->post('gender');
		$designation	=		$this->input->post('designation');
		$mobileNo		=		$this->input->post('mobileNo');
		$db  = new Database();
		$employeeId		=	$db->getFieldValueById("login", "EmployeeId", "UserId='{$userId}'");
		
		// --- checking the existance start;
		$where   		= "UserId='{$userId}'";
		
		$res = $db->checkExistance("login", $where); //  if exists id value will be returned.
		$otpcode 		= "";
		
		if(!$res)
			{
				echo json_encode(array("status" => false,'message' => 'Ttthis user id does not exist!'));				
				exit;
			}
		// --- checking the existance ends;
		// --- checking the existance of other fields start;
		
		$createdBY			=	$db->getFieldValueById("employee_master", "CreatedBy", "Id={$employeeId} AND Status='Active' AND Sex='{$gender}' AND Mobile='{$mobileNo}' AND UserGroupId='{$designation}'  AND DOB='{$new_date}'");
		$email				=	$db->getFieldValueById("employee_master", "Email", "Id={$employeeId} AND Status='Active' AND Sex='{$gender}' AND Mobile='{$mobileNo}' AND UserGroupId='{$designation}'  AND DOB='{$new_date}'");
		
		if($createdBY == '') {
			echo json_encode(array("status" => false,'message' => 'The fields entered do not match!'));				
			exit;
		}
		
		$db							= new Database();
		$oldPass 					= $db->getFieldValueById("login", "Password", "UserId='{$userId}'" );
		$_SESSION["OLD_PASSWORD"]	=	$oldPass; // for security checking when accessing the forgot-password page through URL with verify and userid as arguements
		
		$otpcode = $this->Common_model->generateOTP(5);
		// insert new row into sys_otp table starts
		$otp = encriptPassword($otpcode);
		$data['OTP'] = $otp;
		$data['ModuleId'] = $employeeId;
		$data['ModuleName'] = 'Forgot Password';
		$data['CreatedBy'] = $createdBY;
		$data['CreatedOn'] = date('Y-m-d H:i:s');
		$data['OTPExpireOn'] = date("Y-m-d H:i:s", strtotime("+30 minutes"));
		$data['Status'] = 1;
		$data['Description'] = 'OTP generated for Employee for forgot password';
		
		// --- checking the existance in sys_otp table to delete starts
		$this->db->delete('sys_otp', array('ModuleId' => $employeeId,'ModuleName' => 'Forgot Password'));
		// --- checking the existance in sys_otp table to delete ends
		$this->db->insert('sys_otp',$data);
		$this->forgotPasswordEmployee($userId,$employeeId,$otpcode);
		// --- insert new row into sys_otp table ends		
		echo json_encode(array("status" => true,"message"=>"success","otp"=>$otpcode));
                
	} 
	
	
	//  Email Sending For Forgot Password request by Employee ---
	private function forgotPasswordEmployee($userId,$employeeId,$otpcode)
	{
		$this->load->model("Email_model");
		$db   			= new Database();	
		
		$toName 		= $db->getFieldValueById("employee_master", "FirstName", "Id='{$employeeId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$employeeId}'");		
		$toEmailId 		= $db->getFieldValueById("employee_master", "Email", "Id='{$employeeId}'");
		$OTP 			= $otpcode;
		$subject 		= "Forgot password request by employee, BRQ";
		$country		= "India";
		 
		$this->Email_model->forgotPasswordAdmin($userId,$toEmailId, $toName, $OTP, $subject, $country );	
	} 

	//=========================== checkOTP function for checking entered otp is correct or not - by Sajitha ===========================	
	public function checkOTP()
	{
		$otp			=	$this->input->post('otp');
		$otp = encriptPassword($otp);
		$userId			=	$this->input->post('userId');
		$db     		= new Database();
		$employeeId		=	$db->getFieldValueById("login", "EmployeeId", "UserId='{$userId}'");
		$SQL 			=	"SELECT Id FROM sys_otp where ModuleId=".$employeeId." AND ModuleName='Forgot Password' AND OTP='".$otp."'";
		$result			=  	$this->db->query($SQL);
		$row = $result->row();
		if (isset($row))
		{
			echo json_encode(array("status" => true,"message"=>"success"));
		} else {
			echo json_encode(array("status" => false,'message' => 'Invalid OTP!'));				
		}
	}

	
	//=========================== resetPasswordAdminUserProfile function for resetting password in admin user profile - by Sajitha ===========================	
	public function resetPasswordAdminUserProfile()
	{
		$newPassword	=	encriptPassword($this->input->post('newPassword'));
		$userId			=	$this->input->post('userId');
		$oldPass		=	encriptPassword($this->input->post('oldPass'));
		
		$db							= new Database();
		$oldPassLogin 				= $db->getFieldValueById("login", "Password", "UserId='{$userId}'" );
	
		if($oldPass == $oldPassLogin) {
			$this->db->update('login', array('Password' =>$newPassword,'LastPasswordChangeDate' => date('Y-m-d H:i:s')), array('UserId' =>$userId)); 
			unset($_SESSION['OLD_PASSWORD']);
			if(isset($_SESSION['ADMIN_LOGIN_ID']))
			{ 
				$this->AdminModel->updateLoginStatus($_SESSION['ADMIN_LOGIN_ID']);
						
				unset($_SESSION['ADMIN_ID']);           
				unset($_SESSION['ADMIN_PASS']);        
				unset($_SESSION['ADMIN_USER_TYPE']);
				if(isset($_SESSION["SCREEN_LOCKED"]))
					unset($_SESSION["SCREEN_LOCKED"]);
				
				unset($_SESSION["USER_MODULE_PAGE"]);	
				$_SESSION['ADMIN_ID'] =NULL;           
				$_SESSION['ADMIN_PASS']=NULL;        
				$_SESSION['ADMIN_USER_TYPE']=NULL;
				 
				session_unset();
				session_destroy();
			
			}  
			echo json_encode(array("status" => true,"message"=>"success"));
		} else {
			echo json_encode(array("status" => false,"message"=>"error"));	
		}		
	}
	
	//=========================== resetPassword function for resetting password in case of forgot password - by Sajitha ===========================	
	public function resetPassword()
	{
		$newPassword	=	encriptPassword($this->input->post('newPassword'));
		$userId			=	$this->input->post('userId');
		$oldPass		=	$this->input->post('oldPass');
		
		$db							= new Database();
		$oldPassLogin 				= $db->getFieldValueById("login", "Password", "UserId='{$userId}'" );
		
		if($oldPass == $oldPassLogin) {
			$this->db->update('login', array('Password' =>$newPassword,'LastPasswordChangeDate' => date('Y-m-d H:i:s')), array('UserId' =>$userId)); 
			// --- deleting the record of otp from sys_otp table
			$db     		= new Database();
			$employeeId		= $db->getFieldValueById("login", "EmployeeId", "UserId='{$userId}'");
			$this->db->delete('sys_otp', array('ModuleId' => $employeeId,'ModuleName' => 'Forgot Password'));
			unset($_SESSION['OLD_PASSWORD']);
			echo json_encode(array("status" => true,"message"=>"success"));
		} else {
			echo json_encode(array("status" => false,"message"=>"error"));	
		}		
	}

	//=========================== currentPasswordCheck function for checking the current password when changing password - by Sajitha ===========================	
	public function currentPasswordCheck()
	{
		$currentPassword	=	encriptPassword($this->input->post('currentPassword'));
		$rememberEntryPassword=$this->input->post("rememberEntryPassword" ); // Remember_me
	
	// if($currentPassword=="")
	// 	$_SESSION['REMEMBER_ENTRY_PASSWORD']=false;

	$userId				=	$this->input->post('userId');
	$db     			= 	new Database();
	$password			=	$db->getFieldValueById("login", "Password", "UserId='{$userId}'");
	if($currentPassword == $password)
	{
		if($rememberEntryPassword===true)	
			$_SESSION['REMEMBER_ENTRY_PASSWORD']=true;
		if($rememberEntryPassword===false)	
			$_SESSION['REMEMBER_ENTRY_PASSWORD']=false;
			echo json_encode(array("status" => true,"message"=>"success","rememberpwd"=>$rememberEntryPassword));
	}
	else
		echo json_encode(array("status" => false,"message"=>"Current password does not match!"));	
	}
	
	// ========================== getDropDownGroupData function - for loading the existing Qualification in Edit - edited by Sajitha ==================================
	public function getDropDownGroupData() //($tableName="", $fieldName1="",$fieldName2="", $orderBy="", $existValue="")
	{
		$tableName		=		$this->input->post('tableName');
		$fieldName1		=		$this->input->post('fieldName1');
		$fieldName2		=		$this->input->post('fieldName2');
		$orderBy		=		$this->input->post('orderBy');
		$existValue		=		$this->input->post('qualification');
		if(empty($tableName))
		{
			echo "Missing the required argument list";
			exit;
		}
		
		$SQL 		=  "SELECT `Id`,`$fieldName1`, `$fieldName2`  From `$tableName`  ORDER BY `$orderBy`";
		
		$list		=  $this->db->query($SQL);
		
		$listData 	=  "";

		$oldGroup 	= "";
		$groupData	= "";
		
		$existQuali = explode(",",$existValue);
		$cnt = 0;
		foreach ($list->result()  as $row)
		 {
				
				$item  				= $row->Education;
				$itemId  			= $row->Id;			
				if(strcmp(strtolower($oldGroup),strtolower($row->Group))!=0)
				{
					if($cnt != 0 || $groupData!=="")
						$listData  .="</optgroup>";
					if($cnt == 0)
						$listData .="<option value=''>...Select qualifications...</option>";
					$groupData .="<optgroup label='{$row->Group}'>";
					$listData  .=$groupData;
					
					$oldGroup 	= $row->Group;
					if($groupData!=="")
					{
						$groupData	= "";
						
					}
					
				$cnt++;
				}
				
				$existCount = 0;
				if(count($existQuali) > 0) {
					for($i = 0;$i <count($existQuali); $i++) {
						if($itemId == $existQuali[$i]) {
							$listData .="<option value='{$itemId}' selected>{$item}</option>";
							$existCount++;
						}
					}
				}	
				if($existCount == 0)
					$listData .="<option  value='{$itemId}' >{$item}</option>";		
			}
			
			$listData .="</optgroup>";
			echo $listData;
		
	}
	
	// ========================== CMS Functions end  ==================================
	public function passwordEnct()
	{
			echo encriptPassword("admin");
			//echo date_default_timezone_get();
	
	}
	public function getPassword($key='ulds') // for new user password gen. and product key gen.
	{
		 //newly added function in common_functions helper
		//gererateStrongPassword($length, $add_dashes = false, $available_sets = 'luds')
		
		$pass = gererateStrongPassword(8,false,$key); // 'ulds' means uppercase lowercase digits specialchars
		echo $pass;
	}
	
	// ========================== Get phone number from Id in employee table - Function - Sajitha   ==================================
	public function getPhoneNum($id)  
	{	
		$db  = new Database();
        echo $phNo = $db->getFieldValueById("employee_master", "Mobile", "Id='{$id}'");
	} 


	// -------------------------- HR module start ----------------
	// public function new_employee($add="")
	// {
	// 	if(!$this->isSessionSet())
	// 	{
	// 		$this->index();
	// 		return;
	// 	}
	// 	$moduleTab="new_employee";
	// 	$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
	// 	$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
	// 	$data 					= array();
	// 	$headTitleAddText		= " - Products : Login as ";
	// 	$headTitleAddId			= $_SESSION['ADMIN_ID'];
	// 	$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
	// 	$data["moduleTab"]		= $moduleTab; // product or product_category
	// 	if($add != '')
	// 		$data["add"]		 	= $add; // for quick link
	// 	else
	// 		$data["add"]		 	= ''; // for quick link
	// 	unset($_SESSION["REG_CAPTCHA_WORD"]);
	// 	$this->load->view("brq-admin/new-employee", $data);
		
	// }
	// public function employee($id,$add="")
	// {
	
	//  if(!$this->isSessionSet())
	// 	{
	// 		$this->index();
	// 		return;
	// 	}
		
	// 	$data						= array();	
	// 	$data["adminController"] 	= $this->adminController;
		
	// 	$headTitleAddText			= " : Login as ";
	// 	$headTitleAddId				=	 $_SESSION['ADMIN_ID'];
	// 	$data["subMenuId"]			= $id;
	// 	$data["headTitle"] 		 	= $headTitleAddText . "- Help document creation.";
	// 	$data						= $this->Common_model->common_sidebar_counts();
	// 	if($add != '')
	// 		$data["add"]		 	= $add; // for quick link
	// 	else
	// 		$data["add"]		 	= ''; // for quick link
	// 	unset($_SESSION["REG_CAPTCHA_WORD"]);
	//     $this->load->view('brq-admin/hr/new-employee.php',$data);
	// 	//$this->load->view('brq-admin/add-emp-modal.php',$data);

	
	// } 

	public function employee($id="")
	{
	
	 if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$data						= array();	
		$data["adminController"] 	= $this->adminController;
		
		$headTitleAddText			= " : Login as ";
		$headTitleAddId				=	 $_SESSION['ADMIN_ID'];
		$data["subMenuId"]			= $id;
		$data["headTitle"] 		 	= $headTitleAddText . "- Help document creation.";
		$data						= $this->Common_model->common_sidebar_counts();
		if($add != '')
			$data["add"]		 	= $add; // for quick link
		else
			$data["add"]		 	= ''; // for quick link
		unset($_SESSION["REG_CAPTCHA_WORD"]);
	    $this->load->view('brq-admin/hr/new-employee.php',$data);
		// $this->load->view('brq-admin/add-emp-modal.php',$data);

	
	} 


	//====================================Function to get DataTables of Employee List ================================
	public function employeeList($subId="")
	{
		$employeeId	=		$this->input->post('employeeId');
		$branch		=		$this->input->post('branch');
		$department	=		$this->input->post('department');
		$status		=		$this->input->post('status');
		$gender		=		$this->input->post('gender');
		$marital	=		$this->input->post('marital');
		$quali		=		$this->input->post('quali');
		$exp		=		$this->input->post('exp');
		$mobile		=		$this->input->post('mobile');
		$email		=		$this->input->post('email');
		$whatsapp	=		$this->input->post('whatsapp');
		$userid		=		$this->input->post('userid');
		$list 		= 		$this->Employee_model->getDataTables('',$employeeId,$branch,$department,'','','',$exp,$status,$gender,$marital,$quali,$mobile,$email,$whatsapp,$userid);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		//$no=1;
		
		foreach ($list as $data) {
		
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$profilePath 	= base_url().$data->ProfilePhotoPath.'thumb/';
			$mainPhoto		= $data->ProfilePhoto;
			if($mainPhoto == '') {
				if($data->Sex == "Male")
					$mainPhoto 	= "male.png";
				else
					$mainPhoto 	= "female.png";
			}
			
			$profilePhotoLarge 	= base_url().$data->ProfilePhotoPath.$mainPhoto;
			$profilePhoto 	= $profilePath.$data->ProfilePhoto;
			if(!(file_exists($data->ProfilePhotoPath.'thumb/'.$data->ProfilePhoto)) || $data->ProfilePhoto == '') {
				if($data->Sex == "Male")
					$profilePhoto 	= $profilePath."male.png";
				else
					$profilePhoto 	= $profilePath."female.png";
			}
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$data->FirstName." ".$data->LastName.'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';
			$row[] = $data->Code;
			$row[] = $data->FirstName." ".$data->LastName;
			$row[] = $data->Mobile;
		    if($data->Status=="Inactive" || $data->Status=="Terminated")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			 
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			if(file_exists($data->CVPath.$data->CVName) && $data->CVName != '')
				$row[] = '<span class="label label-success"><a href="'.base_url().$data->CVPath.$data->CVName.'" target="_blank">View CV</a></span>';
			else
				$row[] = '';
			
		    $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
            $row[] = $data->CreatedBy;
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			
			$actions ="";
			$view ="Sub_Visible_".$subId;
			$edit ="Sub_Edit_".$subId;
			$delete = "Sub_Del_".$subId;
			
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			//add html for action
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editEmpData('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			
			}	
		   if(in_array($view,$userGroupPermission)||in_array($view,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                 	 .'<a id="viewButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to View"  onclick="viewEmpData('."'".$data->Id."'".');"><span class="fa fa-search text-fanger"></span> View</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{  
				$actions	.='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="ajaxEmpDelete('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}         
			$actions	.=	  ' </div>'
	                  .'</div>';
			//add html for action
			$row[] = $actions;
		  	
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Employee_model->countAll(),
						"recordsFiltered" => $this->Employee_model->countFiltered('',$employeeId,$branch,$department,'','','',$exp,$status,$gender,$marital,$quali,$mobile,$email,$whatsapp,$userid),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
		
	}
	
	//====================================Function to get DataTables of Employee's Skills List ================================
	public function employeeSkillsList($subId="")
	{
		$employeeId = $this->input->post('employeeId');
		$skills 	= $this->input->post('skills');
		$branch		= $this->input->post('branch');
		$department	= $this->input->post('department');
		$list 		= $this->Employee_model->getDataTables('Skills',$employeeId,$branch,$department,$skills);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		$db  	= new Database();
		//$no=1;
		
		foreach ($list as $data) {
		
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$profilePath 	= base_url().$data->ProfilePhotoPath.'thumb/';
			$mainPhoto		= $data->ProfilePhoto;
			if($mainPhoto == '') {
				if($data->Sex == "Male")
					$mainPhoto 	= "male.png";
				else
					$mainPhoto 	= "female.png";
			}
			
			$profilePhotoLarge 	= base_url().$data->ProfilePhotoPath.$mainPhoto;
			$profilePhoto 	= $profilePath.$data->ProfilePhoto;
			if(!(file_exists($data->ProfilePhotoPath.'thumb/'.$data->ProfilePhoto)) || $data->ProfilePhoto == '') {
				if($data->Sex == "Male")
					$profilePhoto 	= $profilePath."male.png";
				else
					$profilePhoto 	= $profilePath."female.png";
			}
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$data->FirstName." ".$data->LastName.'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';
			$row[] = $data->Code;
			$row[] = $db->getFieldValueById("branches", "BranchName", "Id='{$data->BranchId}'");	
			$row[] = $db->getFieldValueById("department", "DepartmentName", "Id='{$data->DepId}'");	
			$row[] = $data->FirstName." ".$data->LastName;
			if($data->Status=="Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			 
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			
		    $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
            $row[] = $data->CreatedBy;
			
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			
			$actions ="";
			$edit ="Sub_Edit_".$subId;
			
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			//add html for action
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions = '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="editEmpSkillsData('."'".$data->Id."'".')" ><i class="fa fa-pencil" aria-hidden="true"></i> Edit Skills</a>';
			}
			//add html for action
			$row[] = $actions;
		  	
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Employee_model->countAll(),
						"recordsFiltered" => $this->Employee_model->countFiltered('Skills',$employeeId,$branch,$department,$skills),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
		
	}
	//====================================Function to get DataTables of Employee's Education details List ================================
	public function employeeEduList($subId="")
	{
		$employeeId = $this->input->post('employeeId');
		$education 	= $this->input->post('education');
		$branch		= $this->input->post('branch');
		$department	= $this->input->post('department');
		$list 	= 	$this->Employee_model->getDataTables('Edu',$employeeId,$branch,$department,'',$education);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		$db  	= new Database();
		//$no=1;
		
		foreach ($list as $data) {
		
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$profilePath 	= base_url().$data->ProfilePhotoPath.'thumb/';
			$mainPhoto		= $data->ProfilePhoto;
			if($mainPhoto == '') {
				if($data->Sex == "Male")
					$mainPhoto 	= "male.png";
				else
					$mainPhoto 	= "female.png";
			}
			
			$profilePhotoLarge 	= base_url().$data->ProfilePhotoPath.$mainPhoto;
			$profilePhoto 	= $profilePath.$data->ProfilePhoto;
			if(!(file_exists($data->ProfilePhotoPath.'thumb/'.$data->ProfilePhoto)) || $data->ProfilePhoto == '') {
				if($data->Sex == "Male")
					$profilePhoto 	= $profilePath."male.png";
				else
					$profilePhoto 	= $profilePath."female.png";
			}
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$data->FirstName." ".$data->LastName.'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';
			$row[] = $data->Code;
			$row[] = $db->getFieldValueById("branches", "BranchName", "Id='{$data->BranchId}'");	
			$row[] = $db->getFieldValueById("department", "DepartmentName", "Id='{$data->DepId}'");	
			$row[] = $data->FirstName." ".$data->LastName;
			$row[] = $data->TopQualification;
			if($data->Status=="Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			 
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			
		    $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
            $row[] = $data->CreatedBy;
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			
			$actions ="";
			$edit ="Sub_Edit_".$subId;
			
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			//add html for action
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions= '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="editEmpEduData('."'".$data->Id."'".')" ><i class="fa fa-pencil" aria-hidden="true"></i> Edit Education</a>';
			}
			//add html for action
			$row[] = $actions;
		  	
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Employee_model->countAll(),
						"recordsFiltered" => $this->Employee_model->countFiltered('Edu',$employeeId,$branch,$department,'',$education),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
		
	//====================================Function to get DataTables of Employee's Certification details List ================================
	public function employeeCertList($subId="")
	{
		$employeeId = $this->input->post('employeeId');
		$certification 	= $this->input->post('certification');
		$branch		= $this->input->post('branch');
		$department	= $this->input->post('department');
		$list 	= 	$this->Employee_model->getDataTables('Cert',$employeeId,$branch,$department,'','',$certification);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		$db  	= new Database();
		//$no=1;
		
		foreach ($list as $data) {
		
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$profilePath 	= base_url().$data->ProfilePhotoPath.'thumb/';
			$mainPhoto		= $data->ProfilePhoto;
			if($mainPhoto == '') {
				if($data->Sex == "Male")
					$mainPhoto 	= "male.png";
				else
					$mainPhoto 	= "female.png";
			}
			
			$profilePhotoLarge 	= base_url().$data->ProfilePhotoPath.$mainPhoto;
			$profilePhoto 	= $profilePath.$data->ProfilePhoto;
			if(!(file_exists($data->ProfilePhotoPath.'thumb/'.$data->ProfilePhoto)) || $data->ProfilePhoto == '') {
				if($data->Sex == "Male")
					$profilePhoto 	= $profilePath."male.png";
				else
					$profilePhoto 	= $profilePath."female.png";
			}
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$data->FirstName." ".$data->LastName.'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';
			$row[] = $data->Code;
			$row[] = $db->getFieldValueById("branches", "BranchName", "Id='{$data->BranchId}'");	
			$row[] = $db->getFieldValueById("department", "DepartmentName", "Id='{$data->DepId}'");	
			$row[] = $data->FirstName." ".$data->LastName;
			
			if($data->TopCertification) {
				if($data->TopCertification == 'OTHER') {
					$row[] = $data->OtherCertificate." (Other)";
				} else if($data->TopCertification == 'NONE') {
					$row[] = $data->TopCertification;
				} else	
					$row[] = $db->getFieldValueById("job_certification", "Certification", "Id='{$data->TopCertification}'");	
			} else
				$row[] = '';
			
			if($data->Status=="Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			 
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			
		    $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
            $row[] = $data->CreatedBy;
			
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			
			$actions ="";
			$edit ="Sub_Edit_".$subId;
			
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			//add html for action
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions = '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="editEmpCertData('."'".$data->Id."'".')" ><i class="fa fa-pencil" aria-hidden="true"></i> Edit Certification</a>';
			}
			//add html for action
			$row[] = $actions;
		  	
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Employee_model->countAll(),
						"recordsFiltered" => $this->Employee_model->countFiltered('Cert',$employeeId,$branch,$department,'','',$certification),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
		
	}
	
	//====================================Function to get DataTables of Employee's Experience details List ================================
	public function employeeExpList($subId="")
	{
		$employeeId = $this->input->post('employeeId');
		$experience 	= $this->input->post('experience');
		$branch		= $this->input->post('branch');
		$department	= $this->input->post('department');
		$list 	= 	$this->Employee_model->getDataTables('Exp',$employeeId,$branch,$department,'','','',$experience);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		$db  	= new Database();
		//$no=1;
		
		foreach ($list as $data) {
		
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$profilePath 	= base_url().$data->ProfilePhotoPath.'thumb/';
			$mainPhoto		= $data->ProfilePhoto;
			if($mainPhoto == '') {
				if($data->Sex == "Male")
					$mainPhoto 	= "male.png";
				else
					$mainPhoto 	= "female.png";
			}
			
			$profilePhotoLarge 	= base_url().$data->ProfilePhotoPath.$mainPhoto;
			$profilePhoto 	= $profilePath.$data->ProfilePhoto;
			if(!(file_exists($data->ProfilePhotoPath.'thumb/'.$data->ProfilePhoto)) || $data->ProfilePhoto == '') {
				if($data->Sex == "Male")
					$profilePhoto 	= $profilePath."male.png";
				else
					$profilePhoto 	= $profilePath."female.png";
			}
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$data->FirstName." ".$data->LastName.'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';
			$row[] = $data->Code;
			$row[] = $db->getFieldValueById("branches", "BranchName", "Id='{$data->BranchId}'");	
			$row[] = $db->getFieldValueById("department", "DepartmentName", "Id='{$data->DepId}'");	
			$row[] = $data->FirstName." ".$data->LastName;
			$row[] = $data->TotalExperience;
			if($data->Status=="Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			 
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			
		    $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
            $row[] = $data->CreatedBy;
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			
			$actions ="";
			$view ="Sub_Visible_".$subId;
			$edit ="Sub_Edit_".$subId;
			$addMore = "Sub_AddMore_".$subId;
			
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			//add html for action
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions = '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="editEmpExpData('."'".$data->Id."'".')" ><i class="fa fa-pencil" aria-hidden="true"></i> Edit Experience</a>';
			}	
			if(in_array($addMore,$userGroupPermission)||in_array($addMore,$userWisePermission))
			{
				if($data->TotalExperience != 'Fresher')
					$actions .= '<a  id="moreButton" class="btn btn-sm btn-success btn-primary mt-1" href="javascript:void(0)" title="Click to Add More Experience" onclick="addMoreEmpExpData('."'".$data->Id."'".')" ><i class="fa fa-plus-circle" aria-hidden="true"></i> Add More Experience</a>';
			}	
			if(in_array($view,$userGroupPermission)||in_array($view,$userWisePermission))
			 {
				$countMoreExp  = $db->totalCount("Id", '`employee_more_experience`',"EmployeeId={$id}"); // where 'showing' status is to make Developer only.
				if($data->TotalExperience != 'Fresher' && $countMoreExp != 0)
					$actions .= '<a  id="viewMoreButton" class="btn btn-sm btn-info btn-primary mt-1" href="javascript:void(0)" title="Click to View More Experience" onclick="viewMoreEmpExpData('."'".$data->Id."'".')" ><i class="fa fa-eye" aria-hidden="true"></i> View More Experience</a>';
			 }
			
			//add html for action
			$row[] = $actions;
		  	
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Employee_model->countAll(),
						"recordsFiltered" => $this->Employee_model->countFiltered('Exp',$employeeId,$branch,$department,'','','',$experience),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
		
	} 
	//====================================Function to get DataTables of Employee's PF-ESI-Pension details List ================================
	public function employeePFESIList($subId="")
	{
		$employeeId = $this->input->post('employeeId');
		$pfApplicable 	= $this->input->post('pfApplicable');
		$esiApplicable 	= $this->input->post('esiApplicable');
		$pensionApplicable 	= $this->input->post('pensionApplicable');
		$branch		= $this->input->post('branch');
		$department	= $this->input->post('department');
		$list 	= 	$this->Employee_model->getDataTables('PF',$employeeId,$branch,$department,'','','','','','','','','','','',$pfApplicable,$esiApplicable,$pensionApplicable);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		$db  	= new Database();
		//$no=1;
		
		foreach ($list as $data) {
		
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$profilePath 	= base_url().$data->ProfilePhotoPath.'thumb/';
			$mainPhoto		= $data->ProfilePhoto;
			if($mainPhoto == '') {
				if($data->Sex == "Male")
					$mainPhoto 	= "male.png";
				else
					$mainPhoto 	= "female.png";
			}
			
			$profilePhotoLarge 	= base_url().$data->ProfilePhotoPath.$mainPhoto;
			$profilePhoto 	= $profilePath.$data->ProfilePhoto;
			if(!(file_exists($data->ProfilePhotoPath.'thumb/'.$data->ProfilePhoto)) || $data->ProfilePhoto == '') {
				if($data->Sex == "Male")
					$profilePhoto 	= $profilePath."male.png";
				else
					$profilePhoto 	= $profilePath."female.png";
			}
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$data->FirstName." ".$data->LastName.'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';
			$row[] = $data->Code;
			$row[] = $db->getFieldValueById("branches", "BranchName", "Id='{$data->BranchId}'");	
			$row[] = $db->getFieldValueById("department", "DepartmentName", "Id='{$data->DepId}'");	
			$row[] = $data->FirstName." ".$data->LastName;
			
			$row[] = $data->PFApplicable;
			$row[] = $data->ESIApplicable;
            $row[] = $data->PensionApplicable;
			
			if($data->Status=="Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			 
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			
			$actions ="";
			$edit ="Sub_Edit_".$subId;
			$edit ="Sub_Copy_".$subId;
			$delete ="Sub_Del_".$subId;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			//add html for action
			$actions .= '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-boundary="window" data-toggle="dropdown" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>'
					  .'<div class="dropdown-menu" role="menu" style="">';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions	.='<div class="dropdown-menu" role="menu" style="">'
	                  		.'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editEmpPFData('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission)||in_array($copy,$userWisePermission))
			{
				$actions	.='<div class="dropdown-divider"></div>'
	                  		.'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editEmpPFData('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{
				$actions	.='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteEmpPFData('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
				$actions	.=' </div>'
	                 		.'</div>';
					  
			//add html for action
			$row[] = $actions;
		  	
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Employee_model->countAll(),
						"recordsFiltered" => $this->Employee_model->countFiltered('PF',$employeeId,$branch,$department,'','','','','','','','','','','',$pfApplicable,$esiApplicable,$pensionApplicable),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);		
	}
	//==================================== saveEmployeePFESI function for Saving Employee's PF-ESI-Pension details - by Sajitha ================================
	public function saveEmployeePFESI()
	{
		$id						= $this->input->post("id");
		$data 					= array(); 
		$data1 					= array(); 
		$data2 					= array(); 
		$employeeId 			= $this->input->post('EmployeeId');	
		$pfApplicable  			= $this->input->post('pfApplicable');
		$esicApplicable 		= $this->input->post('esicApplicable');
		$pensionApplicable 		= $this->input->post('pensionApplicable');
		$ptApplicable 			= $this->input->post('ptApplicable');
		$lwfApplicable 			= $this->input->post('lwfApplicable');	
		
		$status 				= $this->input->post('Status');
		if($status == 'Active')
			$status 			= 1;
		else
			$status 			= 0;
		
		$EPF_Join_Date  		= $this->input->post('EPF_Join_Date');
		$EPF_Join_Date 			= str_replace('/', '-', $EPF_Join_Date);
		$EPF_Join_Date 			= date('Y-m-d',(strtotime($EPF_Join_Date)));	
		
		$PF_Number 				= $this->input->post('PF_Number');
		$PF_UAN 				= $this->input->post('PF_UAN');
		$Prev_Member_ID 		= $this->input->post('Prev_Member_ID');
		$EPS_Number 			= $this->input->post('EPS_Number');	
		
		$EPS_Join_Date 			= $this->input->post('EPS_Join_Date');
		$EPS_Join_Date 			= str_replace('/', '-', $EPS_Join_Date);
		$EPS_Join_Date 			= date('Y-m-d',(strtotime($EPS_Join_Date)));	
		
		$EPS_Exit_Date 			= $this->input->post('EPS_Exit_Date');
		$EPS_Exit_Date 			= str_replace('/', '-', $EPS_Exit_Date);
		$EPS_Exit_Date 			= date('Y-m-d',(strtotime($EPS_Exit_Date)));	
		
		$ESIC_Number 			= $this->input->post('ESIC_Number');	
		$ESI_Amount 			= $this->input->post('ESI_Amount');
		$ESI_Year 				= $this->input->post('ESI_Year');
		$ESI_Month 				= $this->input->post('ESI_Month');
		$esiIsPaid 				= $this->input->post('esiIsPaid');	
		
		$ESI_Paid_Date 			= $this->input->post('ESI_Paid_Date');
		$ESI_Paid_Date 			= str_replace('/', '-', $ESI_Paid_Date);
		$ESI_Paid_Date 			= date('Y-m-d',(strtotime($ESI_Paid_Date)));	
		
		$ESI_Paid_Details 		= $this->input->post('ESI_Paid_Details');	
		$ESI_Remarks 			= $this->input->post('ESI_Remarks');
		
		$data = [ "PFApplicable" => $pfApplicable, "ESIApplicable" => $esicApplicable, "PensionApplicable" => $pensionApplicable, "PTApplicable" => $ptApplicable,"LWFApplicable" => $lwfApplicable ];
		$res  = $this->Employee_model->saveData($data, $employeeId);
		
		$db  			= new Database();
		$where   		= " `PFNumber`='{$PF_Number}' and `EmployeeId`={$employeeId} and Id!={$id}";
		$res 			= $db->checkExistance("employee_pf_detail", $where); // if exists id value will be returned.
		
		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This employee's PF details is already created and exists!"
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data1 = array(
						'PFNumber' => $PF_Number,
						'Status' => $status,
						'EmployeeId' => $employeeId,
						'PFUAN' => $PF_UAN,
						'PrevMemberId' => $Prev_Member_ID,
						'EPSNumber' => $EPS_Number,
						'EPFJoinDate' => $EPF_Join_Date,
						'EPSJoinDate' => $EPS_Join_Date,
						'EPSExitDate' => $EPS_Exit_Date,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
					
			$data2 = array(
						'ESINumber' => $ESIC_Number,
						'Status' => $status,
						'EmployeeId' => $employeeId,
						'ESIAmt' => $ESI_Amount,
						'ESIYear' => $ESI_Year,
						'ESIMonth' => $ESI_Month,
						'IsPaid' => $esiIsPaid,
						'PaidDate' => $ESI_Paid_Date,
						'PaidDetail' => $ESI_Paid_Details,
						'Remarks' => $ESI_Remarks,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);		
		}
		else { // if edit
			$data1 = array(
						'PFNumber' => $PF_Number,
						'Status' => $status,
						'EmployeeId' => $employeeId,
						'PFUAN' => $PF_UAN,
						'PrevMemberId' => $Prev_Member_ID,
						'EPSNumber' => $EPS_Number,
						'EPFJoinDate' => $EPF_Join_Date,
						'EPSJoinDate' => $EPS_Join_Date,
						'EPSExitDate' => $EPS_Exit_Date,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);		
			$data2 = array(
						'ESINumber' => $ESIC_Number,
						'Status' => $status,
						'EmployeeId' => $employeeId,
						'ESIAmt' => $ESI_Amount,
						'ESIYear' => $ESI_Year,
						'ESIMonth' => $ESI_Month,
						'IsPaid' => $esiIsPaid,
						'PaidDate' => $ESI_Paid_Date,
						'PaidDetail' => $ESI_Paid_Details,
						'Remarks' => $ESI_Remarks,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		$res	= $this->EmployeePF_model->saveData($data1, $id);
		$res	= $this->EmployeeESI_model->saveData($data2, $id);
		
		$resData = array('status' => true,'message' => "Employee's PF details saved successfully!!");
		
		echo json_encode($resData);
	}	 

	//=========================== deleteEmpPFData function used for deleting Employee's PF-ESI-Pension details by id from employee_language table===========================	 
	public function deleteEmpPFData($id)
	{
	   $db  	= new Database();
	   $pfId = $db->getFieldValueById("employee_pf_detail", "Id", "EmployeeId='{$id}'");
	   $esiId = $db->getFieldValueById("employee_esi_detail", "Id", "EmployeeId='{$id}'");
	   $data = [ "PFApplicable" => 'No', "ESIApplicable" => 'No', "PensionApplicable" => 'No', "PTApplicable" => 'No',"LWFApplicable" => 'No' ];
	   $res  = $this->Employee_model->saveData($data, $id);
			
       $res    =  $this->EmployeePF_model->deleteData($pfId);
       $res    =  $this->EmployeeESI_model->deleteData($esiId);
	   $resData =array();
	   if($res)
	   {	    			
			$resData    = array(
								"status" => true,
								'message' => "Employee's PF-ESI-Pension deleted successfully!!"
						 );
		   
	   }
	   else
	   {
		    $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Employee's PF-ESI-Pension!!"
				   );
	   }
	   echo json_encode($resData);
    } 	
	
	//==================================== Function to get details of Employee by Id - by Sajitha ================================
	public function getEditEmployeePFESI($id)
	{
		$SQL   		="SELECT PFApplicable,ESIApplicable,PensionApplicable,PTApplicable,LWFApplicable";
		$SQL  		.=" FROM employee_master where Id = $id";
		
		$query 		= $this->db->query($SQL);
		
		$ret 		= $query->row();
		$data1 		= $this->EmployeePF_model->getById($id);
		$data2 		= $this->EmployeeESI_model->getById($id);
		
		$db = new Database();			
		$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$id}'");
		$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$id}'");
	    $resData = array(
						"BranchId" => $branchId,
						"DepId" => $depId
				 );
				 
		$obj_merged = (object) array_merge((array) $data1, (array) $data2, (array) $resData, (array) $ret); 
         
		echo json_encode($obj_merged);
	}
	
    //==================================== Function to get details of Employee by Id - by Sajitha ================================
	public function getEditEmployee($id)
	{
		$data 		= $this->Employee_model->getById($id);
		
		$SQL   		="SELECT TIMESTAMPDIFF(YEAR, IFNULL(DOB,''), NOW()) AS Age";
		$SQL  		.=" FROM employee_master where Id = $id";
		
		$query 		= $this->db->query($SQL);
		
		$ret 		= $query->row();
		$obj_merged = (object) array_merge((array) $data, (array) $ret); 
         
		echo json_encode($obj_merged);
	}
	
	//==================================== Function to get details of Employee Picture details by Id - by Sajitha ================================
	public function getEmployeeProfilePic($id)
	{
		$db  				= new Database();
		$profilePhoto 		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$id}'");	
		$profilePhotoPath 	= $db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$id}'");	
		$sex 				= $db->getFieldValueById("employee_master", "Sex", "Id='{$id}'");	
		if(file_exists($profilePhotoPath."thumb/".$profilePhoto) &&  $profilePhoto != '') {
			$resData=array(
					"status"=>1,
					"path"=>$profilePhotoPath."thumb/".$profilePhoto
				   );
		}
		else {
			$resData=array(
					"status"=>0,
					"path"=>$profilePhotoPath,
					"Sex"=>$sex
				   );
		}		   
		echo json_encode($resData); 		   
	}
	
	//==================================== Function to get selected details of Employee by Id to view - by Sajitha ================================
	public function getViewEmployeeDetails()
	{
		$db  				= new Database();
		$nationality 		= $db->getFieldValueById("sys_nationality", "Nationality", "Id={$this->input->post('Nationality')}");
		$city 				= $db->getFieldValueById("sys_city_list", "city_name", "city_id={$this->input->post('City')}");	
		$state 				= $db->getFieldValueById("sys_state_list", "state_name", "state_id={$this->input->post('State')}");
		$country 			= $db->getFieldValueById("sys_country_list", "CountryEnglish", "Id={$this->input->post('Country')}");
		$jobTitle 			= $db->getFieldValueById("job_titles", "JobTitle", "Id={$this->input->post('JobTitle')}");	
		$employmentStatus 	= $db->getFieldValueById("employment_status", "EmploymentStatus", "Id={$this->input->post('EmploymentStatus')}");
		$superVisor 		= $db->getFieldValueById("employee_master", "FirstName", "Id={$this->input->post('SuperVisor')}")." ".$db->getFieldValueById("employee_master", "LastName", "Id={$this->input->post('SuperVisor')}");
		$indirectSuperVisor = $db->getFieldValueById("employee_master", "FirstName", "Id={$this->input->post('IndirectSuperVisor')}")." ".$db->getFieldValueById("employee_master", "LastName", "Id={$this->input->post('IndirectSuperVisor')}");	
		$approver 			= $db->getFieldValueById("employee_master", "FirstName", "Id={$this->input->post('Approver')}")." ".$db->getFieldValueById("employee_master", "LastName", "Id={$this->input->post('Approver')}");	
		$branch 			= $db->getFieldValueById("branches", "BranchName", "Id={$this->input->post('Branch')}");
		$dep 				= $db->getFieldValueById("department", "DepartmentName", "Id={$this->input->post('Dep')}");
		$userGroup 			= '';
		if($this->input->post('UserGroup') != 0)
			$userGroup 			= $db->getFieldValueById("sys_user_group", "UserGroup", "Id={$this->input->post('UserGroup')}");
		
		$superVisorPhoto 		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$this->input->post('SuperVisor')}'");	
		$superVisorPhotoPath 	= $db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$this->input->post('SuperVisor')}'");	
		$superVisorGender 		= $db->getFieldValueById("employee_master", "Sex", "Id='{$this->input->post('SuperVisor')}'");	
		if(file_exists($superVisorPhotoPath."thumb/".$superVisorPhoto) && $superVisorPhoto != '') {
			$superVisorPhoto=$superVisorPhotoPath."thumb/".$superVisorPhoto;
		}
		else {
			if($superVisorGender == "Male") 
				$superVisorPhoto=$superVisorPhotoPath."thumb/male.png";
			if($superVisorGender == "Female") 
				$superVisorPhoto=$superVisorPhotoPath."thumb/female.png";
		}	
		
		$indirectSuperVisorPhoto 		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$this->input->post('IndirectSuperVisor')}'");	
		$indirectSuperVisorPhotoPath 	= $db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$this->input->post('IndirectSuperVisor')}'");	
		$indirectSuperVisorGender 		= $db->getFieldValueById("employee_master", "Sex", "Id='{$this->input->post('IndirectSuperVisor')}'");	
		if(file_exists($indirectSuperVisorPhotoPath."thumb/".$indirectSuperVisorPhoto) && $indirectSuperVisorPhoto !='') {
			$indirectSuperVisorPhoto=$indirectSuperVisorPhotoPath."thumb/".$indirectSuperVisorPhoto;
		}
		else {
			if($indirectSuperVisorGender == "Male") 
				$indirectSuperVisorPhoto=$indirectSuperVisorPhotoPath."thumb/male.png";
			if($indirectSuperVisorGender == "Female") 
				$indirectSuperVisorPhoto=$indirectSuperVisorPhotoPath."thumb/female.png";
		}
		
		$approverPhoto 		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$this->input->post('Approver')}'");	
		$approverPhotoPath 	= $db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$this->input->post('Approver')}'");	
		$approverGender 	= $db->getFieldValueById("employee_master", "Sex", "Id='{$this->input->post('Approver')}'");	
		if(file_exists($approverPhotoPath."thumb/".$approverPhoto) && $approverPhoto != '') {
			$approverPhoto=$approverPhotoPath."thumb/".$approverPhoto;
		}
		else {
			if($approverGender == "Male") 
				$approverPhoto=$approverPhotoPath."thumb/male.png";
			if($approverGender == "Female") 
				$approverPhoto=$approverPhotoPath."thumb/female.png";
		}
		
		$skills 		= $this->input->post('Skills');	
		$otherSkills    = explode(",", $skills);
		$skillsName 	= '';
		for($i=0; $i<count($otherSkills); $i++) {
			$skillsName .= $db->getFieldValueById("job_skills", "Skill", "Id='{$otherSkills[$i]}'");
			if($i != count($otherSkills)-1)
				$skillsName .= ', ';
		}	
		$skillsDetails = $db->getFieldValueById("employee_master", "SkillsDetails", "Id='{$this->input->post('Id')}'");
		
		if($this->input->post('TopCerti') != 'OTHER')
			$topCerti = $db->getFieldValueById("job_certification", "Certification", "Id='{$this->input->post('TopCerti')}'");	
		else
			$topCerti = $this->input->post('TopCerti');
		
		$certi 		= $this->input->post('Certi');	
		$certification    = explode(",", $certi);
		$certiName 	= '';
		for($i=0; $i<count($certification); $i++) {
			$certiName .= $db->getFieldValueById("job_certification", "Certification", "Id='{$certification[$i]}'");	
			if($i != count($certification)-1)
				$certiName .= ', ';
		}
		
		$quali 		= $this->input->post('Quali');	
		$qualification    = explode(",", $quali);
		$qualiName 	= '';
		for($i=0; $i<count($qualification); $i++) {
			$qualiName .= $db->getFieldValueById("job_education", "Education", "Id='{$qualification[$i]}'");	
			if($i != count($qualification)-1)
				$qualiName .= ', ';
		}
		
		// Employee Languages
		$SQL 		 ="SELECT * ";
		$SQL 		.=" FROM `employee_language` where EmployeeId={$this->input->post('Id')} and Status='Active' order by `CreatedOn` ASC";
		
		$query 		= $this->db->query($SQL);
		$langName ="";
		
		if($query->num_rows()>0)
		{
			foreach ($query->result()  as $row)
			{
				$langProfi ="";	
				$langId  	= $row->LanguageId;
				if($row->Read == 'Yes') {
					$langProfi .= "Read";
					if($row->ReadProficiency)
						$langProfi .= "(".$row->ReadProficiency."), ";
				}	
				if($row->Write == 'Yes') {
					$langProfi .= "Write";
					if($row->WriteProficiency)
						$langProfi .= "(".$row->WriteProficiency."), ";
				}	
				if($row->Speak == 'Yes') {
					$langProfi .= "Speak";
					if($row->SpeakProficiency)
						$langProfi .= "(".$row->SpeakProficiency.") ";
				}		
				$langName 	.= '<a class="list-group-item"><label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;">'.$db->getFieldValueById("sys_languages", "Language", "Id='{$langId}'")." - ".$langProfi.'</label></a>';			
			} 
		} else {
			$langName = '<a class="list-group-item">...No Languages...</a>';
		}
		
		// Employee Dependents
		$SQL 		 ="SELECT * ";
		$SQL 		.=" FROM `employee_dependent` where EmployeeId={$this->input->post('Id')} and Status='Active' order by `CreatedOn` ASC";
		
		$query 		= $this->db->query($SQL);
		$depeDetails ="";
		
		if($query->num_rows()>0)
		{
			foreach ($query->result()  as $row)
			{
				$depeDetails 	.= '<a class="list-group-item"><label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;">'.$row->DependentName.
									'</label><br/>Relationship - <label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;">'.$row->Relationship.
									'</label><br/>Gender - <label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;">'.$row->DependentGender.
									'</label><br/>DOB - <label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;">'.date('d/m/Y', strtotime($row->DOB)).'</label>'.
									'<br/>Aadhaar Number - <label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;">'.$row->AadhaarNumber.'</label></a>';			
			} 
		} else {
			$depeDetails = '<a class="list-group-item">...No Dependents...</a>';
		}	
		
		// Employee Emergency Contacts
		$SQL 		 ="SELECT * ";
		$SQL 		.=" FROM `employee_emergency_contacts` where EmployeeId={$this->input->post('Id')} and Status='Active' order by `CreatedOn` ASC";
		
		$query 		= $this->db->query($SQL);
		$emergencyDetails ="";
		
		if($query->num_rows()>0)
		{
			foreach ($query->result()  as $row)
			{
						
				$emergencyDetails 	.= '<a class="list-group-item"><label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;">'.$row->ContactName.
										'</label><br/>Relationship - <label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;">'.$row->Relationship.
										'</label><br/>Email - <label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;">'.$row->Email.'</label>'.
										'</label><br/>Mobile - <label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;">'.$row->Mobile.'</label>'.
										'</label><br/>Home Phone - <label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;">'.$row->HomePhone.'</label></a>';			
			} 
		} else {
			$emergencyDetails = '<a class="list-group-item">...No  Emergency Contacts...</a>';
		}
		
		
		// Employee Documents
		$SQL 		 ="SELECT DocumentId,Id ";
		$SQL 		.=" FROM `employee_document` where EmployeeId={$this->input->post('Id')} and Status='Active' order by `CreatedOn` ASC";
		
		$query 		= $this->db->query($SQL);
		$docDetails ="";
		
		if($query->num_rows()>0)
		{
			foreach ($query->result()  as $row)
			{
				$SQLFiles 		 ="SELECT * ";
				$SQLFiles 		.=" FROM `employee_document_files` where EmployeeDocId={$row->Id} and Status='Active' order by `CreatedOn` ASC";
				
				$queryFiles 	= $this->db->query($SQLFiles);
				$docDetails 	.= '<a class="list-group-item">'.$db->getFieldValueById("employee_document_type", "DocumentTypeName", "Id='{$row->DocumentId}'").'</a>';
				if($queryFiles->num_rows()>0)
				{
					foreach ($queryFiles->result()  as $rowFiles)
					{
						$docDetails 	.= '<a href="'.base_url().$rowFiles->DocumentPath.$rowFiles->FileName.'" target="_blank" class="list-group-item"><label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;margin-left:25px !important;"><i class="fa fa-eye" aria-hidden="true"></i> '.$rowFiles->FileDesc.'</label></a>';			
					}
				}
			} 
		} else {
			$docDetails = '<a class="list-group-item">...No Documents...</a>';
		}	
		
		// Employee More Experience Details
		$SQL 		 ="SELECT Details ";
		$SQL 		.=" FROM `employee_more_experience` where EmployeeId={$this->input->post('Id')} and Status='Active' order by `CreatedOn` ASC";
		
		$query 		= $this->db->query($SQL);
		$moreExpDetails ='<a class="list-group-item">More Experience Details </a>';
		
		if($query->num_rows()>0)
		{
			foreach ($query->result()  as $row)
			{
				$moreExpDetails 	.= '<a class="list-group-item"><label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;">'.$row->Details.'</a>';			
			} 
		} else {
			$moreExpDetails = '';
		}	
		
		// Employee Beneficiary Information
		$SQL 		 ="SELECT * ";
		$SQL 		.=" FROM `employee_beneficiary` where EmployeeId={$this->input->post('Id')} and Status='Active' order by `CreatedOn` ASC";
		
		$query 		= $this->db->query($SQL);
		$beneDetails ="";
		
		if($query->num_rows()>0)
		{
			foreach ($query->result()  as $row)
			{
				$beneDetails 	.= '<a class="list-group-item"><label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;">'.$row->BeneficiaryName.
									'</label><br/>Relationship - <label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;">'.$row->Relationship.
									'</label><br/>Gender - <label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;">'.$row->Gender.
									'</label><br/>DOB - <label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;">'.date('d/m/Y', strtotime($row->DOB)).'</label>'.
									'<br/>Aadhaar Number - <label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;">'.$row->AadhaarNumber.'</label>'.
									'<br/>Allocation - <label style="font-size:13px;color:#7571f9;margin-bottom:1px !important;">'.$row->Allocation.'</label></a>';					
			} 
		} else {
			$beneDetails = '<a class="list-group-item">...No Beneficiary Information...</a>';
		}	
		
			$resData=array(
					"status"=>0,
					"Nationality"=>$nationality,
					"City"=>$city,
					"State"=>$state,
					"Country"=>$country,
					"JobTitle"=>$jobTitle,
					"EmploymentStatus"=>$employmentStatus,
					"SuperVisor"=>$superVisor,
					"SuperVisorPhoto"=>$superVisorPhoto,
					"IndirectSuperVisor"=>$indirectSuperVisor,
					"IndirectSuperVisorPhoto"=>$indirectSuperVisorPhoto,
					"Approver"=>$approver,
					"ApproverPhoto"=>$approverPhoto,
					"Branch"=>$branch,
					"Dep"=>$dep,
					"UserGroup"=>$userGroup,
					"OtherSkills"=>$skillsName,
					"SkillsDetails"=>$skillsDetails,
					"TopCertification"=>$topCerti,
					"Certification"=>$certiName,
					"Qualification"=>$qualiName,
					"Languages"=>$langName,
					"Dependents"=>$depeDetails,
					"Beneficiary"=>$beneDetails,
					"Contacts"=>$emergencyDetails,
					"Documents"=>$docDetails,
					"MoreExperience"=>$moreExpDetails
				   );
			   
		echo json_encode($resData); 		   
	}
	
	// getEmployeeId function is called when adding a Employee to get the 'EmployeeId' filled with Last EmployeeId + 1
	// getting Employee Id, by calling the stored proceedure getNumberPRO
	public function getEmployeeId() //calling the stored procedure, to get number.
	{
		$db   	= new Database();
		$data  	= array('EMPLOYEE', '0');  // to increment second parameter should 1
		$employeeId 	= $db->callProcedure("getNumberPRO", $data, TRUE);  //  last parameter is TRUE for get the output.
		if($employeeId)
		{
		   		   
		   $resData=array(
					"status"=>true,
					"message"=>"Success!!",
					"employeeId"=>$employeeId
				   );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, No record for Employee Id!!"
				   );
		   
	   }
	   echo json_encode($resData);  
	}
	
	//==================================== saveEmployee function for Saving New Employee details - by Sajitha ================================
	public function saveEmployee()
	{
		if(isset($_SESSION["REG_CAPTCHA_WORD"]))
        {
            if($this->input->post("RegCaptcha") !=  $_SESSION["REG_CAPTCHA_WORD"] )
            {
				
				$resData  = array(
									"status" => false,
									"message" => "Error! Invalid security code entered, please try again."
					
								  );
				echo json_encode($resData);
				exit;				  
		     }	
		 }
		
		$db  = new Database();
		$where   		= " UPPER(FirstName)='".strtoupper($this->input->post('Emp_Name'))."' and  UPPER(LastName)='".strtoupper($this->input->post('Emp_Last_Name'))."'  and Email='".$this->input->post('Email')."'  and Mobile='".$this->input->post('Mobile_No')."'  and Id!={$id}";
		$res 			= $db->checkExistance("employee_master", $where); // if exists id value will be returned.
		
		if($res)
		{
			echo json_encode(
				array("status" => false, 
					  "message"=>"These detail/s are already created and exists! Please change the First Name / Last Name / Mobile / Email."
					 )
			);
			exit;
		}
		
		$id				= $this->input->post("hidID");
		$uploadDir		= '';
		$uploadDirCV	= '';
		$currentEmployee ='';
		$data 			= array();  
		$newEmployee  	= $this->input->post('Emp_Name');
		$dob_str 		= $this->input->post('Emp_DOB');
		$dob_str 		= str_replace('/', '-', $dob_str);
		$dob 			= date('Y-m-d',(strtotime($dob_str)));
		
		$joindate_str 	= $this->input->post('Joined_Date');
		$joindate_str 	= str_replace('/', '-', $joindate_str);
		$joindate 		= date('Y-m-d',(strtotime($joindate_str)));
		
		if($this->input->post('Trainee_Date')) {
			$traineedate_str= $this->input->post('Trainee_Date');
			$traineedate_str= str_replace('/', '-', $traineedate_str);
			$traineedate 	= date('Y-m-d',(strtotime($traineedate_str)));
		}
		
		if($this->input->post('Reappointment_Date')) {
			$reappointmentdate_str 		= $this->input->post('Reappointment_Date');
			$reappointmentdate_str 		= str_replace('/', '-', $reappointmentdate_str);
			$reappointmentdate 	= date('Y-m-d',(strtotime($reappointmentdate_str)));
		}
		
		if($this->input->post('Probation_Date')) {
			$probationdate_str 		= $this->input->post('Probation_Date');
			$probationdate_str 		= str_replace('/', '-', $probationdate_str);
			$probationdate 	= date('Y-m-d',(strtotime($probationdate_str)));
		}
		
		if($this->input->post('Confirm_Date')) {
			$confirmdate_str 		= $this->input->post('Confirm_Date');
			$confirmdate_str 		= str_replace('/', '-', $confirmdate_str);
			$confirmdate 	= date('Y-m-d',(strtotime($confirmdate_str)));
		}
		
		if($this->input->post('Termination_Date')) {
			$terminatedate_str 		= $this->input->post('Termination_Date');
			$terminatedate_str 		= str_replace('/', '-', $terminatedate_str);
			$terminatedate 	= date('Y-m-d',(strtotime($terminatedate_str)));
		}
		
		if($this->input->post('Scheduled_Exit_Date')) {
			$scheduledexitdate_str 		= $this->input->post('Scheduled_Exit_Date');
			$scheduledexitdate_str 		= str_replace('/', '-', $scheduledexitdate_str);
			$scheduledexitdate 	= date('Y-m-d',(strtotime($scheduledexitdate_str)));
		}
		
		if($this->input->post('Last_Exit_Date')) {
			$lastexitdate_str 		= $this->input->post('Last_Exit_Date');
			$lastexitdate_str 		= str_replace('/', '-', $lastexitdate_str);
			$lastexitdate 	= date('Y-m-d',(strtotime($lastexitdate_str)));
		}
		
		if($this->input->post('Passport_Expiry_Date')) {
			$passportexpirydate_str 		= $this->input->post('Passport_Expiry_Date');
			$passportexpirydate_str 		= str_replace('/', '-', $passportexpirydate_str);
			$passportexpirydate 	= date('Y-m-d',(strtotime($passportexpirydate_str)));
		} 
		
		if($this->input->post('Driving_Expiry_Date')) {
			$drivingexpirydate_str 		= $this->input->post('Driving_Expiry_Date');
			$drivingexpirydate_str 		= str_replace('/', '-', $drivingexpirydate_str);
			$drivingexpirydate 	= date('Y-m-d',(strtotime($drivingexpirydate_str)));
		} 
		
		$profilePhoto   = '';
		$cvName 		= '';
		
		// Profile Picture uploading starts
		if(isset($_FILES))
		{
			$TotalFiles = $_POST["TotalFiles"];
			if($TotalFiles != 0) {
				//foreach($_FILES as $file)
				for ($i=0;  $i<=$TotalFiles; $i++)
				{
					if(isset($_FILES["file_".$i]))
					{
						// tmp_name | name | type | size | error
						
						// -- Check here type  size and if any error.
						$fileName 	= $_FILES["file_".$i]['name'];
						$imgSize 	= $_FILES["file_".$i]['size'];
								
								// Check file size '5MB' or from max.image byte upload settings, in site settings module.
								if($imgSize < 5000000){}
								else{
											$msgError = "Profile picture " . $fileName . " file is too large. Only 5 MB allowed!.";
											$errMSG   = "Error : Sorry," .$msgError;
									}
							
						$tempName	= $_FILES["file_".$i]['tmp_name'];
						$uploadDir	= "./uploads/employee_profile_image/"; // this would be the upload file path. Exactly specify here or from the settings.
						
						// uploadImage is defined in site_helper (system/helper folder).
						$uploadResult = uploadImage($tempName, $uploadDir, "", $fileName, "", "",  TRUE, FALSE, FALSE,$_POST["Pic_Name"]);
						if($uploadResult['status'] == 'true') {
							$profilePhoto = $uploadResult['fileName'];
							if($id == $_SESSION["EMPLOYEE_ID"]) { // checking the login user id to change profile pic
								$_SESSION['PROFILE_PHOTO'] = $profilePhoto;
								$currentEmployee = $uploadDir.$profilePhoto;
							}	
						} else {
							echo json_encode(
									array("status" => false, 
										  "message"=>$uploadResult['message']
										 )
								);
							exit;
						}
					}
				}
			} else { 
				if($id==0) {
					$uploadDir	= "./uploads/employee_profile_image/";
					if($this->input->post('Gender') == "Male")
						$profilePhoto = "male.png";
					else
						$profilePhoto = "female.png";
				}
			}
		} 
		
		// CV uploading starts
		if(isset($_FILES))
		{
			if(isset($_FILES["filecv_"]))
					{
						// tmp_name | name | type | size | error
						
						// -- Check here type  size and if any error.
						$fileName 	= $_FILES["filecv_"]['name'];
						$imgSize 	= $_FILES["filecv_"]['size'];
								
								// Check file size '5MB' or from max.image byte upload settings, in site settings module.
								if($imgSize < 5000000){}
								else{
											$msgError = "CV " . $fileName . " file is too large. Only 5 MB allowed!.";
											$errMSG   = "Error : Sorry," .$msgError;
									}
							
						$tempName	= $_FILES["filecv_"]['tmp_name'];
						$uploadDirCV	= "./uploads/employee_cv/"; // this would be the upload file path. Exactly specify here or from the settings.
						
						// uploadImage is defined in site_helper (system/helper folder).
						$uploadResult = uploadDocument($tempName, $uploadDirCV, "", $fileName, "", "",  TRUE, TRUE, TRUE,$_POST["CV_Name"]);
						if($uploadResult['status'] == 'true') {
							$cvName = $uploadResult['fileName'];
							
						} else {
							echo json_encode(
									array("status" => false, 
										  "message"=>$uploadResult['message']
										 )
								);
							exit;
						}
				}
			
				
		} 
		
		// Profile Picture uploading ends
		
		if($id==0) // if add
		{    
			$data = array(
						'Code' => $this->input->post('Emp_Id'),
						'FirstName' => $newEmployee,
						'LastName' => $this->input->post('Emp_Last_Name'),
						'Status' => $this->input->post('Status'),
						'Address' => $this->input->post('Address'),
						'PostalCode' => $this->input->post('Postal_Code'),
						'CountryId' => $this->input->post('Country'),
						'StateId' => $this->input->post('State'),
						'CityId' => $this->input->post('City'),
						'HomePhone' => $this->input->post('Home_Phone'),
						'DOB' => $dob,
						'Sex' => $this->input->post('Gender'),
						'BirthCity' => $this->input->post('BirthCity'),
						'MaritalStatus' => $this->input->post('Marital_Status'),
						'SpouseName' => $this->input->post('Spouse_Name'), 
						'JobTitleId' => $this->input->post('Job_Title'),
						'EmploymentStatusId' => $this->input->post('Employ_Status'),
						'BranchId' => $this->input->post('BranchName'),
						'DepId' => $this->input->post('DepartmentName'),
						'TraineeDate' => $traineedate,
						'ReappointmentDate' => $reappointmentdate,
						'JoinDate' => $joindate,
						'JoinConfirmationDate' => $confirmdate,
						'ProbationDate' => $probationdate,
						'TerminateDate' => $terminatedate,
						'ScheduledExitDate' => $scheduledexitdate,
						'LastExitDate' => $lastexitdate,
						'Email' => $this->input->post('Email'),
						'AlternateEmail' => $this->input->post('AlternateEmail'),
						'Mobile' => $this->input->post('Mobile_No'),
						'Whatsapp' => $this->input->post('Whatsapp_No'),
						'Nationality' => $this->input->post('Nationality'),
						'HandicapStatus' => $this->input->post('HandicapStatus'),
						'Hobbies' => $this->input->post('Hobbies'),
						'AadhaarNumber' => $this->input->post('Aadhar_Number'),
						'PANNumber' => $this->input->post('PAN_Number'),
						'DrivingLicenseNo' => $this->input->post('Driving_License_No'),
						'PassportNumber' => $this->input->post('Passport_Number'),
						'PassportExpiryDate' => $passportexpirydate, 
						'PrimaryBankAccount' => $this->input->post('Primary_Bank_Account'),
						'PrimaryBankName' => $this->input->post('Primary_Bank_Name'),
						'IFSCCode' => $this->input->post('IFSC_Code'),
						'SocialSecurityNumber' => $this->input->post('Social_Security_Number'),
						'DrivingExpiryDate' => $drivingexpirydate,
						'SuperVisorId' => $this->input->post('Supervisor'),
						'IndirectSuperVisorId' => $this->input->post('IndirectSupervisor'),
						'ApproverId' => $this->input->post('FL_Approver'),
						'Status' => $this->input->post('Status'),
						'Remark' => $this->input->post('Remarks'),
						'CreatedId'		=>	$_SESSION['EMPLOYEE_ID'],
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),	
						'ProfilePhotoPath' => $uploadDir,
						'ProfilePhoto' => $profilePhoto,
						'CVPath' => $uploadDirCV,
						'CVName' => $cvName,
					);
				
		}
		else { // if edit
				$data = array(
						'FirstName' => $newEmployee,
						'LastName' => $this->input->post('Emp_Last_Name'),
						'Status' => $this->input->post('Status'),
						'Address' => $this->input->post('Address'),
						'PostalCode' => $this->input->post('Postal_Code'),
						'CountryId' => $this->input->post('Country'),
						'StateId' => $this->input->post('State'),
						'CityId' => $this->input->post('City'),
						'HomePhone' => $this->input->post('Home_Phone'),
						'DOB' => $dob,
						'Sex' => $this->input->post('Gender'),
						'BirthCity' => $this->input->post('BirthCity'),
						'MaritalStatus' => $this->input->post('Marital_Status'),
						'SpouseName' => $this->input->post('Spouse_Name'), 
						'JobTitleId' => $this->input->post('Job_Title'),
						'EmploymentStatusId' => $this->input->post('Employ_Status'),
						'BranchId' => $this->input->post('BranchName'),
						'DepId' => $this->input->post('DepartmentName'),
						'TraineeDate' => $traineedate,
						'ReappointmentDate' => $reappointmentdate,
						'ProbationDate' => $probationdate,
						'JoinDate' => $joindate,
						'JoinConfirmationDate' => $confirmdate,
						'TerminateDate' => $terminatedate,
						'ScheduledExitDate' => $scheduledexitdate,
						'LastExitDate' => $lastexitdate,
						'Email' => $this->input->post('Email'),
						'AlternateEmail' => $this->input->post('AlternateEmail'),
						'Mobile' => $this->input->post('Mobile_No'),
						'Whatsapp' => $this->input->post('Whatsapp_No'),
						'Nationality' => $this->input->post('Nationality'),
						'HandicapStatus' => $this->input->post('HandicapStatus'),
						'Hobbies' => $this->input->post('Hobbies'),
						'AadhaarNumber' => $this->input->post('Aadhar_Number'),
						'PANNumber' => $this->input->post('PAN_Number'),
						'DrivingLicenseNo' => $this->input->post('Driving_License_No'),
						'DrivingExpiryDate' => $drivingexpirydate,
						'PassportNumber' => $this->input->post('Passport_Number'),
						'PassportExpiryDate' => $passportexpirydate,  
						'PrimaryBankAccount' => $this->input->post('Primary_Bank_Account'),
						'PrimaryBankName' => $this->input->post('Primary_Bank_Name'),
						'IFSCCode' => $this->input->post('IFSC_Code'), 
						'SocialSecurityNumber' => $this->input->post('Social_Security_Number'),
						'SuperVisorId' => $this->input->post('Supervisor'),
						'IndirectSuperVisorId' => $this->input->post('IndirectSupervisor'),
						'ApproverId' => $this->input->post('FL_Approver'),
						'Status' => $this->input->post('Status'),
						'Remark' => $this->input->post('Remarks'),
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),				
						);
				if($profilePhoto !='' && $uploadDir != '') {
					 $data += [ "ProfilePhoto" => $profilePhoto, "ProfilePhotoPath" => $uploadDir ];
						
					//deleting existing employee profile picture and thumbnail		
					$db  				= new Database();
					$profilePhoto 		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$id}'");	
					$profilePhotoPath 	= $db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$id}'");	
					if($profilePhoto != 'male.png' && $profilePhoto != 'female.png' && (file_exists($profilePhotoPath.$profilePhoto))) {
						unlink($profilePhotoPath.$profilePhoto);
						if(file_exists($profilePhotoPath."thumb/".$profilePhoto))
							unlink($profilePhotoPath."thumb/".$profilePhoto);
					}
				}
				if($cvName !='' && $uploadDirCV != '') {
					 $data += [ "CVName" => $cvName, "CVPath" => $uploadDirCV ];
					//deleting existing employee cv		
					
					$cvName 		= $db->getFieldValueById("employee_master", "CVName", "Id='{$id}'");	
					$uploadDirCV 	= $db->getFieldValueById("employee_master", "CVPath", "Id='{$id}'");	
					if(file_exists($uploadDirCV.$cvName)) {
						unlink($uploadDirCV.$cvName);						
					}
				}				
		}
		$res	= $this->Employee_model->saveData($data, $id);
		if($id == 0) {
			$db   	= new Database();
			$data  	= array('EMPLOYEE', '1');  // to increment second parameter should 1
			$db->callProcedure("getNumberPRO", $data, TRUE);  //  last parameter is TRUE for get the output.
		}
		$otherCertList = '';
		if($this->input->post('Other_Cert_Name') != '') {
			$SQL 		 ="SELECT DISTINCT `OtherCertificate`";
			$SQL 		.=" FROM `employee_master` where OtherCertificate!='' order by `CreatedOn` ASC";
			
			$query 		= $this->db->query($SQL);
			if($query->num_rows()>0)
			{
				$retHTML ="<option value=''>...Choose Other Certificate...</option>";
				foreach ($query->result()  as $row)
				{
					$otherCert  	= $row->OtherCertificate;
					$retHTML 	.= "<option  value='{$otherCert}'>{$otherCert}</option>";			
				} 
			} else {
				$retHTML = "<option value='No Other Certificate' disabled selected>...No Other Certificates...</option>";
			}
			$otherCertList = $retHTML;
		}
		$resData    = array(
								"status" => true,
								'message' => 'Employee details saved successfully!!',
								'currentEmployee' => $currentEmployee,
								'otherCertList' => $otherCertList
						 );
						 
		if($id	==	0)
		{
		   $resData["NewEmpId"]  	= $res; // inserted id for CategoryCombo refresh select.
		   $resData["NewEmployee"]  = $newEmployee;
		}	

		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$moduleTab="new_employee";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		/*if($add != '')
			$data["add"]		 	= $add; // for quick link
		else
			$data["add"]		 	= ''; // for quick link*/
	
		$resData = (object) array_merge((array) $resData, (array) $data);
	    echo json_encode($resData);
	}
	
	
	//====================================Function to save Employee Skills by Id ================================
	public function saveEmployeeSkills() {
		$id				= $this->input->post("EmployeeId");
		$other_skills  	= $this->input->post('Other_Skills');
		$details 		= $this->input->post('Details');
		$SQL 		 ="UPDATE `employee_master`";
		$SQL 		.=" SET `OtherSkills` = '".$other_skills."',`SkillsDetails` = '".$details."' where `Id` = '".$id."'";
		
		$query 		= $this->db->query($SQL);
		$resData    = array(
								"status" => true,
								'message' => 'Employee Skills details saved successfully!!'
						 );
						 		
	    echo json_encode($resData);
	}	
	
	//====================================Function to save Employee Education by Id ================================
	public function saveEmployeeEdu() {
		$id				= $this->input->post("EmployeeId");
		$top_qualification  	= $this->input->post('Top_Qualification');
		$institution_name 		= $this->input->post('Institution_Name');
		$quali_university 		= $this->input->post('Quali_University');
		$passed_year  			= $this->input->post('Passed_Year');
		$qualification_percentage 	= $this->input->post('Qualification_Percentage');
		$qualification  			= $this->input->post('Qualification');
		$quali_duration				= $this->input->post('Quali_Duration');
		$qualification_details 		= $this->input->post('Qualification_Details');
		
		$SQL 		 ="UPDATE `employee_master`";
		$SQL 		.=" SET `TopQualification` = '".$top_qualification."',`InstitutaionOrCollege` = '".$institution_name."',`InstitutaionOrCollege` = '".$institution_name."',`QualiUniversity` = '".$quali_university."',`QualiDuration` = '".$quali_duration."', `PassedYear` = '".$passed_year."',
		`QualificationPercentage` = '".$qualification_percentage."', `Qualification` = '".$qualification."',
		`QualificationDetails` = '".$qualification_details."' where `Id` = '".$id."'";
		
		$query 		= $this->db->query($SQL);
		$resData    = array(
								"status" => true,
								'message' => 'Employee Education details saved successfully!!'
						 );
						 		
	    echo json_encode($resData);
	}
	
	//====================================Function to save Employee Certification by Id ================================
	public function saveEmployeeCert() {
		$id				= $this->input->post("EmployeeId");
		$top_certification  	= $this->input->post('Top_Certification');
		$institution_name 		= $this->input->post('Institution_Name');
		$completed_year  		= $this->input->post('Completed_Year'); 
		$cert_duration  		= $this->input->post('Cert_Duration');
		$other_certificate 		= $this->input->post('Other_Cert_Name');
		$renewal_date_str 		= $this->input->post('Cert_Renewal_Date');
		if($renewal_date_str) {
			$renewal_date_str 		= str_replace('/', '-', $renewal_date_str);
			$cert_renewal_date 		= date('Y-m-d',(strtotime($renewal_date_str)));
		}

		$certification  		= $this->input->post('Certification');
		$certification_details 	= $this->input->post('Certification_Details');
		
		$SQL 		 ="UPDATE `employee_master`";
		$SQL 		.=" SET `TopCertification` = '".$top_certification."',`CertiInstitutaionOrCollege` = '".$institution_name."', `CertCompletedYear` = '".$completed_year."', `CertiDuration` = '".$cert_duration."', `CertiRenewalDate` = '".$cert_renewal_date."',
		`OtherCertificate` = '".$other_certificate."', `Certification` = '".$certification."',
		`CertificationsDetails` = '".$certification_details."' where `Id` = '".$id."'";
		
		$query 		= $this->db->query($SQL);
		
		$otherCertList = '';
		if($this->input->post('Other_Cert_Name') != '') {
			$SQL 		 ="SELECT DISTINCT `OtherCertificate`";
			$SQL 		.=" FROM `employee_master` where OtherCertificate!='' order by `CreatedOn` ASC";
			
			$query 		= $this->db->query($SQL);
			if($query->num_rows()>0)
			{
				$retHTML ="<option value=''>...Choose Other Certificate...</option>";
				foreach ($query->result()  as $row)
				{
					$otherCert  	= $row->OtherCertificate;
					$retHTML 	.= "<option  value='{$otherCert}'>{$otherCert}</option>";			
				} 
			} else {
				$retHTML = "<option value='No Other Certificate' disabled selected>...No Other Certificates...</option>";
			}
			$otherCertList = $retHTML;
		}
		
		
		
		$resData    = array(
								"status" => true,
								'message' => 'Employee Certification details saved successfully!!',
								'otherCertList' => $otherCertList
						 );
						 		
	    echo json_encode($resData);
	}
	
	//====================================Function to save Employee Experience by Id ================================
	public function saveEmployeeExp() {
		$id							= $this->input->post("EmployeeId");
		$total_experience  			= $this->input->post('Total_Experience');
		$experience_details 		= $this->input->post('Experience_Details');
		
		$exp_duration_from 			= '';
		if($this->input->post('ExpDurationFrom')) {
			$durationfrom_str 			= $this->input->post('ExpDurationFrom');
			$durationfrom_str 			= str_replace('/', '-', $durationfrom_str);
			$exp_duration_from			= date('Y-m-d',(strtotime($durationfrom_str)));		
		} 
		
		$exp_duration_to			= '';
		if($this->input->post('ExpDurationTo')) {
			$durationto_str 			= $this->input->post('ExpDurationTo');
			$durationto_str 			= str_replace('/', '-', $durationto_str);
			$exp_duration_to			= date('Y-m-d',(strtotime($durationto_str)));	
		}
		
		$previous_salary  			= $this->input->post('Previous_Salary');
		$expected_salary  			= $this->input->post('Expected_Salary');
		$previous_company 			= $this->input->post('Previous_Company');
		$previous_designation  		= $this->input->post('Previous_Designation');
		
		$SQL 		 ="UPDATE `employee_master`";
		$SQL 		.=" SET `TotalExperience` = '".$total_experience."',`ExperianceDetails` = '".$experience_details."', `ExpDurationFrom` = '".$exp_duration_from."',`ExpDurationTo` = '".$exp_duration_to."',
		`ExpectedSalary` = '".$expected_salary."', `PreviousCompany` = '".$previous_company."', `PreviousSalary` = '".$previous_salary."',
		`PreviousDesignation` = '".$previous_designation."' where `Id` = '".$id."'";
		
		$query 		= $this->db->query($SQL);
		$resData    = array(
								"status" => true,
								'message' => 'Employee Experience details saved successfully!!'
						 );
						 		
	    echo json_encode($resData);
	}
	
	//====================================Function to save Employee's more experience by Id ================================
	public function saveMoreExperience() {
		$id							= $this->input->post("hidID");
		$more_experience  			= $this->input->post('Details');
		$status 					= $this->input->post('Status');
		
		$SQL 		 ="INSERT INTO `employee_more_experience` (Details,Status,EmployeeId)";
		$SQL 		.=" VALUES('".$more_experience."','".$status."','".$id."')";
		$query 		= $this->db->query($SQL);
		$resData    = array(
								"status" => true,
								"message" => "Employee's more experience details saved successfully!!"
						 );
						 		
	    echo json_encode($resData);
	} 
	
	//====================================Function to save Employee's more experience by Id ================================
	public function getViewEmployeeMoreExp($id) {
				
		$SQL 		 ="SELECT Details,Status from `employee_more_experience`";
		$SQL 		.=" where EmployeeId={$id}";
		$query 		= $this->db->query($SQL);
		$retHTML 	="";
		if($query->num_rows()>0)
		{
			$retHTML 	.= "<div class='col-md-9'><h4>More Experience Details</h4></div>";	
			$retHTML 	.= "<div class='col-md-3'><h4>Status</h4></div><hr class='mt-4'/>";
			foreach ($query->result()  as $row)
			{
				$retHTML 	.= "<div class='col-md-9'>".$row->Details."</div>";	
				$retHTML 	.= "<div class='col-md-3'>".$row->Status."</div>";					
			} 
		} else {
			$retHTML = "";
		}	
		echo $retHTML;		
		
	} 
	
	//====================================Function to delete Employee by Id ================================
	public function deleteEmployee($id)
	{
        
		//deleting employee profile picture and thumbnail
		$db  				= new Database();
		$profilePhoto 		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$id}'");	
		$profilePhotoPath 	= $db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$id}'");	
		if($profilePhoto != 'male.png' && $profilePhoto != 'female.png' && (file_exists($profilePhotoPath.$profilePhoto))) {
			unlink($profilePhotoPath.$profilePhoto);
			if(file_exists($profilePhotoPath."thumb/".$profilePhoto))
				unlink($profilePhotoPath."thumb/".$profilePhoto);
		}	
		
		$cvName 		= $db->getFieldValueById("employee_master", "CVName", "Id='{$id}'");	
		$uploadDirCV 	= $db->getFieldValueById("employee_master", "CVPath", "Id='{$id}'");	
		if(file_exists($uploadDirCV.$cvName)) {
			unlink($uploadDirCV.$cvName);						
		}
				
		$res=  $this->Employee_model->deleteData($id);
	    if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
			
		$moduleTab="new_employee";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		/*if($add != '')
			$data["add"]		 	= $add; // for quick link
		else
			$data["add"]		 	= ''; // for quick link*/
		   
       $resData =array();
	   if($res)
	   {
		   		   
		   $resData=array(
					"status"=>true,
					"message"=>"Employee deleted successfully!!"
				   );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete employee!!"
				   );
		   
	   }
	   $resData = (object) array_merge((array) $resData, (array) $data);
	   echo json_encode($resData);  
	} 
   
	//==================================== saveEmployeeProfileFast function for Saving Employee Profile Picture when double clicking the profile image icon on the right side of header / clicking on the edit profile picture button in the employee view section - by Sajitha ================================
	public function saveEmployeeProfileFast()
	{
		$id				= $this->input->post("EmpId");//$_SESSION['EMPLOYEE_ID'];
		$uploadDir		= '';
		
		$data 			= array();  
		$db  			= new Database();
		$employeeName 	= $db->getFieldValueById("employee_master", "FirstName", "Id='{$id}'");	
		//$gender  		= $db->getFieldValueById("employee_master", "Sex", "Id='{$id}'");	
		
		$profilePhoto   = '';
		
		// Profile Picture uploading starts
		if(isset($_FILES))
		{
			$TotalFiles = $_POST["TotalFiles"];
			if($TotalFiles != 0) {
				//foreach($_FILES as $file)
				for ($i=0;  $i<=$TotalFiles; $i++)
				{
					if(isset($_FILES["file_".$i]))
					{
						// tmp_name | name | type | size | error
						
						// -- Check here type  size and if any error.
						$fileName 	= $_FILES["file_".$i]['name'];
						$imgSize 	= $_FILES["file_".$i]['size'];
								
								// Check file size '5MB' or from max.image byte upload settings, in site settings module.
								if($imgSize < 5000000){}
								else{
											$msgError = "Profile picture " . $fileName . " file is too large. Only 5 MB allowed!.";
											$errMSG   = "Error : Sorry," .$msgError;
									}
							
						$tempName	= $_FILES["file_".$i]['tmp_name'];
						$uploadDir	= "./uploads/employee_profile_image/"; // this would be the upload file path. Exactly specify here or from the settings.
						
						// uploadImage is defined in site_helper (system/helper folder).
						$uploadResult = uploadImage($tempName, $uploadDir, "", $fileName, "", "",  TRUE, FALSE, FALSE,$employeeName);
						if($uploadResult['status'] == 'true') {
							$profilePhoto = $uploadResult['fileName'];
							if($id == $_SESSION["EMPLOYEE_ID"]) { // checking the login user id to change profile pic
								$_SESSION['PROFILE_PHOTO'] = $profilePhoto;
							}	
						} else {
							echo json_encode(
									array("status" => false, 
										  "message"=>$uploadResult['message']
										 )
								);
							exit;
						}
					}
				}
			} 
		} 
		
		// Profile Picture uploading ends
		 // edit
				$data = array(						
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),				
						);
				if($profilePhoto !='' && $uploadDir != '') {
					 $data += [ "ProfilePhoto" => $profilePhoto, "ProfilePhotoPath" => $uploadDir ];
				 	$newPhoto = $profilePhoto;	
					//deleting existing employee profile picture and thumbnail		
					$db  				= new Database();
					$profilePhoto 		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$id}'");	
					$profilePhotoPath 	= $db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$id}'");	
					if($profilePhoto != 'male.png' && $profilePhoto != 'female.png' && (file_exists($profilePhotoPath.$profilePhoto))) {
						unlink($profilePhotoPath.$profilePhoto);
						if(file_exists($profilePhotoPath."thumb/".$profilePhoto))
							unlink($profilePhotoPath."thumb/".$profilePhoto);
					}	
				}			
		
		//updating the profile picture in the table
		$res	= $this->Employee_model->saveData($data, $id);
	   
		$resData    = array(
								"status" => true,
								'message' => 'Employee profile picture edited successfully!!',
								'profilePhoto' => $uploadDir.$newPhoto
						 );
		
	    echo json_encode($resData);
	} 

	//==================================== deleteEmployeeProfilePic function for Deleting Employee Profile Picture when clicking the delete profile picture button in the employee view section - by Sajitha ================================
	public function deleteEmployeeProfilePic($id)
	{
		$data 			= array();  
		$data = array(						
						'ProfilePhoto' => '',				
						);
		//deleting existing employee profile picture and thumbnail		
		$db  				= new Database();
		$profilePhoto 		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$id}'");	
		$profilePhotoPath 	= $db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$id}'");	
		$sex 				= $db->getFieldValueById("employee_master", "Sex", "Id='{$id}'");
		if($profilePhoto != 'male.png' && $profilePhoto != 'female.png' && (file_exists($profilePhotoPath.$profilePhoto))) {
			unlink($profilePhotoPath.$profilePhoto);
			if(file_exists($profilePhotoPath."thumb/".$profilePhoto))
				unlink($profilePhotoPath."thumb/".$profilePhoto);
		}
		
		if($sex == 'Male')
			$profilePhoto = 'male.png';
		else
			$profilePhoto = 'female.png';
		
		//updating the profile picture in the table
		$res	= $this->Employee_model->saveData($data, $id);	
		$resData    = array(
							"status" => true,
							'message' => 'Employee profile picture deleted successfully!!',
							'profilePhoto' => $profilePhotoPath.$profilePhoto,
						 );
		
	    echo json_encode($resData);	
	}
	
	//==================================== saveNewEmployee function for Saving New Employee details filling from admin Login page(New Employee Registration) - by Sajitha ================================
	public function saveNewEmployee()
	{
		if(isset($_SESSION["REG_CAPTCHA_WORD"]))
        {
            if($this->input->post("RegCaptcha") !=  $_SESSION["REG_CAPTCHA_WORD"] )
            {
				$resData  = array(
									"status" => false,
									"message" => "Error! Invalid security code entered, please try again."
					
								  );
				echo json_encode($resData);
				exit;				  
		     }	
		 }
		
		$id				= $this->input->post("hidID");
		$uploadDir		= '';
		$uploadDirCV	= '';
		$data 			= array();  
		$newEmployee  	= $this->input->post('Emp_Name');
		$dob_str 		= $this->input->post('Emp_DOB');
		$dob_str 		= str_replace('/', '-', $dob_str);
		$dob 			= date('Y-m-d',(strtotime($dob_str)));
		$profilePhoto   = '';
		$cvName 		= '';
		
		if($this->input->post('Joined_Date')) {
			$joindate_str 	= $this->input->post('Joined_Date');
			$joindate_str 	= str_replace('/', '-', $joindate_str);
			$joindate 		= date('Y-m-d',(strtotime($joindate_str)));
		}
		
		if($this->input->post('Trainee_Date')) {
			$traineedate_str= $this->input->post('Trainee_Date');
			$traineedate_str= str_replace('/', '-', $traineedate_str);
			$traineedate 	= date('Y-m-d',(strtotime($traineedate_str)));
		}
		
		if($this->input->post('Probation_Date')) {
			$probationdate_str 		= $this->input->post('Probation_Date');
			$probationdate_str 		= str_replace('/', '-', $probationdate_str);
			$probationdate 	= date('Y-m-d',(strtotime($probationdate_str)));
		}
		
		if($this->input->post('Confirm_Date')) {
			$confirmdate_str 		= $this->input->post('Confirm_Date');
			$confirmdate_str 		= str_replace('/', '-', $confirmdate_str);
			$confirmdate 	= date('Y-m-d',(strtotime($confirmdate_str)));
		}
		
		if($this->input->post('Passport_Expiry_Date')) {
			$passportexpirydate_str 		= $this->input->post('Passport_Expiry_Date');
			$passportexpirydate_str 		= str_replace('/', '-', $passportexpirydate_str);
			$passportexpirydate 	= date('Y-m-d',(strtotime($passportexpirydate_str)));
		} 
		
		if($this->input->post('Driving_Expiry_Date')) {
			$drivingexpirydate_str 		= $this->input->post('Driving_Expiry_Date');
			$drivingexpirydate_str 		= str_replace('/', '-', $drivingexpirydate_str);
			$drivingexpirydate 	= date('Y-m-d',(strtotime($drivingexpirydate_str)));
		} 
		
		if($this->input->post('ExpDurationFrom')) {
			$durationfrom_str 			= $this->input->post('ExpDurationFrom');
			$durationfrom_str 			= str_replace('/', '-', $durationfrom_str);
			$exp_duration_from			= date('Y-m-d',(strtotime($durationfrom_str)));		
		} 
		
		if($this->input->post('ExpDurationTo')) {
			$durationto_str 			= $this->input->post('ExpDurationTo');
			$durationto_str 			= str_replace('/', '-', $durationto_str);
			$exp_duration_to			= date('Y-m-d',(strtotime($durationto_str)));	
		}
		
		if($this->input->post('Cert_Renewal_Date')) {
			$certrenewal_str 			= $this->input->post('Cert_Renewal_Date');
			$certrenewal_str 			= str_replace('/', '-', $certrenewal_str);
			$certrenewal_str			= date('Y-m-d',(strtotime($certrenewal_str)));	
		}
		
		// Profile Picture uploading starts
		if(isset($_FILES))
		{
			$TotalFiles = $_POST["TotalFiles"];
			if($TotalFiles != 0) {
				//foreach($_FILES as $file)
				for ($i=0;  $i<=$TotalFiles; $i++)
				{
					if(isset($_FILES["file_".$i]))
					{
						// tmp_name | name | type | size | error
						
						// -- Check here type  size and if any error.
						$fileName 	= $_FILES["file_".$i]['name'];
						$imgSize 	= $_FILES["file_".$i]['size'];
								
								// Check file size '5MB' or from max.image byte upload settings, in site settings module.
								if($imgSize < 5000000){}
								else{
											$msgError = "Profile picture " . $fileName . " file is too large. Only 5 MB allowed!.";
											$errMSG   = "Error : Sorry," .$msgError;
									}
							
						$tempName	= $_FILES["file_".$i]['tmp_name'];
						$uploadDir	= "./uploads/new_employee_profile_image/"; // this would be the upload file path. Exactly specify here or from the settings.
						
						// uploadImage is defined in site_helper (system/helper folder).
						$uploadResult = uploadImage($tempName, $uploadDir, "", $fileName, "", "",  TRUE, FALSE, FALSE,$_POST["Pic_Name"]);
						if($uploadResult['status'] == 'true') {
							$profilePhoto = $uploadResult['fileName'];
							
						} else {
							echo json_encode(
									array("status" => false, 
										  "message"=>$uploadResult['message']
										 )
								);
							exit;
						}
					}
				}
			} 
		} 
		
		// CV uploading starts
		if(isset($_FILES))
		{
			if(isset($_FILES["filecv_"]))
					{
						// tmp_name | name | type | size | error
						
						// -- Check here type  size and if any error.
						$fileName 	= $_FILES["filecv_"]['name'];
						$imgSize 	= $_FILES["filecv_"]['size'];
								
								// Check file size '5MB' or from max.image byte upload settings, in site settings module.
								if($imgSize < 5000000){}
								else{
											$msgError = "CV " . $fileName . " file is too large. Only 5 MB allowed!.";
											$errMSG   = "Error : Sorry," .$msgError;
									}
							
						$tempName	= $_FILES["filecv_"]['tmp_name'];
						$uploadDirCV	= "./uploads/new_employee_cv/"; // this would be the upload file path. Exactly specify here or from the settings.
						
						// uploadImage is defined in site_helper (system/helper folder).
						$uploadResult = uploadDocument($tempName, $uploadDirCV, "", $fileName, "", "",  TRUE, TRUE, TRUE,$_POST["CV_Name"]);
						if($uploadResult['status'] == 'true') {
							$cvName = $uploadResult['fileName'];
							
						} else {
							echo json_encode(
									array("status" => false, 
										  "message"=>$uploadResult['message']
										 )
								);
							exit;
						}
				}
		} 
		
		// Profile Picture uploading ends
		
		$data = array(
						'JobTitleId' => $this->input->post('Job_Title'),
						'FirstName' => $newEmployee,
						'LastName' => $this->input->post('Emp_Last_Name'),
						'Address' => $this->input->post('Address'),
						'CountryId' => $this->input->post('Country'),
						'StateId' => $this->input->post('State'),
						'CityId' => $this->input->post('City'),
						'DOB' => $dob,
						'BirthCity' => $this->input->post('BirthCity'),
						'Sex' => $this->input->post('Gender'),
						'MaritalStatus' => $this->input->post('Marital_Status'), 
						'SpouseName' => $this->input->post('Spouse_Name'), 
						'HandicapStatus' => $this->input->post('HandicapStatus'),
						'Hobbies' => $this->input->post('Hobbies'),
						'TopQualification' => $this->input->post('Top_Qualification'),
						'Qualification' => $this->input->post('Qualification'),
						'InstitutaionOrCollege' => $this->input->post('Quali_Institution'),
						'PassedYear' => $this->input->post('Quali_PassedYear'),
						'QualificationPercentage' => $this->input->post('Qualification_Percentage'),
						'QualificationDetails' => $this->input->post('Qualification_Details'),
						'QualiUniversity' => $this->input->post('Quali_University'),
						'QualiDuration' => $this->input->post('Quali_Duration'),
						'OtherSkills' => $this->input->post('Other_Skills'),
						'SkillsDetails' => $this->input->post('Skills_Details'),
						'TopCertification' => $this->input->post('Top_Certification'),
						'OtherCertificate' => $this->input->post('Other_Cert_Name'),
						'CertiInstitutaionOrCollege' => $this->input->post('Certi_Institution'),
						'Certification' => $this->input->post('Certifications'),
						'CertificationsDetails' => $this->input->post('Certifications_Details'),
						'CertCompletedYear' => $this->input->post('Cert_CompletedYear'),
						'CertiDuration' => $this->input->post('Cert_Duration'),
						'CertiRenewalDate' => $certrenewal_str,
						'TotalExperience' => $this->input->post('Total_Experience'),
						'ExperianceDetails' => $this->input->post('Experience_Details'),
						'ExpectedSalary' => $this->input->post('Expected_Salary'),
						'PreviousCompany' => $this->input->post('Previous_Company'),
						'ExpDurationFrom' => $exp_duration_from,
						'ExpDurationTo' => $exp_duration_to,
						'PreviousSalary' => $this->input->post('Previous_Salary'),
						'PreviousDesignation' => $this->input->post('Previous_Designation'),
						'Email' => $this->input->post('Email'),
						'AlternateEmail' => $this->input->post('AlternateEmail'),
						'Mobile' => $this->input->post('Mobile_No'),
						'Whatsapp' => $this->input->post('Whatsapp_No'),
						'Nationality' => $this->input->post('Nationality'),
						'AadhaarNumber' => $this->input->post('Aadhar_Number'),
						'PANNumber' => $this->input->post('PAN_Number'),
						'HomePhone' => $this->input->post('Home_Phone'),
						'PostalCode' => $this->input->post('Postal_Code'),
						'DrivingLicenseNo' => $this->input->post('Driving_License_No'),
						'PassportNumber' => $this->input->post('Passport_Number'),
						'PassportExpiryDate' => $passportexpirydate, 
						'DrivingExpiryDate' => $drivingexpirydate,
						'PrimaryBankAccount' => $this->input->post('Primary_Bank_Account'),
						'PrimaryBankName' => $this->input->post('Primary_Bank_Name'),
						'IFSCCode' => $this->input->post('IFSC_Code'),
						'SocialSecurityNumber' => $this->input->post('Social_Security_Number'),
						'MessageToEmployer' => $this->input->post('Message'),
						'ProfilePhotoPath' => $uploadDir,
						'ProfilePhoto' => $profilePhoto,
						'CVPath' => $uploadDirCV,
						'CVName' => $cvName,
						'BranchId' => $this->input->post('Branch'),
						'DepId' => $this->input->post('Department'),
						'EmploymentStatusId' => $this->input->post('Employ_Status'),
						'TraineeDate' => $traineedate,
						'JoinDate' => $joindate,
						'JoinConfirmationDate' => $confirmdate,
						'ProbationDate' => $probationdate,
						'CreatedOn' => date('Y-m-d H:i:s'),	
					);
		$this->db->insert('new_employee_join',$data);
		$resData    = array(
								"status" => true,
								'message' => 'New employee details saved successfully!!'
						 );
	    echo json_encode($resData);
	}
	
	//==================================== Function to get Other certificates entered by other new employee ================================
	public function getOtherCertificates() {
		$SQL 		 ="SELECT DISTINCT `OtherCertificate`,`CreatedOn`";
		$SQL 		.=" FROM `employee_master` where OtherCertificate!='' order by `CreatedOn` ASC";
		
		$query 		= $this->db->query($SQL);
		if($query->num_rows()>0)
		{
			$retHTML ="<option value=''>...Choose Other Certificate...</option>";
			foreach ($query->result()  as $row)
			{
				$otherCert  	= $row->OtherCertificate;
				$retHTML 	.= "<option  value='{$otherCert}'>{$otherCert}</option>";			
			} 
		} else {
			$retHTML = "<option value='No Other Certificate' disabled selected>...No Other Certificates...</option>";
		}	
		 echo $retHTML;					
	}
	
	// -------------------------- Newly registered employees module start ----------------
	public function newly_registered_employee($id,$add="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$moduleTab="newly_registered_employee";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]			= $id;

		$data["moduleTab"]		= $moduleTab; // product or product_category
		if($add != '')
			$data["add"]		 	= $add; // for quick link
		else
			$data["add"]		 	= ''; // for quick link
		$this->load->view("brq-admin/newly-registered-employee", $data);		
	}
	
	//====================================Function to get DataTables of Newly Resistered Employee List ================================
	public function registeredEmployeeList($subId="")
	{
		$gender		=		$this->input->post('gender');
		$marital	=		$this->input->post('marital');
		$quali		=		$this->input->post('quali');
		$exp		=		$this->input->post('exp');
		$mobile		=		$this->input->post('mobile');
		$email		=		$this->input->post('email');
		$whatsapp	=		$this->input->post('whatsapp');
		$userid		=		$this->input->post('userid');
		$list 		= 		$this->Registered_Employee_model->getDataTables($gender,$marital,$quali,$exp,$mobile,$email,$whatsapp,$userid);
		
		$db 	= new Database();
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		//$no=1;
		
		foreach ($list as $data) {
		
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$profilePath 	= base_url().$data->ProfilePhotoPath.'thumb/';
			$mainPhoto		= $data->ProfilePhoto;
			if(!(file_exists($data->ProfilePhotoPath.$data->ProfilePhoto)) || $mainPhoto == '') {
				if($data->Sex == "Male")
					$profilePhotoLarge 	= base_url().'/uploads/new_employee_profile_image/'."male.png";
				else
					$profilePhotoLarge 	= base_url().'/uploads/new_employee_profile_image/'."female.png";
			} else {
					$profilePhotoLarge 	= base_url().$data->ProfilePhotoPath.$data->ProfilePhoto;
			}	
			
			$profilePhoto 	= $profilePath.$data->ProfilePhoto;			
			if(!(file_exists($data->ProfilePhotoPath.'thumb/'.$data->ProfilePhoto))) {
				if($data->Sex == "Male")
					$profilePhoto 	= base_url().'/uploads/new_employee_profile_image/thumb/'."male.png";
				else
					$profilePhoto 	= base_url().'/uploads/new_employee_profile_image/thumb/'."female.png";
			}
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$data->FirstName." ".$data->LastName.'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';
			$row[] = $data->FirstName." ".$data->LastName;
			
			$jobTitleCode = $db->getFieldValueById("job_titles", "JobTitleCode", "Id='{$data->JobTitleId}'");
			$row[] = $db->getFieldValueById("job_titles", "JobTitle", "Id='{$data->JobTitleId}'")." - (".$jobTitleCode.")";
		    if($data->Status=="Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			 
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			if(file_exists($data->CVPath.$data->CVName))
				$row[] = '<span class="label label-success"><a href="'.base_url().$data->CVPath.$data->CVName.'" target="_blank">View CV</a></span>';
			else
				$row[] = '';
			
		    $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			
			$actions ="";
			$view ="Sub_Visible_".$subId;
			$approve ="Sub_App_".$subId;
			$delete = "Sub_Del_".$subId;
			
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			//add html for action
			if(in_array($view,$userGroupPermission)||in_array($view,$userWisePermission))
			{
				$actions = '<a  id="viewButton" class="btn btn-sm btn-info" href="javascript:void(0)" title="View More" onclick="viewData('."'".$data->Id."'".');"><i class="fa fa-search" aria-hidden="true"></i> View More</a>';
			}
			if(in_array($approve,$userGroupPermission) || in_array($approve,$userWisePermission))
			{		
				$actions .='<a  id="approveButton" class="btn btn-sm btn-success" href="javascript:void(0)" title="Approve" onclick="approveData('."'".$data->Id."'".');"><i class="fa fa-thumbs-o-up" aria-hidden="true"></i> Approve</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{  
				$actions	.='<a  id="deleteCatButton_'. $data->Id.'" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="ajaxEmpDelete('."'".$data->Id."'".')"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</a>';
			}	
			
				$row[]	=$actions;
		
			// important" for delete button id here is deleteCatButton_Id", for delete loading while delete action.		
			//<a id="viewButton" class="btn btn-small btn-info" href="javascript:void(0)" title="Click to edit" onclick="edit_menu('."'". $menu->Id ."'".')"><i class="fa fa-sticky-note-o"></i> View</a>';	  
		
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Registered_Employee_model->countAll(),
						"recordsFiltered" => $this->Registered_Employee_model->countFiltered($gender,$marital,$quali,$exp,$mobile,$email,$whatsapp,$userid),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
		
	}
	
	//====================================Function to delete Newly Registered Employee by Id ================================
	public function deleteRegisteredEmployee($id)
	{
        
		//deleting employee profile picture and thumbnail
		$db  				= new Database();
		$profilePhoto 		= $db->getFieldValueById("new_employee_join", "ProfilePhoto", "Id='{$id}'");	
		$profilePhotoPath 	= $db->getFieldValueById("new_employee_join", "ProfilePhotoPath", "Id='{$id}'");	
		if($profilePhoto != 'male.png' && $profilePhoto != 'female.png' && (file_exists($profilePhotoPath.$profilePhoto))) {
			unlink($profilePhotoPath.$profilePhoto);
			if(file_exists($profilePhotoPath."thumb/".$profilePhoto))
				unlink($profilePhotoPath."thumb/".$profilePhoto);
		}	
		
		$cvName 		= $db->getFieldValueById("new_employee_join", "CVName", "Id='{$id}'");	
		$uploadDirCV 	= $db->getFieldValueById("new_employee_join", "CVPath", "Id='{$id}'");	
		if(file_exists($uploadDirCV.$cvName)) {
			unlink($uploadDirCV.$cvName);						
		}
				
		$res=  $this->Registered_Employee_model->deleteData($id);
	    if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
			
		$moduleTab="new_employee";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		/*if($add != '')
			$data["add"]		 	= $add; // for quick link
		else
			$data["add"]		 	= ''; // for quick link*/
		   
       $resData =array();
	   if($res)
	   {
		   		   
		   $resData=array(
					"status"=>true,
					"message"=>"Newly Registered Employee deleted successfully!!"
				   );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete newly registered employee!!"
				   );
		   
	   }
	   $resData = (object) array_merge((array) $resData, (array) $data);
	   echo json_encode($resData);  
	} 
	
	//====================================Function to Approve Newly Registered Employee by Id and moving the details to employee_master table & deleting details from new_employee_join table================================
	public function approveRegisteredEmployee($id)
	{
		
		
		//deleting employee profile picture and thumbnail
		$db  				= new Database();
		$profilePhoto 		= $db->getFieldValueById("new_employee_join", "ProfilePhoto", "Id='{$id}'");	
		$profilePhotoPath 	= $db->getFieldValueById("new_employee_join", "ProfilePhotoPath", "Id='{$id}'");	
		if($profilePhoto != 'male.png' && $profilePhoto != 'female.png' && (file_exists($profilePhotoPath.$profilePhoto))) {
			rename($profilePhotoPath.$profilePhoto, './uploads/employee_profile_image/'.$profilePhoto);
			
			if(file_exists($profilePhotoPath."thumb/".$profilePhoto)) {
				rename($profilePhotoPath."thumb/".$profilePhoto, './uploads/employee_profile_image/thumb/'.$profilePhoto);
			}	
		}	
		
		$cvName 		= $db->getFieldValueById("new_employee_join", "CVName", "Id='{$id}'");	
		$uploadDirCV 	= $db->getFieldValueById("new_employee_join", "CVPath", "Id='{$id}'");	
		if(file_exists($uploadDirCV.$cvName)) {
			rename($uploadDirCV.$cvName, './uploads/employee_cv/'.$cvName);
			
		}
		
		$emp_id = $this->Registered_Employee_model->approveData($id);
		
		$data  	= array('EMPLOYEE', '1');  // to increment second parameter should 1
		$employeeId 	= $db->callProcedure("getNumberPRO", $data, TRUE);  //  last parameter is TRUE for get the output.
		
		$SQL 		 ="UPDATE `employee_master`";
		$SQL 		.=" SET `Code` = '".$employeeId."' where `Id` = '".$emp_id."'";
		
		$query 		= $this->db->query($SQL);
		
		$res=  $this->Registered_Employee_model->deleteData($id);
	    if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
			
		$moduleTab="new_employee";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		
       $resData =array();
	   if($res)
	   {
		   		   
		   $resData=array(
					"status"=>true,
					"message"=>"Newly Registered Employee deleted successfully!!"
				   );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete newly registered employee!!"
				   );
		   
	   }
	   $resData = (object) array_merge((array) $resData, (array) $data);
	   echo json_encode($resData);  
	}
	
	// ==========================  Function to view registered employee - By Sajitha   ==================================	
	public function view_registered_employee($id=0)
	{
		$db  				= new Database();
		$employeeId			=	$_SESSION['EMPLOYEE_ID'];
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	= "view_customer"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data1 					= $this->Registered_Employee_model->getById($id);		
		$data['pagination']		= '';
		$data['keyword']		= '';
		$data['allcount']		= 0;
		$jobTitleCode 			= $db->getFieldValueById("job_titles", "JobTitleCode", "Id='{$data1->JobTitleId}'");
		$data['applyFor']		= $db->getFieldValueById("job_titles", "JobTitle", "Id='{$data1->JobTitleId}'")." - (".$jobTitleCode.")";	
		$data['NationalityName']= $db->getFieldValueById("sys_nationality", "Nationality", "Id='{$data1->Nationality}'");
		$data['CountryName']	= $db->getFieldValueById("sys_country_list", "CountryEnglish", "Id='{$data1->CountryId}'");
		$data['StateName']		= $db->getFieldValueById("sys_state_list", "state_name", "state_id='{$data1->StateId}'");
		$data['CityName']		= $db->getFieldValueById("sys_city_list", "city_name", "city_id='{$data1->CityId}'");
		$data['Branch']			= $db->getFieldValueById("branches", "BranchName", "Id='{$data1->BranchId}'");
		$data['Department']		= $db->getFieldValueById("department", "DepartmentName", "Id='{$data1->DepId}'");
		$data['Employ_Status']	= $db->getFieldValueById("employment_status", "EmploymentStatus", "Id='{$data1->EmploymentStatusId}'");
		if($data1->TopCertification != 'OTHER')
			$data['TopCertificationName']	= $db->getFieldValueById("job_certification", "Certification", "Id='{$data1->TopCertification}'");
		$data['employeeId']		= $employeeId;
		$data 					= (object) array_merge((array) $data, (array) $data1);
		
		$this->load->view("brq-admin/view-registered-employee", $data);
	}
	
	// -------------------------- Client module start ---------------- 
	//==================================== Function to get details of Client by Id - by Sajitha ================================
	public function getClientProfilePic($id)
	{
		$db  				= new Database();
		$profilePhoto 		= $db->getFieldValueById("client_registration", "ProfilePhoto", "Id='{$id}'");	
		$profilePhotoPath 	= $db->getFieldValueById("client_registration", "ProfilePhotoPath", "Id='{$id}'");	
		if(file_exists($profilePhotoPath."thumb/".$profilePhoto)) 
			echo 1;
		else
			echo 0;
	}
	
	//==================================== Function to get details of Client by Id - by Sajitha ================================
	public function getClientLogo($id)
	{
		$db  				= new Database();
		$companyLogo 		= $db->getFieldValueById("client_registration", "CompanyLogoFileName", "Id='{$id}'");	
		$companyLogoPath 	= $db->getFieldValueById("client_registration", "CompanyLogoPath", "Id='{$id}'");	
		if(file_exists($companyLogoPath."thumb/".$companyLogo)) 
			echo 1;
		else
			echo 0;
	}
	
	
	// getClientId function is called when adding a Client to get the 'ClientId' filled with Last ClientId + 1
	// getting Client Id, by calling the stored proceedure getNumberPRO
	public function getClientId() //calling the stored procedure, to get number.
	{
		$db   	= new Database();
		$data  	= array('CLIENT', '0');  // to increment second parameter should 1
		$clientId 	= $db->callProcedure("getNumberPRO", $data, TRUE);  //  last parameter is TRUE for get the output.
		if($clientId)
		{
		   		   
		   $resData=array(
					"status"=>true,
					"message"=>"Success!!",
					"clientId"=>$clientId
				   );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, No record for Client Id!!"
				   );
		   
	   }
	   echo json_encode($resData);  
	}
	
	//==================================== saveClient function to Save New Customer / Client - by Sajitha ================================
	public function saveClient()
	{
		$id				= $this->input->post("hidID");
		$otpNeeded		= $this->input->post("otpNeeded");
		$uploadDir		= '';
		$profilePhoto 	= "";
		$uploadDirLogo	= '';
		$companyLogo 	= "";
		$data 			= array(); 
		$employeeId		= $_SESSION['EMPLOYEE_ID'];
		$db  			= new Database(); 
		$branchId 		= $db->getFieldValueById("employee_master", "BranchId", "Id='{$employeeId}'");
		
		$db  			= new Database();
		$where   		= "  (BINARY Email  ='{$this->input->post('Email')}' or MobileNo ='{$this->input->post('Mobile')}') and `Id`!={$id}";
		$res 			= $db->checkExistance("client_registration", $where); // if exists id value will be returned.
		
		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This user id already exists!"
									 )
							);
			exit;
		}
		// Profile Picture and Company Logo uploading starts
		if(isset($_FILES))
		{
			$TotalFiles = $_POST["TotalFiles"];
			if($TotalFiles != 0) {
				//foreach($_FILES as $file)
				for ($i=0;  $i<=$TotalFiles; $i++)
				{
					if(isset($_FILES["file_".$i]))
					{
						// tmp_name | name | type | size | error
						
						// -- Check here type  size and if any error.
						$fileName 	= $_FILES["file_".$i]['name'];
						$imgSize 	= $_FILES["file_".$i]['size'];
								
								// Check file size '5MB' or from max.image byte upload settings, in site settings module.
								if($imgSize < 5000000){}
								else{
											$msgError = "Profile picture " . $fileName . " file is too large. Only 5 MB allowed!.";
											$errMSG   = "Error : Sorry," .$msgError;
									}
							
						$tempName	= $_FILES["file_".$i]['tmp_name'];
						$uploadDir	= "./uploads/client_profile_image/"; // this would be the upload file path. Exactly specify here or from the settings.
						
						// uploadImage is defined in site_helper (system/helper folder).
						$uploadResult = uploadImage($tempName, $uploadDir, "", $fileName, "", "",  TRUE, FALSE, FALSE,$_POST["Pic_Name"]);
						if($uploadResult['status'] == 'true') {
							$profilePhoto = $uploadResult['fileName'];
							
						} else {
							echo json_encode(
									array("status" => false, 
										  "message"=>$uploadResult['message']
										 )
								);
							exit;
						}
					}
				}
			} else {
				if($id	==	0) {
					$uploadDir	= "./uploads/client_profile_image/";
					if($this->input->post('Gender') == "Male")
						$profilePhoto = "male.png";
					else
						$profilePhoto = "female.png";
				}
			}
			
			$TotalFilesLogo = $_POST["TotalFilesLogo"];
			if($TotalFilesLogo != 0) {
				//foreach($_FILES as $file)
				for ($i=0;  $i<=$TotalFilesLogo; $i++)
				{
					if(isset($_FILES["fileLogo_".$i]))
					{
						// tmp_name | name | type | size | error
						
						// -- Check here type  size and if any error.
						$fileName 	= $_FILES["fileLogo_".$i]['name'];
						$imgSize 	= $_FILES["fileLogo_".$i]['size'];
								
								// Check file size '5MB' or from max.image byte upload settings, in site settings module.
								if($imgSize < 5000000){}
								else{
											$msgError = "Company Logo " . $fileName . " file is too large. Only 5 MB allowed!.";
											$errMSG   = "Error : Sorry," .$msgError;
									}
							
						$tempName	= $_FILES["fileLogo_".$i]['tmp_name'];
						$uploadDirLogo	= "./uploads/client_logo/"; // this would be the upload file path. Exactly specify here or from the settings.
						
						// uploadImage is defined in site_helper (system/helper folder).
						$uploadResult = uploadImage($tempName, $uploadDirLogo, "", $fileName, "", "",  TRUE, FALSE, FALSE,$_POST["Logo_Name"]);
						if($uploadResult['status'] == 'true') {
							$companyLogo = $uploadResult['fileName'];
							
						} else {
							echo json_encode(
									array("status" => false, 
										  "message"=>$uploadResult['message']
										 )
								);
							exit;
						}
					}
				}
			} else {
				if($id	==	0) {
					$uploadDirLogo	= "./uploads/client_logo/";
					$companyLogo = "default_logo.jpg";
				}
			}
		} 
		
		$enrolldate 	= '';
		if($this->input->post('EnrollmentDate')) {
			$edate_str 		= $this->input->post('EnrollmentDate');
			$edate_str 		= str_replace('/', '-', $edate_str);
			$enrolldate 	= date('Y-m-d',(strtotime($edate_str)));
		}
		
		$enrolldateacca = '';
		if($this->input->post('Enrollment_dateACCA')) {
			$edate_str_acca 		= $this->input->post('Enrollment_dateACCA');
			$edate_str_acca 		= str_replace('/', '-', $edate_str_acca);
			$enrolldateacca 		= date('Y-m-d',(strtotime($edate_str_acca)));
		}
		
		$enrolldatebarcouncil = '';
		if($this->input->post('BarcouncilEnrollmentDate')) {
			$edate_str_barcouncil 		= $this->input->post('BarcouncilEnrollmentDate');
			$edate_str_barcouncil 		= str_replace('/', '-', $edate_str_barcouncil);
			$enrolldatebarcouncil 		= date('Y-m-d',(strtotime($edate_str_barcouncil)));
		}
		
		$enrolldateadvocate = '';
		if($this->input->post('AdvocateEnrollmentDateGST_IncomeTax')) {
			$edate_str_advocate 		= $this->input->post('AdvocateEnrollmentDateGST_IncomeTax');
			$edate_str_advocate 		= str_replace('/', '-', $edate_str_advocate);
			$enrolldateadvocate 		= date('Y-m-d',(strtotime($edate_str_advocate)));
		}
		
		$enrolldatecfa = '';
		if($this->input->post('Enrollment_dateCFA')) {
			$edate_str_cfa 		= $this->input->post('Enrollment_dateCFA');
			$edate_str_cfa 		= str_replace('/', '-', $edate_str_cfa);
			$enrolldatecfa 		= date('Y-m-d',(strtotime($edate_str_cfa)));
		}
		
		$enrolldatecma = '';
		if($this->input->post('Enrollment_dateCMA')) {
			$edate_str_cma 		= $this->input->post('Enrollment_dateCMA');
			$edate_str_cma 		= str_replace('/', '-', $edate_str_cma);
			$enrolldatecma 		= date('Y-m-d',(strtotime($edate_str_cma)));
		}
		
		$enrolldatecpa = '';
		if($this->input->post('Enrollment_dateCPA')) {
			$edate_str_cpa 		= $this->input->post('Enrollment_dateCPA');
			$edate_str_cpa 		= str_replace('/', '-', $edate_str_cpa);
			$enrolldatecpa 		= date('Y-m-d',(strtotime($edate_str_cpa)));
		}
		
		$enrolldatecs = '';
		if($this->input->post('MembershipDateCS')) {
			$edate_str_cs 		= $this->input->post('MembershipDateCS');
			$edate_str_cs 		= str_replace('/', '-', $edate_str_cs);
			$enrolldatecs 		= date('Y-m-d',(strtotime($edate_str_cs)));
		}
		
		$enrolldatetaxp = '';
		if($this->input->post('EnrollmentDateGST_IncomeTax')) {
			$edate_str_taxp 		= $this->input->post('EnrollmentDateGST_IncomeTax');
			$edate_str_taxp 		= str_replace('/', '-', $edate_str_taxp);
			$enrolldatetaxp 		= date('Y-m-d',(strtotime($edate_str_taxp)));
		}		
		
		$enrolldatetaxa = '';
		if($this->input->post('EnrollmentDate_TaxAdviser')) {
			$edate_str_taxa 		= $this->input->post('EnrollmentDate_TaxAdviser');
			$edate_str_taxa 		= str_replace('/', '-', $edate_str_taxa);
			$enrolldatetaxa 		= date('Y-m-d',(strtotime($edate_str_taxa)));
		}		
		
		$enrolldatetaxc = '';
		if($this->input->post('EnrollmentDate_TaxConsultant')) {
			$edate_str_taxc 		= $this->input->post('EnrollmentDate_TaxConsultant');
			$edate_str_taxc 		= str_replace('/', '-', $edate_str_taxc);
			$enrolldatetaxc 		= date('Y-m-d',(strtotime($edate_str_taxc)));
		}		
		
		if($id	==	0) // if save
		{  
		$clientPassword = encriptPassword($this->input->post('Password'));		
		$data = array(
						//'Code' => $this->input->post('CID'),
						'CompanyName' => $this->input->post('Company_Name'),
						'CompanyAddress' => $this->input->post('Company_Address'),
						'FirstName' => $this->input->post('First_Name'),
						'LastName' => $this->input->post('Last_Name'),
						'Status' => $this->input->post('Status'),
						'Gender' => $this->input->post('Gender'),
						'Email' => $this->input->post('Email'),
						'MobileNo' => $this->input->post('Mobile'),
						'WhatsappNo' => $this->input->post('Whats_app'),
						'CompanyPhone' => $this->input->post('Company_Phone'),
						'CompanyUrl' => $this->input->post('Company_Site'),
						'CompanyEmail' => $this->input->post('Company_Email'),
						'CompanyDescription' => $this->input->post('Company_Desc'),
						'AboutCompany' => $this->input->post('About_Company'),
						'Designation' => $this->input->post('Designation'),
						'ProfessionType' => $this->input->post('Profession_Type'),
						'CompanyType' => $this->input->post('Company_Type'),
						'UserName' => $this->input->post('User_Id'),
						'Password' => $clientPassword,
						'CountryId' => $this->input->post('Country'),
						'StateId' => $this->input->post('State'),
						'CityId' => $this->input->post('City'),
						'PanNumber' => $this->input->post('Pan_Number'),
						'GstNumber' => $this->input->post('GST_Number'),
						'PostalCode' => $this->input->post('Postal_Code'),
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'BranchId' => $branchId,
						'EmployeeId' => $employeeId,
						'CreatedOn' => date('Y-m-d H:i:s'),								
						'ProfilePhoto' => $profilePhoto,
						'ProfilePhotoPath' => $uploadDir,
						'CompanyLogoFileName' => $companyLogo,
						'CompanyLogoPath' => $uploadDirLogo,
						'MembershipNumber' => $this->input->post('MembershipNumber'),
						'EnrollmentDate' => $enrolldate,
						'MembershipNumberCS' => $this->input->post('MembershipNumberCS'),
						'MembershipDateCS' => $enrolldatecs,
						'BarcouncilEnrollmentNumber' => $this->input->post('BarcouncilEnrollmentNumber'),
						'BarcouncilEnrollmentDate' => $enrolldatebarcouncil,
						'AdvocateEnrollmentNumberGST_IncomeTax' => $this->input->post('AdvocateEnrollmentNumberGST_IncomeTax'),
						'AdvocateEnrollmentDateGST_IncomeTax' => $enrolldateadvocate,
						'EnrollmentNumberGST_IncomeTax' => $this->input->post('EnrollmentNumberGST_IncomeTax'),
						'EnrollmentDateGST_IncomeTax' => $enrolldatetaxp,
						'Membership_no_CMA' => $this->input->post('Membership_no_CMA'),
						'Enrollment_dateCMA' => $enrolldatecma, 
						'Membership_noCPA' => $this->input->post('Membership_noCPA'),
						'Enrollment_dateCPA' => $enrolldatecpa,
						'Membership_noACCA' => $this->input->post('Membership_noACCA'),
						'Enrollment_dateACCA' => $enrolldateacca,
						'Membership_noCFA' => $this->input->post('Membership_noCFA'),
						'Enrollment_dateCFA' => $enrolldatecfa,
						'EnrollmentNo_TaxAdviser' => $this->input->post('EnrollmentNo_TaxAdviser'),
						'EnrollmentDate_TaxAdviser' => $enrolldatetaxa,
						'EnrollmentNo_TaxConsultant' => $this->input->post('EnrollmentNo_TaxConsultant'),
						'EnrollmentDate_TaxConsultant' => $enrolldatetaxc,
					);
			if($this->input->post('Pancard_Type'))
				$data['PanCardType'] = $this->input->post('Pancard_Type');
		}
		else { // if edit
			
				$data = array(
						'CompanyName' => $this->input->post('Company_Name'),
						'CompanyAddress' => $this->input->post('Company_Address'),
						'FirstName' => $this->input->post('First_Name'),
						'LastName' => $this->input->post('Last_Name'),
						'Status' => $this->input->post('Status'),
						'Gender' => $this->input->post('Gender'),
						'Email' => $this->input->post('Email'),
						'MobileNo' => $this->input->post('Mobile'),
						'WhatsappNo' => $this->input->post('Whats_app'),
						'CompanyPhone' => $this->input->post('Company_Phone'),
						'CompanyUrl' => $this->input->post('Company_Site'),
						'CompanyEmail' => $this->input->post('Company_Email'),
						'CompanyDescription' => $this->input->post('Company_Desc'),
						'AboutCompany' => $this->input->post('About_Company'),
						'Designation' => $this->input->post('Designation'),
						'ProfessionType' => $this->input->post('Profession_Type'),
						'CompanyType' => $this->input->post('Company_Type'),
						'UserName' => $this->input->post('User_Id'),
						'CountryId' => $this->input->post('Country'),
						'StateId' => $this->input->post('State'),
						'CityId' => $this->input->post('City'),
						'PanNumber' => $this->input->post('Pan_Number'),
						'GstNumber' => $this->input->post('GST_Number'),
						'PostalCode' => $this->input->post('Postal_Code'),
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),
						'MembershipNumber' => $this->input->post('MembershipNumber'),
						'EnrollmentDate' => $enrolldate,
						'MembershipNumberCS' => $this->input->post('MembershipNumberCS'),
						'MembershipDateCS' => $enrolldatecs,
						'BarcouncilEnrollmentNumber' => $this->input->post('BarcouncilEnrollmentNumber'),
						'BarcouncilEnrollmentDate' => $enrolldatebarcouncil,	
						'AdvocateEnrollmentNumberGST_IncomeTax' => $this->input->post('AdvocateEnrollmentNumberGST_IncomeTax'),
						'AdvocateEnrollmentDateGST_IncomeTax' => $enrolldateadvocate,
						'EnrollmentNumberGST_IncomeTax' => $this->input->post('EnrollmentNumberGST_IncomeTax'),
						'EnrollmentDateGST_IncomeTax' => $enrolldatetaxp,
						'Membership_no_CMA' => $this->input->post('Membership_no_CMA'),
						'Enrollment_dateCMA' => $enrolldatecma,
						'Membership_noCPA' => $this->input->post('Membership_noCPA'),
						'Enrollment_dateCPA' => $enrolldatecpa,
						'Membership_noACCA' => $this->input->post('Membership_noACCA'),
						'Enrollment_dateACCA' => $enrolldateacca,
						'Membership_noCFA' => $this->input->post('Membership_noCFA'),
						'Enrollment_dateCFA' => $enrolldatecfa,
						'EnrollmentNo_TaxAdviser' => $this->input->post('EnrollmentNo_TaxAdviser'),
						'EnrollmentDate_TaxAdviser' => $enrolldatetaxa,
						'EnrollmentNo_TaxConsultant' => $this->input->post('EnrollmentNo_TaxConsultant'),
						'EnrollmentDate_TaxConsultant' => $enrolldatetaxc,
				);
				if($this->input->post('Pancard_Type'))		
					$data['PanCardType'] = $this->input->post('Pancard_Type');
				
				if($profilePhoto !='' && $uploadDir != '') {
					$data += [ "ProfilePhoto" => $profilePhoto, "ProfilePhotoPath" => $uploadDir ];
				
					//deleting existing client profile picture and thumbnail		
					$db  				= new Database();
					$profilePhoto 		= $db->getFieldValueById("client_registration", "ProfilePhoto", "Id='{$id}'");	
					$profilePhotoPath 	= $db->getFieldValueById("client_registration", "ProfilePhotoPath", "Id='{$id}'");	
					if($profilePhoto != 'male.png' && $profilePhoto != 'female.png' && (file_exists($profilePhotoPath.$profilePhoto))) {
						unlink($profilePhotoPath.$profilePhoto);
						if(file_exists($profilePhotoPath."thumb/".$profilePhoto))
							unlink($profilePhotoPath."thumb/".$profilePhoto);
					}
				}	
				
				if($companyLogo !='' && $uploadDirLogo != '') {
					$data += [ "CompanyLogoFileName" => $companyLogo, "CompanyLogoPath" => $uploadDirLogo ];				
					//deleting existing client logo picture and thumbnail		
					$db  				= new Database();
					$companyLogo 		= $db->getFieldValueById("client_registration", "CompanyLogoFileName", "Id='{$id}'");	
					$companyLogoPath 	= $db->getFieldValueById("client_registration", "CompanyLogoPath", "Id='{$id}'");	
					if($companyLogo != 'default_logo.jpg' && (file_exists($companyLogoPath.$companyLogo))) {
						unlink($companyLogoPath.$companyLogo);
						if(file_exists($companyLogoPath."thumb/".$companyLogo))
							unlink($companyLogoPath."thumb/".$companyLogo);
					}
				}	
		}
       $res= $this->Client_model->saveData($data, $id);
	   /*if($id	==	0){
			$db   	= new Database();
			$data  	= array('CLIENT', '1');  // to increment second parameter should 1
			$db->callProcedure("getNumberPRO", $data, TRUE);  //  last parameter is TRUE for get the output.	
	   }*/ 
	   $resData    = array(
								"status" => true,
								'message' => 'Client details saved successfully!!'
						 );
		
		// Incase of Add customer assign $res(Id of newly added customer) to $id variable for OTP generation
		if($id==0)
		{
		   $id 						= $res;
		   $resData["NewClientId"]  = $res; 
		   $resData["NewClient"]	= $this->input->post('First_Name');
		}
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	=	"client_manager"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["moduleTab"]		= "client_manager"; // Assigning client_manager as moduleTab
		
		if($otpNeeded) {
			$db   				= new Database();
			$isEmailVerified 	= $db->getFieldValueById("client_registration", "isEmailVerified", "Id='{$id}'");
			$isMobileVerified 	= $db->getFieldValueById("client_registration", "isMobileVerified", "Id='{$id}'");
			
			//Generating OTP for Email Verification if Email is not verified
			if($isEmailVerified == 0) {
				$otpEmailCode 				            = $this->Common_model->generateOTP(5);
				// insert new row into sys_otp table starts
				$otp 					                = encriptPassword($otpEmailCode);
				$data1 									= array();
				$data1['OTP'] 			                = $otp;
				$data1['ModuleId'] 		                = $id;
				$data1['ModuleName'] 	                = "Client_EMail_OTP";
				$data['CreatedBy'] 		            	= $_SESSION['ADMIN_ID'];
				$data1['CreatedOn'] 		            = date('Y-m-d H:i:s');
				$data1['OTPExpireOn'] 	                = date("Y-m-d H:i:s", strtotime("+15 minutes"));
				$data1['Status'] 		                = 1;
				
				//$moduleName				            =str_replace("_","",$moduleName);
				$data1['Description'] 	                = 'OTP generated for email verification in Client Registration.';
				
				// --- checking the existance in sys_otp table to delete starts
				$this->db->delete('sys_otp', array('ModuleId' => $res,'ModuleName' => "Client_EMail_OTP"));
				// --- checking the existance in sys_otp table to delete ends
				$this->db->insert('sys_otp',$data1);
				// --- insert new row into sys_otp table ends
				$data["otpEmail"]		= $otpEmailCode; // Assigning OTP code
			}
			
			//Generating OTP for Mobile Verification if Mobile is not verified
			if($isMobileVerified == 0) {
				$otpMobileCode 				            = $this->Common_model->generateOTP(5);
				// insert new row into sys_otp table starts
				$otp 					                = encriptPassword($otpMobileCode);
				$data2 									= array();
				$data2['OTP'] 			                = $otp;
				$data2['ModuleId'] 		                = $id;
				$data2['ModuleName'] 	                = "Client_Mobile_OTP";
				$data['CreatedBy'] 		            	= $_SESSION['ADMIN_ID'];
				$data2['CreatedOn'] 		            = date('Y-m-d H:i:s');
				$data2['OTPExpireOn'] 	                = date("Y-m-d H:i:s", strtotime("+15 minutes"));
				$data2['Status'] 		                = 1;
				
				//$moduleName				            =str_replace("_","",$moduleName);
				$data2['Description'] 	                = 'OTP generated for mobile verification in Client Registration.';
				
				// --- checking the existance in sys_otp table to delete starts
				$this->db->delete('sys_otp', array('ModuleId' => $res,'ModuleName' => "Client_Mobile_OTP"));
				// --- checking the existance in sys_otp table to delete ends
				$this->db->insert('sys_otp',$data2);
				// --- insert new row into sys_otp table ends
				
				$data["otpMobile"]		= $otpMobileCode; // Assigning OTP code
			}
		}
		
		$resData = (object) array_merge((array) $resData, (array) $data);	
		echo json_encode($resData);
	}
 
	//==================================== client_manager function for viewing Client Manager - by Sajitha ================================
	public function client_manager($id="",$employeeId=0)
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	=	"client_manager"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["employeeId"]		= $employeeId; // Assigning employee id
		$data["moduleTab"]		= "client_manager"; // Assigning client_manager as moduleTab
		$data["subMenuId"]		= $id;
		$this->load->view("brq-admin/client-manager", $data);
		
	} 
	
	//==================================== clientList function for listing all the Clients in DataTables - by Sajitha ================================
	
	public function clientList($subid="")
	{
		$branch		= $this->input->post("branch");
		$userId		= $this->input->post("userid");
		$employeeId = $userId;
		$list 		= $this->Client_model->getDataTables($branch,$employeeId);
		$data 		= array();
        $data1 		= array();
		$no 		= $_POST['start']; // commented for working
		$action 	= '';
		//$no=1;
		
		foreach ($list as $data) {
			
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$row 			= array();
			
			$profilePath 	= base_url().$data->ProfilePhotoPath.'thumb/';
			$profilePhotoLarge 	= base_url().$data->ProfilePhotoPath.$data->ProfilePhoto;
			$profilePhoto 	= $profilePath.$data->ProfilePhoto;
			if(!(file_exists($data->ProfilePhotoPath.'thumb/'.$data->ProfilePhoto)) || $data->ProfilePhoto=='') {
				if($data->Gender == "Male")
					$profilePhoto 	= $profilePath."male.png";
				else
					$profilePhoto 	= $profilePath."female.png";
			}
			if($profilePhoto == $profilePath."male.png" || $profilePhoto == $profilePath."female.png") {
				$companyLogoPath 	= base_url().$data->CompanyLogoPath.'thumb/';
				$profilePhotoLarge 	= base_url().$data->CompanyLogoPath.$data->CompanyLogoFileName;
				$profilePhoto 		= $companyLogoPath.$data->CompanyLogoFileName;
				if(!(file_exists($data->CompanyLogoPath.'thumb/'.$data->CompanyLogoFileName))) {
					$profilePhoto 	= $companyLogoPath."default_logo.jpg";
				}
			}
			
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$data->FirstName." ".$data->LastName.'\');" ><img  class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';
			$row[] = $data->Code;
			$row[] = $data->FirstName." ".$data->LastName;	
			$db = new Database();
			$branchName = $db->getFieldValueById("branches", "BranchName", "Id='{$data->BranchId}'");
			$row[] = $branchName;
			$row[] = $data->CompanyName;
			$licenseCode = $db->getFieldValueById("client_product_licence", "ProductLicenceCode", "ClientId='{$data->Id}'");
			if($licenseCode)
				$row[] = '<span class="label label-success"><a href="javascript:void(0)" onclick="popUpProduct(\''.$data->Id.'\',\''.$data->FirstName." ".$data->LastName.'\');">'.$licenseCode.'</a></span>';
			else
				$row[] = '';
			$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] = $data->CreatedBy;
			if($data->Status	==	"Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			
						
			$row[]		= "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			//adding html for action

			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$action ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
				
			$action = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"  aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
	                 
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				
			// if($data->EmployeeId == $_SESSION['EMPLOYEE_ID'] || ($_SESSION['ADMIN_USER_TYPE'] == 'SUPER ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'ADMIN')) {		  
	            $action .= '<div class="dropdown-menu" role="menu" style="">'
				. '<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editData('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
	                  
			// }
			}	 
			if(in_array($view,$userGroupPermission)||in_array($view,$userWisePermission))
			{
				
	            $action .= '<div class="dropdown-divider"></div>'
				.'<a id="viewButton"  class="dropdown-item text-info view_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to View"  onclick="viewData('."'".$data->Id."'".', true);"><span class="fa fa-search"></span> View</a>';
			}
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{
				// if($data->EmployeeId == $_SESSION['EMPLOYEE_ID']  || ($_SESSION['ADMIN_USER_TYPE'] == 'SUPER ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'ADMIN')) {	
				$action .= '<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteData('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
	        }    
				$action .= ' </div>'
	                  .'</div>';
			
			$row[]	=	$action;		
			$action = '';
			
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Client_model->countAll(),
						"recordsFiltered" => $this->Client_model->countFiltered($branch,$employeeId),
						"data" => $data1,
				);
		//output to json format
		echo json_encode($output);
	}
//==================================== getEditClient function for getting the details of Clients by id - by Sajitha ================================
	public function getEditClient($id)
	{
		$data = $this->Client_model->getById($id);
		echo json_encode($data);
	}   
	
	//==================================== loadProductModule function to load modules of selected product - by Sajitha ================================
	public function loadProductModule()
	{
		$id 	= $this->input->post('productId');
		$cid 	= $this->input->post('clientId');
		$planid 	= $this->input->post('planId');
		$data 	= $this->Common_model->loadProductModule($id,$cid,$planid);
		echo $data;
	} 

	//==================================== loadPlans function to load plans of selected product - by Sajitha ================================
	public function loadPlans()
	{
		$id 	= $this->input->post('productId');
		$cid 	= $this->input->post('clientId');
		$data 	= $this->Common_model->loadPlans($id,$cid);
		echo $data;
	}
	
	//==================================== clientSaveProduct function for Saving products from Edit Client section - by Sajitha ( Need to work with more contents on this in future) ================================
	public function clientSaveProduct()
	{
		$id				= $this->input->post("clientID");
		$productId  	= $this->input->post('Product_Id');
		
		$db  			= new Database();
		$productName 	= $db->getFieldValueById("product_master", "ProductName", "Id='{$productId}'");
		$planId 		= $this->input->post('PlanId');
		$planName 		= $db->getFieldValueById("product_plan", "PlanTitle", "Id='{$planId}'");
		$modules  		= $this->input->post('Modules');
		$totalPrice 	= $this->input->post('Price');
		
		// --- checking the existance of Client Id in client_product_licence table start;
		$where = "ClientId='{$id}'";
		$res = $db->checkExistance("client_product_licence", $where); //  if exists id value will be returned.
		
		if($res) { // if Client Id exists in client_product_licence table
			$productLicencelist 	= $this->ClientProductLicence_model->getById($id); // will return all the records having Client Id
			foreach ($productLicencelist as $licence) {
				$where 	= "ClientId='{$id}' and ProductLicenceCode='{$licence->ProductLicenceCode}' and ProductId='{$productId}'";
				$res 	= $db->checkExistance("client_product_licence", $where); 
				if($res) { // if exists id value will be returned. if where conditions meet, product licence code will be used for other conditions and all
					$productLicenceCode = $licence->ProductLicenceCode;
					break;
				}	
			}
			
			if(!$res) // if not exists in client_product_licence table according to the where condition above new  Product Licence Code will be generated
				$productLicenceCode = $this->Common_model->generateLicenceCode();
		} else
			$productLicenceCode = $this->Common_model->generateLicenceCode();// if Client Id not exists in client_product_licence table new Product Licence Code will be generated
		
		if(!$res) // if add
		{ 		
			$data = array(
						'ProductLicenceCode' => $productLicenceCode,
						'PurchaseDate' => date('Y-m-d H:i:s'),
						'PlanId' => $planId,
						'PlanName' => $planName,
						'ExpireOn' => date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s") . " + 1 year")),
						'ClientId' => $id,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),	
						'Status' => 'Active',
						'EmployeeId' => $_SESSION['EMPLOYEE_ID'],
						'ProductId' => $productId,
						'ProductName' => $productName,
					);
		}
		else 
		{ // if edit
				$data = array(
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);
		}
		// --- saving purchased product details to the client_product_licence table
		$licenceId 	= $this->ClientProductPurchase_model->saveClientProductPurchaseData($data, $res);			
		
		// --- checking the existance start in client_product_licence_detail table
		$where 		= "ClientId='{$id}' and ProductLicenceCode='{$productLicenceCode}'";
		$resdet 	= $db->checkExistance("client_product_licence_detail", $where); // if exists id value will be returned.
		
		if(!$resdet) // if add
		{    
			$data1 = array(
						'ProductLicenceCode' => $productLicenceCode,
						'UpdatedOn' => date('Y-m-d H:i:s'),
						'PlanId' => $planId,
						'PlanName' => $planName,
						'ExpireOn' => date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s") . " + 1 year")),
						'ClientId' => $id,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),	
						'Status' => 'Active',
						'EmployeeId' => $_SESSION['EMPLOYEE_ID'],
						'ProductId' => $productId,
						'ProductName' => $productName,						
						'LicenceId' => $licenceId,
					);
		}
		else { // if edit			
				$data1 = array(	
						'UpdatedOn' => date('Y-m-d H:i:s'),				
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),		
						);
		}
		// --- saving purchased product details to the client_product_licence_detail table
		$res1= $this->ClientProductPurchase_model->saveClientProductPurchaseDataDetails($data1, $resdet);
		
		// --- checking the existance in client_product_purchase start;
		$where_prdt_purch = "ProductLicenceCode='{$productLicenceCode}' and LicenceId='{$licenceId}'";
		$res_prdt_purch = $db->checkExistance("client_product_purchase", $where_prdt_purch); //  if exists id value will be returned.
		$totalModules = 0;
		// getting the details of selected modules
		if($modules != '') {
			$modulesArray = explode(",",$modules);
			$totalModules = count($modulesArray);
		}
		
		// Saving details to the client_product_purchase table		
		if(!$res_prdt_purch) { // if add
			
			$data_prdt_purch = array(
						'ProductLicenceCode' => $productLicenceCode,
						'PurchasedDate' => date('Y-m-d H:i:s'),
						'PlanId' => $planId,
						'ExpireOn' => date("Y-m-d H:i:s", strtotime(date("Y-m-d H:i:s") . " + 1 year")),
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),	
						'Status' => 'Active',
						'ClientId' => $id,
						'EmployeeId' => $_SESSION['EMPLOYEE_ID'],
						'ProductId' => $productId,
						'ProductName' => $productName,						
						'LicenceId' => $licenceId,
						'TotalModules' => $totalModules,
						'ProductTotalPrice' => $totalPrice,
					);
			$res_prdt_purch = $this->ClientProductPurchase_model->saveClientProductPurchasePrice($data_prdt_purch, $res_prdt_purch);						
		}
		else { //if edit
			$this->db->set('TotalModules', "TotalModules+{$totalModules}", FALSE);
			$this->db->set('ProductTotalPrice', "ProductTotalPrice+{$totalPrice}", FALSE);
			$this->db->set('ModifiedBy', $_SESSION['ADMIN_ID']);
			$this->db->set('ModifiedOn', date('Y-m-d H:i:s'));			
			$where = array('Id' =>$res_prdt_purch);
			$this->db->where($where);
			$this->db->update('client_product_purchase');			
		}
		
		// Saving details to the client_product_purchase_detail table		
		if($modules != '') {
			foreach($modulesArray as $modules) {
				$moduleName = 	$db->getFieldValueById("product_module", "ModuleName", "Id='{$modules}'");
				$modulePrice = 	$db->getFieldValueById("product_module", "ModulePrice", "Id='{$modules}'");
				$data = array(
					'ProductLicenceCode' => $productLicenceCode,
					'ProductId' => $productId,
					'ProductPurchaseId' => $res_prdt_purch,
					'LicenceId' => $licenceId,
					'ModuleName' => $moduleName,
					'ModuleId' => $modules,
					'ModulePrice' => $modulePrice,
					'ModulePurchasedOn' => date('Y-m-d H:i:s'),
					'CreatedBy' => $_SESSION['ADMIN_ID'],
					'CreatedOn' => date('Y-m-d H:i:s'),	
					'Status' => 'Active',
					'EmployeeId' => $_SESSION['EMPLOYEE_ID'],
					'ProductName' => $productName,
				);
				$purchaseId = $this->ClientProductPurchase_model->saveClientProductModuleData($data, 0);						
			}
		}
		$resData    = array(
							"status" => true,
							'message' => 'Purchased product successfully!!'
						);
						 
		echo json_encode($resData);
	}	
	
	//==================================== getCustomerDetails function to get all other fields by id from client_registration table - by Sajitha ================================
	public function getCustomerDetails($id)
	{
		$data1 = $this->Client_model->getById($id);
		return $data1;
	}  
	 
	//==================================== getClientProductList function to get client's product details by id from client_product_licence table- by Sajitha ================================
	public function getClientProductList($id)
	{
		$list 	= $this->ClientProductLicence_model->getById($id);
		
		$data 	= array();
        $tr 	= '';
		$modules = '';
		$db  = new Database();
		$i	= 0;
				
		foreach ($list as $data) {
			$i++;
			$updatedOn = $db->getFieldValueById("client_product_licence_detail", "UpdatedOn", "LicenceId='{$data->Id}'");
			$productTotalPrice = $db->getFieldValueById("client_product_purchase", "ProductTotalPrice", "LicenceId='{$data->Id}'");
			if($updatedOn != '')
				$updatedOn = date('d/m/Y h:i:s a', strtotime($updatedOn));
			$modules = $this->ClientProductPurchase_model->getModuleNames($data->Id);
			$tr .= '<tr><td><span>'.$i.'</span></td><td><span><a href="javascript:void(0)" onclick="viewModule('.$id.','.$data->ProductId.');">'.$data->ProductName.'</a></span></td><td><span>'.$data->ProductLicenceCode.'</span></td>';
			$tr .= '<td><span>'.date('d/m/Y h:i:s a', strtotime($data->PurchaseDate)).'</span></td><td><span>'.$updatedOn.'</span></td><td><span>'.$data->PlanName.'</span></td>';
			$tr .= '<td><span>'.date('d/m/Y h:i:s a', strtotime($data->ExpireOn)).'</span></td><td><span>'.$modules.'</span></td><td><span>'.$data->Status.'</span></td><td><span>'.$productTotalPrice.'</span></td>';
			$tr .= '<td><a  id="viewButton" class="btn btn-sm btn-info" href="javascript:void(0)" title="Click to View" onclick="viewModule('.$id.','.$data->ProductId.');"><i class="fa fa-search" aria-hidden="true"></i> View Module</a></td></tr>';
		}
		if($tr == '')
			$tr .= '<tr><td id="No_Value" colspan="11" style="text-align:center !important;"><span><strong> No products bought yet!</strong></span></td></tr>';
		//output as html format
		echo $tr;
		
	}  
	
	//==================================== getClientModuleList function to get client's product's modules details from client_product_purchase_detail table- by Sajitha ================================
	public function getClientModuleList()
	{
		$cId = $this->input->post("cid");
		if($this->input->post("prdtId"))
			$prdtId = $this->input->post("prdtId");
		else
			$prdtId = 0;
		
		$list 	= $this->ClientProductLicence_model->getById($cId,$prdtId);
		$data 	= array();
		$db  = new Database();
		
		$tr 	= '';	
		foreach ($list as $data) {
			
			$modulesdetails = $this->ClientProductPurchase_model->getModuleDetails($data->Id);
			$data1 	= array();
			$i		= 0;
			foreach ($modulesdetails as $data1) {
				$i++;
				$tr .= '<tr><td><span>'.$i.'</span></td><td><span>'.$data1->ModuleName.'</span></td><td><span>'.date('d/m/Y h:i:s a', strtotime($data1->ModulePurchasedOn)).'</span></td>';
				$tr .= '<td><span>'.$data1->ProductLicenceCode.'</span></td><td><span>'.$data1->ProductName.'</span></td>';
				$tr .= '<td><span>'.$data1->Status.'</span></td><td><span>'.$data1->ModulePrice.'</span></td></tr>';
			}
		}
		if($tr == '')
			$tr .= '<tr><td colspan="10" style="text-align:center !important;"><span><strong> No modules bought yet!</strong></span></td></tr>';
		//output as html format
		echo $tr;
	} 
	
	//==================================== Function to get all client's details on the basis of expiry date  - by Sajitha (Need to update the status progress bar & payment method which is static now) ================================
	public function getClientList()
	{
		
		$list 	= $this->ClientProductLicenceDetails_model->getClientsByExpiryDate();
		
		$data 	= array();
        $tr 	= '';
		
		foreach ($list as $data) {	
			
			$db  = new Database();
			$firstName =	$db->getFieldValueById("client_registration", "FirstName", "Id='{$data->ClientId}'");
			$lastName =	$db->getFieldValueById("client_registration", "LastName", "Id='{$data->ClientId}'");
			$countryId =	$db->getFieldValueById("client_registration", "CountryId", "Id='{$data->ClientId}'");
			$countryName =	$db->getFieldValueById("sys_country_list", "CountryEnglish", "Id='{$countryId}'");
			$profilePhotoPath =	$db->getFieldValueById("client_registration", "ProfilePhotoPath", "Id='{$data->ClientId}'");
			$profilePath = base_url().$profilePhotoPath.'thumb/';
			$profilePhoto =	$db->getFieldValueById("client_registration", "ProfilePhoto", "Id='{$data->ClientId}'");
			$profilePhoto = $profilePath.$profilePhoto;
			$lastLogin =	newTimeAgo($db->getFieldValueById("client_login", "LastLogin", "ClientRegId='{$data->ClientId}'"));
			$tr .= '<tr><td><img src="'.$profilePhoto.'" class=" rounded-circle mr-3" alt="">'.$firstName." ".$lastName.'</td>';
			$tr .= '<td><span>'.$data->ProductName.'</span></td><td><span>'.$countryName.'</span></td><td><div><div class="progress" style="height: 6px"><div class="progress-bar bg-success" style="width: 50%"></div>';
			$tr .= '</div></div></td><td><i class="fa fa-circle-o text-success  mr-2"></i> Paid</td><td><span>Last Login</span>';
            $tr .= '<span class="m-0 pl-3">'.$lastLogin.'</span></td><td><a  id="viewButton" class="btn btn-sm btn-info" href="javascript:void(0)" title="View More" onclick="viewData('."'".$data->ClientId."'".');"><i class="fa fa-search" aria-hidden="true"></i> View More</a></td></tr>';
		}

		
		//output as json format
		echo $tr;
		
	}  
	
	//==================================== deleteClient function to delete client by id  - by Sajitha ================================
	public function deleteClient($id)
	{
       //deleting client profile picture and thumbnail
		$db  				= new Database();
		$profilePhoto 		= $db->getFieldValueById("client_registration", "ProfilePhoto", "Id='{$id}'");	
		$profilePhotoPath 	= $db->getFieldValueById("client_registration", "ProfilePhotoPath", "Id='{$id}'");	
		if($profilePhoto != 'male.png' && $profilePhoto != 'female.png' && (file_exists($profilePhotoPath.$profilePhoto))) {
			unlink($profilePhotoPath.$profilePhoto);
			if(file_exists($profilePhotoPath."thumb/".$profilePhoto))
				unlink($profilePhotoPath."thumb/".$profilePhoto);
		}

		//deleting client logo and thumbnail
		$db  				= new Database();
		$clientLogo 		= $db->getFieldValueById("client_registration", "CompanyLogoFileName", "Id='{$id}'");	
		$clientLogoPath 	= $db->getFieldValueById("client_registration", "CompanyLogoPath", "Id='{$id}'");	
		if($clientLogo != 'default_logo.jpg' && (file_exists($clientLogoPath.$clientLogo))) {
			unlink($clientLogoPath.$clientLogo);
			if(file_exists($clientLogoPath."thumb/".$clientLogo))
				unlink($clientLogoPath."thumb/".$clientLogo);
		}	
		
	   $res    =  $this->Client_model->deleteData($id);
       $resData =array();
	   if($res['status'])
	   {
		   	$resData=array(
					"status"=>true,
					"message"=>"Client deleted successfully!!"
				   );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
		   
	   }
	   
	    if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	=	"client_manager"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		//$data["employeeId"]		= $employeeId; // Assigning employee id
		$data["moduleTab"]		= "client_manager"; // Assigning client_manager as moduleTab
		$resData = (object) array_merge((array) $resData, (array) $data);
	    echo json_encode($resData); 
	}  
	// -------------------------- Client module ends ----------------   

	// -------------------------- Audit Log module start ------------
	//========================== Super Admin(Developer) Audit Log Modules ====================
	public function audit_log($id="")
	{
       if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$data 						= array();
		$data 						= $this->Common_model->common_sidebar_counts();
		$data["subMenuId"]			= $id;
		$this->load->view('brq-admin/audit-log',$data);
                
	
	}
	
	//==================================== auditLogList function to get DataTables of Audit Log  - by Sajitha ================================
	public function auditLogList($subid="")
	{

		$userId		=		$this->input->post('userid');
		$logTime	=		$this->input->post('logTime');
		$branch		=		$this->input->post('branch');
		$department	=		$this->input->post('department');
		
        $list 	= $this->AuditLog_model->getDataTables($userId,$logTime,$branch,$department);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			
			$db  = new Database();
			$empId 	= $data->employeeid;//$db->getFieldValueById("login", "EmployeeId", "Id='{$data->Id}'");
			
			$row 	= array();
						
			$row[] = date('d/m/Y h:i:s a', strtotime($data->LastLoginDate));
			$row[] = $data->UserType;
		    $row[] = $data->UserName;
			$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$empId}'");
			$branchName = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");
			$row[] = $branchName;
			$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$empId}'");
			$depName = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");
			$row[] = $depName;
			$row[] = $data->LastLoginIP;
			if($data->LogOutTime == '') {
				if($empId == $_SESSION['EMPLOYEE_ID'] && session_id() == $data->SessionId)
					$row[] = '<span style="color:green;">Currently Logged In!</span>';
				else
					$row[] = '<span style="color:red;">Not systematically logout!</span>';
			} else	
				$row[] = date('d/m/Y h:i:s a', strtotime($data->LogOutTime));
           
			//add html for action
			// $actions = '<a  id="viewButton" class="btn btn-sm btn-info" href="javascript:void(0)" title="Click to View" onclick="viewAuditLog('."'".$data->Id."'".');"><i class="fa fa-search" aria-hidden="true"></i> View</a>';
		  	
			// if($_SESSION['ADMIN_USER_TYPE'] == 'SUPER ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'DEVELOPER') {		  
	        //     $actions .= '<a  id="deleteButton" class="btn btn-sm btn-danger ml-2" href="javascript:void(0)" title="Click to Delete" onclick="deleteData('."'".$data->Id."'".')"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</a>';
			// }
			$actions=$this->useractionpermission($subid,$data->Id);
			$row[] = $actions;
			
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->AuditLog_model->countAll(),
						"recordsFiltered" => $this->AuditLog_model->countFiltered($userId,$logTime,$branch,$department),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}

 	
	//==================================== getAuditLogDetails function to get all other fields by id of sys_user_log table - by Sajitha ================================
	public function getAuditLogDetails($id)
	{
		$data1 = $this->AuditLog_model->getById($id);
		return $data1;
	}   
	
	//==================================== getAuditLogMoreDetails function to get all other fields by id of sys_user_log_detail table  - by Sajitha ================================
	public function getAuditLogMoreDetails($id)
	{
		$userLogId = $id;
		
		$list 	= $this->AuditLogDetails_model->getDataTables($userLogId);
		
		$data 	= array();
        $data1 	= array();
		
		foreach ($list as $data) {
		
			$id = $data->Id;
			$row 	= array();
			$row[] = $data->Actions;			
			$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->AuditLogDetails_model->countAll(),
						"recordsFiltered" => $this->AuditLogDetails_model->countFiltered($userLogId),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
		
	}  
	
	
	//====================================Function to delete Audit Log Details by Id ================================
	public function deleteAuditLogData($id)
	{
		
	   $res = $this->AuditLog_model->deleteData($id);
	   $res = $this->AuditLogDetails_model->deleteData($id);
	   if(!$res)
	   {
		   echo json_encode(
							 array(
									'status'  =>  false,	
									'message' => 'Oops! Can\'t delete Audit Log Detail!.'
								  )
						   );	 
		   exit;
	   }
	   echo json_encode(
	   
							 array(
									'status'  =>  true,	
									'message' => 'Audit Log Detail has been deleted successfully!.'
								 )
						);	
	}
	
	//====================================Function to delete all the Audit Log Details================================
	public function deleteAllAuditLogData()
	{
		
	   $res = $this->AuditLog_model->deleteAllData();
	   $res = $this->AuditLogDetails_model->deleteAllData();
	   if(!$res)
	   {
		   echo json_encode(
							 array(
									'status'  =>  false,	
									'message' => 'Oops! Can\'t delete all Audit Log Detail!.'
								  )
						   );	 
		   exit;
	   }
	   echo json_encode(
	   
							 array(
									'status'  =>  true,	
									'message' => 'All Audit Log Details has been deleted successfully!.'
								 )
						);	
	}
	
	// -------------------------- Client module ends ----------------   
	
	// ------ added by sandeep on 01.10.20 -------------------------
	public function documentation()
	{
	

	 if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$data						= array();	
		$data["adminController"] 	= $this->adminController;
		
		$headTitleAddText			= " : Login as ";
		$headTitleAddId				=	 $_SESSION['ADMIN_ID'];
		
		$data["headTitle"] 		 	= $headTitleAddText . "- Help document creation.";
		$data						= $this->Common_model->common_sidebar_counts();
		
	    $this->load->view('brq-admin/documentation/documentation.php',$data);

  
	
	} 

	public function getDocumentFileContent()
	{
		$module 	= $this->input->post("Module");
		$filePath 	= $this->input->post("FilePath");
		
	    $this->load->model("DocumentCreation_model");
		$content = $this->DocumentCreation_model->getDocumentFileContent($module,$filePath);
		
		$resData =array(
						"status"=>true,
						"message"=>"OK",
						"content" =>$content
							
						);
		echo json_encode($resData);	
	
	}
	
		
// For testing purpose of New Design by Sajitha	on 20/10/20
	// ------ added by sandeep on 01.10.20 -------------------------
	// public function employee($add="")
	// {
	
	//  if(!$this->isSessionSet())
	// 	{
	// 		$this->index();
	// 		return;
	// 	}
		
	// 	$data						= array();	
	// 	$data["adminController"] 	= $this->adminController;
		
	// 	$headTitleAddText			= " : Login as ";
	// 	$headTitleAddId				=	 $_SESSION['ADMIN_ID'];
		
	// 	$data["headTitle"] 		 	= $headTitleAddText . "- Help document creation.";
	// 	$data						= $this->Common_model->common_sidebar_counts();
	// 	if($add != '')
	// 		$data["add"]		 	= $add; // for quick link
	// 	else
	// 		$data["add"]		 	= ''; // for quick link
	// 	unset($_SESSION["REG_CAPTCHA_WORD"]);
	//     $this->load->view('brq-admin/hr/new-employee.php',$data);
	// 	//$this->load->view('brq-admin/add-emp-modal.php',$data);

	
	// } 
	
	// -------------------------- hr_settings function to list all the HR settings in table format ----------------
	public function hr_settings($id="",$moduleTab="hr_settings")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]			= $id;
		$this->load->view("brq-admin/hr-settings", $data);
		
	}

	//================================= hrLeaveSettingsList function to list leave settings of employees ===========================
	public function hrLeaveSettingsList($id="")
	{
        $list 	= $this->HRSettings_model->getLeaveDataTables();
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		foreach ($list as $data) {
		
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$no++;
			
			$row = array();
			
			$row[] = $data->Name;
			
            $row[] = $data->Value;
			
			$row[] = $data->Description;

			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
		
			$actions ="";
			$edit ="Sub_Edit_".$id;

			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			//add html for action
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions = '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="'.'popUpPasswordRecheck('."'".$data->Id."'".','."'sys_hr_leave_settings'".');"><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>';
			}
			$row[] = $actions;	  
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->HRSettings_model->countLeaveAll(),
						"recordsFiltered" => $this->HRSettings_model->countLeaveFiltered(),
						"data" => $data1,
						"Id" => $id
				);
		//output to json format
		echo json_encode($output);
    }
	//================================= hrAtteSettingsList function to list attendance settings of employees ===========================
	public function hrAtteSettingsList($id="")
	{
        $list 	= $this->HRSettings_model->getAttendanceDataTables();
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		foreach ($list as $data) {
		
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$no++;
			
			$row = array();
			
			$row[] = $data->Name;
			
            $row[] = $data->Value;
			
			$row[] = $data->Description;
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
		
			$actions ="";
			$edit ="Sub_Edit_".$id;
		
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			//add html for action
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions= '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="'.'popUpPasswordRecheck('."'".$data->Id."'".','."'sys_hr_attendance_settings'".');"><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>';
			}
			$row[] = $actions;	  
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->HRSettings_model->countAttendanceAll(),
						"recordsFiltered" => $this->HRSettings_model->countAttendanceFiltered(),
						"data" => $data1,
				);
		//output to json format
		echo json_encode($output);
   }
    //================================= getLeaveSettingsDetails function to get leave settings's value ===========================
	public function getLeaveSettingsDetails($id=0,$table="")
	{
        $data 	= $this->HRSettings_model->getById($id,$table);
		echo json_encode($data);
   }

   //================================= saveHRSettings function to update hr settings's value ===========================
	public function saveHRSettings()
	{
       	$tableName		=		$this->input->post('tableName');
		$settingsValue	=		$this->input->post('settingsValue');
		$id				=		$this->input->post('id');

       	$this->HRSettings_model->update($id,$settingsValue,$tableName);
		echo json_encode(array("status" => true,'message' => 'success'));   
   }
   
   //================================= manage_projects function to view Projects list & Employee Projects list===========================
	
   public function manage_projects($id="",$moduleTab="manage_projects")
   {
	   if(!$this->isSessionSet())
	   {
		   $this->index();
		   return;
	   }
	   $_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
	   $this->isScreenLocked(); // screen locked checking. redirect to unlock screen
	   
	   $data 					= array();
	   $headTitleAddText		= " - Products : Login as ";
	   $headTitleAddId			= $_SESSION['ADMIN_ID'];
	   $data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
	   $data["subMenuId"]		= $id;
	   $this->load->view("brq-admin/manage-projects", $data);
  }
   //================================= manageProjectsList function to list Projects ===========================
	
   public function manageProjectsList($subid="")
   {
	   $client		=		$this->input->post('client');
	   $project	=		$this->input->post('project');
	   $status		=		$this->input->post('status');
	   $created	=		$this->input->post('created');
			   
	   $list 	= $this->Projects_model->getProjectsDataTables($client,$project,$status,$created);
	   $data 	= array();
	   $data1 	= array();
	   $no 	= $_POST['start']; 
	   
	   foreach ($list as $data) {
		   $color = "";
		   $statusClass = "label label-success";
		   $showClass	 = "label label-success";
		   $no++;
		   $actions = '';
		   
		   $row = array();
		   $row[] = $data->ProjectName;
		   
		   $row[] = $data->ClientName;
		   $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
		   $row[] = $data->CreatedBy;
		   if($data->ModifiedOn == null)
			   $row[] = '';
		   else
			   $row[] = date('d/m/Y h:i:s a', strtotime($data->ModifiedOn));
		   
		   if($data->CompletedOn == null)
			   $row[] = '';
		   else
			   $row[] = date('d/m/Y h:i:s a', strtotime($data->CompletedOn));
		   $date1=date_create($data->FinishedOn);
		   $date2=date_create($data->CreatedOn);
		   $diff=date_diff($date2,$date1);
		   
		   if($data->FinishedOn == null)
			   $row[] = '';
		   else
			   $row[] = date('d/m/Y h:i:s a', strtotime($data->FinishedOn))." <br/><br/></span> <span class='label label-success'> (".$diff->format("%R%a days").")</span>";
		   if($data->Status == 'Processing') {
			   $statusClass = "label label-success";
			   $row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
		   } else if($data->Status == 'Completed') {
			   $statusClass = "label label-warning";
			   $row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
		   } else if($data->Status == 'Finished') {
			   $statusClass = "label label-danger";
			   $row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
		   } else if($data->Status == 'Created') {
			   $statusClass = "label label-info";
			   $row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
		   }
		   //add html for action
		   	$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$verify = "Sub_Verify_".$subid;
			$finish = "Sub_Finish_".$subid;

			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

		   $actions = '<div class="btn-group">'
					 .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"   aria-expanded="false">'
					 .'Action<span class="sr-only">Toggle Dropdown</span>'
					 .'</button>';
					//  .'<div class="dropdown-menu" role="menu" style="">';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				if($data->Status != 'Finished') {
					$actions .= '<div class="dropdown-divider"></div>'
						.'<a id="editProjButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)"  onclick="loadClientNameCombo();editProject('."'".$data->Id."'".');"><span class="fa fa-edit"></span> Edit</a>';
				} 
			}
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{
		//    if($_SESSION['ADMIN_USER_TYPE'] == 'SUPER ADMIN'  || $_SESSION['ADMIN_USER_TYPE'] == 'ADMIN') {
			   $actions .='<div class="dropdown-divider"></div>'
			   . '<a id="deleteProjButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  onclick="checkAssigned('."'".$data->Id."'".');"><span class="fa fa-trash text-fanger"></span> Delete</a>';
		    }
			if(in_array($copy,$userGroupPermission)||in_array($copy,$userWisePermission))
			{
			   $actions .= '<div class="dropdown-divider"></div>';
			   $actions .='<a id="copyProjButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" onclick="loadClientNameCombo();editProject('."'".$data->Id."'".',true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($verify,$userGroupPermission)||in_array($verify,$userWisePermission))
			{
			   if($data->VeryfiedById == '') {
			   $actions .= '<div class="dropdown-divider"></div>';
			$actions .= '<a id="verifyProjButton"  class="dropdown-item text-success verify_data"  href="javascript:void(0)" onclick="verifyProject('."'".$data->Id."'".');"><span class="fa fa-check"></span> Verify</a>';
				}
			}
			if(in_array($finish,$userGroupPermission)||in_array($finish,$userWisePermission))
			{
				if($data->Status != 'Finished' && $data->VeryfiedById != '') {
					$actions .= '<div class="dropdown-divider"></div>'
					.'<a id="finishProjButton"  class="dropdown-item text-danger finish_data"  href="javascript:void(0)" onclick="finishProject('."'".$data->Id."'".');"><span class="fa fa-hourglass-end"></span> Finish</a>';
				}
			}			
			   $actions .= ' </div>'
					 .'</div>';
		   
		   $row[] = $actions;
		   $data1[] = $row;
	   }
	   $output = array(
					   "draw" => $_POST['draw'],
					   "recordsTotal" => $this->Projects_model->countProjectsAll(),
					   "recordsFiltered" => $this->Projects_model->countProjectsFiltered($client,$project,$status,$created),
					   "data" => $data1,
			   );
	   //output to json format
	   echo json_encode($output);
   }
	
	//================================= manageMyProjectsList function to list Projects of logged in employee===========================
	public function manageMyProjectsList()
	{
		
		/*if($this->input->post('employee') == '')
			$employee	=		$_SESSION['EMPLOYEE_ID'];
		else*/
		$employee	=		$this->input->post('employee');
		$employee1	=		$this->input->post('employee1');
		
		$project	=		$this->input->post('project');
		$status		=		$this->input->post('status');
		$assigned	=		$this->input->post('assigned');
		//Variable for checking whether project listing for my / assigned / other projects
		$usecheck	=		$this->input->post('usecheck');
		$fromfilter	=		$this->input->post('fromfilter');
		$branch 	=		$this->input->post('branch');
		$department =		$this->input->post('department');
		
        $list 	= $this->Projects_model->getEmployeeProjectsDataTables($employee,$employee1,$project,$status,$assigned,$usecheck,$fromfilter,$branch,$department);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		foreach ($list as $data) {
			$no++;
			$row = array();
			
			
			$db  = new Database();
			//For my projects no need of Employee Name
			//if($usecheck != "") {
				$firstName 	= $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'");
				$lastName 	= $db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");
				$row[] = $firstName." ".$lastName;
			//}
			$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
			$branchName = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");
			$row[] = $branchName;
			$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
			$depName = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");
			$row[] = $depName;
			$row[] = $db->getFieldValueById("project_head", "ProjectName", "Id='{$data->ProjectHeadId}'");
			
			$row[] = date('d/m/Y h:i:s a', strtotime($data->AssignedOn));
			$row[] = $data->CreatedBy;
			if($data->ModifiedOn == null)
				$row[] = '';
			else
				$row[] = date('d/m/Y h:i:s a', strtotime($data->ModifiedOn));
			if($data->CompletedOn == null)
				$row[] = '';
			else
				$row[] = date('d/m/Y h:i:s a', strtotime($data->CompletedOn));
			
			//Giving color style to Status of the project
			if($data->Status == 'Processing') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Completed') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Finished') {
				$statusClass = "label label-danger";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} 
			//add html for action 
		  	$row[] = '<a  id="viewButton" class="btn btn-sm btn-info" href="javascript:void(0)" title="Click to View" onclick="viewData('."'".$data->Id."'".','."'".$usecheck."'".');"><i class="fa fa-search" aria-hidden="true"></i> View</a> ';
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Projects_model->countEmployeeProjectsAll($usecheck),
						"recordsFiltered" => $this->Projects_model->countEmployeeProjectsFiltered($employee,$employee1,$project,$status,$assigned,$usecheck,$fromfilter,$branch,$department),
						"data" => $data1,
				);
		//output to json format
		echo json_encode($output);
    }
	
	//================================= manageEmployeeProjectsList function to list Employee Projects ===========================
	public function manageEmployeeProjectsList($subid="")
	{
		$employee	=		$this->input->post('employee');
		$project	=		$this->input->post('project');
		$status		=		$this->input->post('status');
		$assigned	=		$this->input->post('assigned');
		$branch 	=		$this->input->post('branch');
		$department =		$this->input->post('department');
				
        $list 	= $this->Projects_model->getEmployeeProjectsDataTables($employee,'',$project,$status,$assigned,"empprj",0,$branch,$department);
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		foreach ($list as $data) {	
			$actions = '';
			$row = array();
			$db  = new Database();
			
			$firstName 	= $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'");
			$lastName 	= $db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");
            $row[] = $firstName." ".$lastName;
			$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
			$branchName = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");
			$row[] = $branchName;
			$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
			$depName = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");
			$row[] = $depName;
			$row[] = $db->getFieldValueById("project_head", "ProjectName", "Id='{$data->ProjectHeadId}'");
			
			$row[] = date('d/m/Y h:i:s a', strtotime($data->AssignedOn));
			$row[] = $data->CreatedBy;
			if($data->ModifiedOn == null)
				$row[] = '';
			else
				$row[] = date('d/m/Y h:i:s a', strtotime($data->ModifiedOn));
			if($data->CompletedOn == null)
				$row[] = '';
			else
				$row[] = date('d/m/Y h:i:s a', strtotime($data->CompletedOn));
			if($data->Status == 'Processing') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Completed') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Finished') {
				$statusClass = "label label-danger";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			}
			//add html for action

			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>'
	                  .'<div class="dropdown-menu" role="menu" style="">';
			if($data->Status != 'Finished') {	
				
				if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
				{
					  
				$actions .='<div class="dropdown-divider"></div>'
					. '<a id="editEmpButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="loadProjectNameCombo();editEmpProject('."'".$data->Id."'".');"><span class="fa fa-edit"></span> Edit</a>';
				  
				}
				if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
				{
				
					$actions .= '<div class="dropdown-divider"></div>'
					  .'<a id="copyEmpButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="loadProjectNameCombo();editEmpProject('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
				}		  
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .= '<a id="deleteEmpButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete"  onclick="deleteEmpProjectsData('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';			
	       
			}	
			// if($data->Status != 'Finished') {
			// 	$actions .= '<div class="dropdown-divider"></div>'
			// 		  .'<a id="copyEmpButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="loadProjectNameCombo();editEmpProject('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			// }		  
				$actions .= ' </div>'
	                  .'</div>';
			
		  	$row[] = $actions;	  	  
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Projects_model->countEmployeeProjectsAll("empprj"),
						"recordsFiltered" => $this->Projects_model->countEmployeeProjectsFiltered($employee,'',$project,$status,$assigned,"empprj",0,$branch,$department),
						"data" => $data1,
				);
		//output to json format
		echo json_encode($output);
    }
	
	//================================= getProjectsDetails function to get Project's details ===========================
	public function getProjectsDetails($id=0)
	{
        $data 	= $this->Projects_model->getById($id,'project_head');
		echo json_encode($data);
	}
	
	//================================= getEmpProjectsDetails function to get Employee Project's details ===========================
	public function getEmpProjectsDetails($id=0)
	{
        $data 	= $this->Projects_model->getById($id,'employee_projects');
		$resData = array();
		$db = new Database();			
		$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
		$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
	    $resData = array(
						"BranchId" => $branchId,
						"DepId" => $depId
				 );
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData);
	}
	
	
	public function checkProjectAssigned($id)
	{
		$res    =  $this->Projects_model->checkProjectAssigned($id);
		echo $res;
	}
	
	//=========================== deleteProject function used for deleting Project by id from project_head table===========================	 
	public function deleteProject($id)
	{
       $res    =  $this->Projects_model->deleteData($id,'project_head');
       $resData =array();
	   if($res)
	   {
		   	$db = new BrqDatabase();
			$resCombo = $db->getProjectNameCombo();
			$resData = array("status" => true,'message' => "Project deleted successfully!!",'filterProject' => $resCombo);	   
		  
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete!!"
				   );
		   
	   }
	   
	    if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	=	"manage_projects"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$resData = (object) array_merge((array) $resData, (array) $data);
	    echo json_encode($resData); 
   }    
   
   //=========================== finishProject function used for finishing a Project by id in project_head table===========================	 
	public function finishProject($id)
	{
       $res    =  $this->Projects_model->finishProject($id,'project_head');
       $resData =array();
	   if($res)
	   {
		   		   
		   $resData=array(
					"status"=>true,
					"message"=>"Project finished successfully!!"
				   );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't finished!!"
				   );
		   
	   }
	   echo json_encode($resData); 
   }    
   
   //=========================== verifyProject function used for verifying a Project by id in project_head table===========================	 
	public function verifyProject($id)
	{
       $res    =  $this->Projects_model->verifyProject($id,'project_head');
       $resData =array();
	   if($res)
	   {
		   		   
		   $resData=array(
					"status"=>true,
					"message"=>"Project verified successfully!!"
				   );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't verified!!"
				   );
		   
	   }
	   echo json_encode($resData); 
   }   
   
    //=========================== deleteEmpProject function used for deleting Employee Project by id from employee_projects table===========================	 
	public function deleteEmpProject($id)
	{
	   $res    =  $this->Projects_model->deleteData($id,'employee_projects');
	   $resData =array();

	   if($res)
	   {
			$db = new BrqDatabase();
			$resCombo = $db->getEmpProjectNameCombo("empprj");
			$resData = array("status" => true,'message' => "Employee Project deleted successfully!!",'filterEmpProject' => $resCombo);	   
		  	  
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete!!"
				   );
		   
	   }
	   
	    if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$_SESSION["USER_MODULE_PAGE"]	=	"manage_projects"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$resData = (object) array_merge((array) $resData, (array) $data);
		
		echo json_encode($resData);
    }   
    //================================= checkExists function  to check whether Project is already created to the same client ===========================
	public function checkExistsProject()
	{
		$projectName  	= $this->input->post('projectName');
		$clientId  		= $this->input->post('clientId');
		$data = array(
							'ProjectName' => $projectName,
							'ClientId' => $clientId,
							'Status !=' => 'Finished',
						);
		$res = $this->Projects_model->checkExistsProject($data);
		echo $res;
		//echo json_encode(array("status" => true,'message' => 'success')); 
	}
   
	//================================= saveProject function  to save Project ===========================
	public function saveProject()
	{
			$projectName  	= $this->input->post('projectName');
			$clientId  		= $this->input->post('clientId');
			$newClient  	= $this->input->post('newClient');
			if($newClient == '') {
				$db  = new Database();
				$firstName 	= $db->getFieldValueById("client_registration", "FirstName", "Id='{$clientId}'");
				$lastName 	= $db->getFieldValueById("client_registration", "LastName", "Id='{$clientId}'");
				$newClient  = $firstName." ".$lastName;
			}	
		    $details  		= $this->input->post('details');
			$id  			= $this->input->post('id');
						
			if($id==0)
			{    
				$data = array(
							'ProjectName' => $projectName,
							'ClientId' => $clientId,
							'Details' => $details,
							'CreatedBy' => $_SESSION['ADMIN_ID'],
							'CreatedId' => $_SESSION['EMPLOYEE_ID'],
							'ClientName' => $newClient,
						);
			}
			else { // if edit
				
				$data = array(
							'ProjectName' => $projectName,
							'ClientId' => $clientId,
							'Details' => $details,
							'ClientName' => $newClient,
							'ModifiedBy' => $_SESSION['ADMIN_ID'],
							'ModifiedId' => $_SESSION['EMPLOYEE_ID'],
							'ModifiedOn' => date('Y-m-d H:i:s'),
						);
			}
			$res= $this->Projects_model->saveData($data, $id);
			
			if(!$this->isSessionSet())
			{
				$this->index();
				return;
			}
		
			$_SESSION["USER_MODULE_PAGE"]	=	"manage_project"; // for lock screen management;
			$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
			
			$data 					= array();
			$headTitleAddText		= " - Products : Login as ";
			$headTitleAddId			= $_SESSION['ADMIN_ID'];
			$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
			$db = new BrqDatabase();
			$resCombo = $db->getProjectNameCombo();
			$resClientCombo = $db->getClientNameCombo();
			$resData = array("status" => true,'message' => 'success','filterProject' => $resCombo,'filterClient' => $resClientCombo);
			$resData = (object) array_merge((array) $resData, (array) $data);
			echo json_encode($resData);
	}   
  
	//================================= saveEmployeeProject function  to save Employee Project ===========================
	public function saveEmployeeProject()
	{
			$employeeId  	= $this->input->post('employeeId');
			$projectId  	= $this->input->post('projectId');
			$notes  		= $this->input->post('notes');
			$id  			= $this->input->post('id');
			
			if($id==0)
			{    
				$data = array(
							'EmployeeId' => $employeeId,
							'ProjectHeadId' => $projectId,
							'Notes' => $notes,
							'CreatedBy' => $_SESSION['ADMIN_ID'],
							'CreatedId' => $_SESSION['EMPLOYEE_ID'],
							'AssignedOn' => date('Y-m-d H:i:s'),
						);
			}
			else { // if edit
				
				$data = array(
							'EmployeeId' => $employeeId,
							'ProjectHeadId' => $projectId,
							'Notes' => $notes,
							'ModifiedBy' => $_SESSION['ADMIN_ID'],
							'ModifiedId' => $_SESSION['EMPLOYEE_ID'],
							'ModifiedOn' => date('Y-m-d H:i:s'),
						);
			}
			$res = $this->Projects_model->saveEmpData($data, $id, $projectId);
			
			if(!$this->isSessionSet())
			{
				$this->index();
				return;
			}
			
			$_SESSION["USER_MODULE_PAGE"]	=	"manage_project"; // for lock screen management;
			$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
			
			$data 					= array();
			$headTitleAddText		= " - Products : Login as ";
			$headTitleAddId			= $_SESSION['ADMIN_ID'];
			$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
			
			$db = new BrqDatabase();
			$resCombo = $db->getEmpProjectNameCombo("empprj");
			$resData = array("status" => true,'message' => 'success','filterEmpProject' => $resCombo);
			$resData = (object) array_merge((array) $resData, (array) $data);
			echo json_encode($resData);
	}
	
	//================================= checkEmployeeProjectAssign function  to get the assigned Project id/s to a employee===========================
	public function checkEmployeeProjectAssign()
	{
		$employeeId  	= $this->input->post('employeeId');
		$res = $this->Projects_model->getProjectIds($employeeId);
		echo json_encode($res);
		
	}


	   
	//================================= my_projects function to view Projects of the logged in customer ===========================
	public function my_projects($userCheck="",$moduleTab="my_projects")
	{
       	if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data['userCheck']		= $userCheck;
		$this->load->view("brq-admin/my-projects", $data);
	}
   
	// ==========================  Function to view projects of logged in employee - By Sajitha   ==================================	
	public function my_projects_view($id=0,$userCheck='')
	{
		$employeeId		=	$_SESSION['EMPLOYEE_ID'];
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$_SESSION["USER_MODULE_PAGE"]	= "view_my_projects"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
				
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data1 					= $this->Projects_model->getById($id, 'employee_projects');
		
		$db  = new Database();
		$data["ProjectName"] 	= $db->getFieldValueById("project_head", "ProjectName", "Id='{$data1->ProjectHeadId}'");
		$data['Details'] 		= $db->getFieldValueById("project_head", "Details", "Id='{$data1->ProjectHeadId}'");
		$data['UserCheck'] 		= $userCheck;
		$data 					= (object) array_merge((array) $data, (array) $data1);
		
		$data 					= (object) array_merge((array) $data, (array) $data1);
		
		$this->load->view("brq-admin/view-my-projects-notes", $data);
	}
	
	//================================= saveNotes function  to save Notes ===========================
	public function saveNotes()
	{
			$notesDetails  	= $this->input->post('Notes_Details');
			$status  		= $this->input->post('Status');
			$id  			= $this->input->post('id');
			$projectId  	= $this->input->post('ProjectId');
			$employeeId  	= $this->input->post('EmployeeId');	
			
			if($id==0)
			{    
				$data = array(
							'ProjectHeadId' => $projectId,
							'EmployeeId' => $employeeId,
							'Notes' => $notesDetails,
							'Status' => $status,
							'CreatedBy' => $_SESSION['ADMIN_ID'],
							'CreatedId' => $_SESSION['EMPLOYEE_ID'],
							'ModifiedBy' => $_SESSION['ADMIN_ID'],
							'ModifiedOn' => date('Y-m-d H:i:s'),
							'ModifiedId' => $_SESSION['EMPLOYEE_ID'],
						);
				if($status == 'Completed')	{
					$data['CompletedOn'] = date('Y-m-d H:i:s');
				}
			}
			else { // if edit
				$data = array(
							'ProjectHeadId' => $projectId,
							'EmployeeId' => $employeeId,
							'Notes' => $notesDetails,
							'Status' => $status,
							'ModifiedBy' => $_SESSION['ADMIN_ID'],
							'ModifiedOn' => date('Y-m-d H:i:s'),
							'ModifiedId' => $_SESSION['EMPLOYEE_ID'],
							'CompletedOn' => date('Y-m-d H:i:s'),
						);
			}
			$res= $this->Projects_model->saveNotesData($data, $id,$status);
			echo json_encode(array("status" => true,'message' => 'success'));   
	} 
	//================================= saveReply function  to save Reply for the employee project notes ===========================
	public function saveReply()
	{
			$replyNotes  	= $this->input->post('replyNotes');
			$id  			= 0;//$this->input->post('id');
			$projectId		= $this->input->post('projectId');
			$noteId			= $this->input->post('noteId');	
			$employeeId		= $this->input->post('employeeId');	
			if($id==0)
			{    
				$data = array(
							'ProjectHeadId' => $projectId,
							'EmployeeId' => $employeeId,
							'NoteId' => $noteId,
							'Reply' => "$replyNotes",
							'CreatedBy' => $_SESSION['ADMIN_ID'],
							'CreatedId' => $_SESSION['EMPLOYEE_ID'],
						);
			}
			else { // if edit
				
				$data = array(
							'ProjectHeadId' => $projectId,
							'EmployeeId' => $employeeId,
							'NoteId' => $noteId,
							'Reply' => "$replyNotes",
							'ModifiedBy' => $_SESSION['ADMIN_ID'],
							'ModifiedOn' => date('Y-m-d H:i:s'),
							'ModifiedId' => $_SESSION['EMPLOYEE_ID'],
						);
			}
			$res= $this->Projects_model->saveReplyData($data,$replyNotes,$id);
			echo json_encode(array("status" => true,'message' => 'success'));   
	} 
	// ==========================  view_notes function for viewing the logged in employee's projects' notes without pagination for test purpose- Sajitha   ==================================
	public function view_notes()
	{
		
		
		$employeeId  	= $this->input->post('employeeid');
		$projectId  		= $this->input->post('projectid');	
		
		$resHtml = '';
		$db  = new Database();
		$firstName 	= $db->getFieldValueById("employee_master", "FirstName", "Id='{$employeeId}'");
		$lastName 	= $db->getFieldValueById("employee_master", "LastName", "Id='{$employeeId}'");
		$profilePhoto 	= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$employeeId}'");
		$profilePhotoPath 	= $db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$employeeId}'");
		$profilePath 	= base_url().$profilePhotoPath.'thumb/';
		$profilePhoto 	= $profilePath.$profilePhoto;
		
		$rowperpage = 6;
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$_SESSION["USER_MODULE_PAGE"]	= "view_notes"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		//getting the notes of logged in employee
		$this->db->from('employee_projects_detail');
		
		if($employeeId != 0)
			$this->db->where(array('EmployeeId' => $employeeId,'ProjectHeadId' => $projectId));
		$this->db->order_by('CreatedOn', 'DESC');
		$query = $this->db->get();
        $allcount = $query->num_rows();
		
		foreach ($query->result()  as $row)
		{
			$resHtml .= '<div class="card">';
            $resHtml .= '<div class="card-body">';                               
			$resHtml .= '<div class="media media-reply" style="padding: 20px;box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, 0.1);">';
			$resHtml .= '<img class="mr-3 circle-rounded" src="'.$profilePhoto.'" width="50" height="50" alt="'.$firstName.'\'s Photo">';
			$resHtml .= '<div class="media-body">';
			$resHtml .= '<div class="d-sm-flex justify-content-between mb-2">';
			$resHtml .= '<h5 class="mb-sm-0">'.$firstName.' '.$lastName.' <small class="text-muted ml-3">'.newTimeAgo($row->CreatedOn).'</small></h5>';
			$resHtml .= '<div class="media-reply__link">';
			$resHtml .= '<button id="reply'.$row->Id.'" onclick="replyFormShow('.$row->Id.');" class="btn btn-transparent p-0 ml-3 font-weight-bold">Reply</button>';
			$resHtml .= '</div>';
			$resHtml .= '</div>';
			$resHtml .= '<p>'.$row->Notes.'</p>';
			$resHtml .= '<form action="#" id="replyForm'.$row->Id.'" name="replyForm'.$row->Id.'" class="form-profile" style="display:none;">';
			$resHtml .= '<div class="form-group row" style="padding-left:30px;padding-right:30px;">';
			$resHtml .= '<div class="col-sm-12">';
			$resHtml .= '<p class="lead emoji-picker-container">';
			$resHtml .= '<textarea class="form-control textarea-control" rows="3" placeholder="Reply" data-emojiable="true" name="reply'.$row->Id.'" id="reply'.$row->Id.'" ></textarea>';
			//$resHtml .= '<textarea id="reply'.$row->Id.'" class="form-control  textarea-control" style="min-height: 120px !important;"  placeholder="Reply" data-emojiable="true"></textarea>';
			$resHtml .= '</p>';
			$resHtml .= '</div>';
			$resHtml .= '</div>';
			$resHtml .= '<hr class="my-2">';								
			$resHtml .= '<div style="padding:10px; pborder-top:1px solid #F1F5FB; text-align:right;">';
			$resHtml .= '<button type="button" id="btnReplySave'.$row->Id.'" name="btnReplySave'.$row->Id.'" onClick="replySave('.$row->Id.');" class="btn btn-success" tabindex="4"><i class="fa fa-check-circle-o" aria-hidden="true"></i> Save</button> ';
			$resHtml .= '<button type="button" class="btn btn-primary" id="btnReplyReset'.$row->Id.'" onClick="$(\'#replyForm'.$row->Id.'\')[0].reset();" tabindex="5"><i class="fa fa-refresh"></i> Reset</button> ';
			$resHtml .= '<button type="button" class="btn btn-danger" id="btnReplyCancel'.$row->Id.'" onClick="$(\'#replyForm'.$row->Id.'\').hide();" tabindex="5"><i class="fa fa-window-close-o"></i> Cancel</button>';
			$resHtml .= '</div>';								
			$resHtml .= '</form>';
			$resHtml .= '</div>';
			$resHtml .= '</div>';
			$resHtml .= '</div>';
            $resHtml .= '</div>';
			
		}
		echo $resHtml;
	}
	
	// ==========================  loadNotes function for viewing the logged in employee's projects' notes with pagination - Sajitha   ==================================
	public function loadNotes($rowno=0){

		$employeeId  	= $this->input->post('employeeid');
		$projectId  	= $this->input->post('projectid');	
		
		$db  			= new Database();
		$firstName 		= $db->getFieldValueById("employee_master", "FirstName", "Id='{$employeeId}'");
		$lastName 		= $db->getFieldValueById("employee_master", "LastName", "Id='{$employeeId}'");
		$profilePhototemp 	= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$employeeId}'");
		$profilePhotoPath = $db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$employeeId}'");
		$profilePath 	= base_url().$profilePhotoPath.'thumb/';
		$profilePhoto 	= $profilePath.$profilePhototemp;
		if(!(file_exists($profilePhotoPath.'thumb/'.$profilePhototemp)) || $profilePhototemp == '') {
			if($db->getFieldValueById("employee_master", "Sex", "Id='{$employeeId}'") == "Male")
				$profilePhoto 	= $profilePath."male.png";
			else
				$profilePhoto 	= $profilePath."female.png";
		}
		
		// Row per page
		$rowperpage = 2;

		// Row position
		if($rowno != 0){
		  $rowno = ($rowno-1) * $rowperpage;
		}
	 
		// All records count
		$allcount = $this->Projects_model->getnotesrecordCount($employeeId,$projectId);

		// Get records
		$users_record = $this->Projects_model->getNotes($rowno,$rowperpage,$employeeId,$projectId);
	 
		// Pagination Configuration
		$config['base_url'] = base_url(). $this->adminController."/loadNotes";
		$config['use_page_numbers'] = TRUE;
		$config['total_rows'] = $allcount;
		$config['per_page'] = $rowperpage;
		$config["uri_segment"] = 3;
		$choice = $config["total_rows"] / $config["per_page"];
		$config["num_links"] = round($choice);

        $config['full_tag_open'] = "<ul class='pagination'>";
	    $config['full_tag_close'] = '</ul>';
	    $config['num_tag_open'] = '<li>';
	    $config['num_tag_close'] = '</li>';
	    $config['cur_tag_open'] = '<li class="active"><a href="#">';
	    $config['cur_tag_close'] = '</a></li>';
	    $config['prev_tag_open'] = '<li>';
	    $config['prev_tag_close'] = '</li>';
	    $config['first_tag_open'] = '<li>';
	    $config['first_tag_close'] = '</li>';
	    $config['last_tag_open'] = '<li>';
	    $config['last_tag_close'] = '</li>';


	    $config['prev_link'] = '<i class="fa fa-arrow-circle-left"></i>';
	    $config['prev_tag_open'] = '<li>';
	    $config['prev_tag_close'] = '</li>';


	    $config['next_link'] = '<i class="fa fa-arrow-circle-right"></i>';
	    $config['next_tag_open'] = '<li>';
	    $config['next_tag_close'] = '</li>';

		// Initialize
		$this->pagination->initialize($config);
		
		// Initialize $data Array
		$data['pagination'] = $this->pagination->create_links();
		$data['result'] = $users_record;
		$data['firstName'] = $firstName;
		$data['lastName'] = $lastName;
		$data['profilePhoto'] = $profilePhoto;
		$data['row'] = $rowno;

		echo json_encode($data);
	}
   
    //=================== timeAgo to get newTimeAgo function for the CreatedOn date--------------------
	public function timeAgo()
	{
		$dateToBeChange		= $this->input->post('createdOn');		
		echo newTimeAgo($dateToBeChange);
	}
	
	// ==========================  loadReplies function for viewing the logged in employee's projects' notes' reply - Sajitha   ==================================
	public function loadReplies($rowno=0){

		$employeeId  	= $this->input->post('employeeidreply');
		$projectId  	= $this->input->post('projectidreply');	
		$noteId  		= $this->input->post('noteidreply');
		$createdId  	= $this->input->post('createdidreply');
		
		// Get records
		$users_record = $this->Projects_model->getReplies($employeeId,$projectId,$noteId);
		
		$data1['result1'] = $users_record;
		
		echo json_encode($data1);
	}
	
	//=================== photoNTimeAgo to get newTimeAgo for the CreatedOn date and Photo of the Created person --------------------
	public function photoNTimeAgo()
	{
		$dateToBeChange		= $this->input->post('createdOn');	
		$createdId  	= $this->input->post('createdId');	
		
		$db  			= new Database();
		$firstNameReply 		= $db->getFieldValueById("employee_master", "FirstName", "Id='{$createdId}'");
		$lastNameReply 		= $db->getFieldValueById("employee_master", "LastName", "Id='{$createdId}'");
		$profilePhotoReply 	= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$createdId}'");
		$profilePhotoPath   = $db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$createdId}'");
		$profilePathReply 	= base_url().$profilePhotoPath.'thumb/';
		$profilePhotoReply 	= $profilePathReply.$profilePhotoReply;
		$data 					= array();
		$data['profilePhotoReply'] = $profilePhotoReply;
		$data['firstNameReply'] = $firstNameReply;
		$data['lastNameReply'] = $lastNameReply;
		$timeAgo = newTimeAgo($dateToBeChange);
		
		$data['timeAgo'] = $timeAgo;
		
		echo json_encode($data);
	}
	
	// -------------------------- quote_terms_conditions function to add/edit/delete all the software quotation terms & conditions ----------------
	public function quote_terms_conditions($id="",$moduleTab="quote_terms_conditions")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]		=$id;
		$this->load->view("brq-admin/quote-terms-conditions", $data);
	}	
	
	
	
	//==================================== quotationTermsConditionList function to get DataTables of Software Quotation Terms & Conditions  - by Sajitha ================================
	public function quotationTermsConditionList($subid="")
	{
		$list = $this->QuoteTermsConditions_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		$i		= 0;
		
		foreach ($list as $data) {
			$i++;
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();	
			$row[] = $i;
			$row[] = $data->Condition;
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} 
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			// $actions = '<div class="btn-group">'
	        //           .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	        //           .'Action<span class="sr-only">Toggle Dropdown</span>'
	        //           .'</button>'
	        //           .'<div class="dropdown-menu" role="menu" style="">'
	        //           .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editCondition('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>'
	        //           .'<div class="dropdown-divider"></div>'
	        //           .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editCondition('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>'
			// 		  .'<div class="dropdown-divider"></div>'
	        //           .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteCondition('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>'
	        //           .' </div>'
	        //           .'</div>';
			$actions= $this->useractionpermission($subid,$data->Id);
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->QuoteTermsConditions_model->countAll(),
						"recordsFiltered" => $this->QuoteTermsConditions_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}

	
	//==================================== saveQuotationTermsCondition function for Saving Software Quotation Terms & Conditions details - by Sajitha ================================
	public function saveQuotationTermsCondition()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$condition  			= $this->input->post('Condition');
		$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " UPPER(`Condition`)='".strtoupper($condition)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("sys_quotation_terms_condition", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Software Quotation Terms & Condition is already created and exists! Please change the Condition."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'Condition' => $condition,
						'Status' => $status,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'Condition' => $condition,
						'Status' => $status,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		
		$res	= $this->QuoteTermsConditions_model->saveData($data, $id);
		$resData = array("status" => true,'message' => 'Software Quotation Terms & Condition details saved successfully!!');
		
		echo json_encode($resData);
	}
	
	//=========================== deleteQuotationTermsCondition function used for deleting Software Quotation Terms & Conditions details by id from sys_quotation_terms_condition table===========================	 
	public function deleteQuotationTermsCondition($id)
	{
       $res    =  $this->QuoteTermsConditions_model->deleteData($id);
       $resData =array();
	  
	   if($res['status'])
	   {
			$resData=array(
					"status"=>true,
					"message"=>$res['message']
				   );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
		echo json_encode($resData); 
    }    
		
	//=========================== getEditQuotationTermsCondition function used for getting a Software Quotation Terms & Conditions details by id in sys_quotation_terms_condition table ===========================	 
	public function getEditQuotationTermsCondition($id)
	{
		$data = $this->QuoteTermsConditions_model->getById($id);
		echo json_encode($data);
	}
	
	// -------------------------- service_details function to add/edit/delete all the services ----------------
	
	public function service_details($id="",$moduleTab="our_services")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]		= $id;
		$this->load->view("brq-admin/our-services", $data);		
	}
	
	
	
	//==================================== servicesList function to get DataTables of services  - by Sajitha ================================
	public function servicesList($subid="")
	{
		$serviceId		=		$this->input->post('serviceid');
		$serviceCatId	=		$this->input->post('servicecatid');
        $list 	= $this->Services_model->getDataTables($serviceId,$serviceCatId);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = stripslashes($data->ServiceName);
			$row[] = $db->getFieldValueById("client_service_category", "CategoryName", "Id='{$data->CategoryId}'");
			$row[] = $data->ServicePrice;
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Temporarily Suspended') {
				$statusClass = "label label-danger";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			if($data->SuspendedOn != null)
				$row[] =  date('d/m/Y h:i:s a', strtotime($data->SuspendedOn));
			else
				$row[] =  '';
			$firstName 	= $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->SuspendedId}'");
			$lastName 	= $db->getFieldValueById("employee_master", "LastName", "Id='{$data->SuspendedId}'");
			$row[] = $firstName." ".$lastName;
			//add html for action
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>'
	                  .'<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editServices('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>'
	                  .'<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editServices('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>'
					  .'<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete"  onclick="deleteService('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			if($data->Status != "Temporarily Suspended") {
				$actions .=	'<div class="dropdown-divider"></div>'				
				.' <a id="suspendButton"  class="dropdown-item text-danger edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Suspend"  onclick="suspendService('."'".$data->Id."'".')"><span class="fa fa-pause"></span> Suspend</a>';
			} else {
				$actions .=	'<div class="dropdown-divider"></div>'				
				.' <a id="unSuspendButton"  class="dropdown-item text-success edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to UnSuspend"  onclick="unSuspendService('."'".$data->Id."'".')"><span class="fa fa-play"></span> UnSuspend</a>';
			}		  
	        $actions .=' </div>'
	                  .'</div>';
			// $actions= $this->useractionpermission($subid,$data->Id);
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Services_model->countAll(),
						"recordsFiltered" => $this->Services_model->countFiltered($serviceId,$serviceCatId),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
 	
	//==================================== servicesCategoryList function to get DataTables of service categories  - by Sajitha ================================
	public function servicesCategoryList($subid="")
	{
		
        $list 	= $this->ServicesCat_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
				
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row 	= array();
			$db  			= new Database();			
			$row[] = $data->CategoryName;
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-danger";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			}
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] = $data->CreatedBy;
			if($data->ModifiedOn != null)
				$row[] =  date('d/m/Y h:i:s a', strtotime($data->ModifiedOn));
			else
				$row[] = "";
			$row[] =  $data->ModifiedBy;
			
			//add html for action
			// $actions = '<div class="btn-group">'
	        //           .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	        //           .'Action<span class="sr-only">Toggle Dropdown</span>'
	        //           .'</button>'
	        //           .'<div class="dropdown-menu" role="menu" style="">'
	        //           .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editCat('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>'
	        //           .'<div class="dropdown-divider"></div>'
	        //           .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editCat('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>'
			// 		  .'<div class="dropdown-divider"></div>'
	        //           .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete"  onclick="deleteCat('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>'
	        //           .' </div>'
	        //           .'</div>';
			$actions = $this->useractionpermission($subid,$data->Id);
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Services_model->countAll(),
						"recordsFiltered" => $this->Services_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
	
	//=========================== getEditService function used for getting a Service details by id from client_service_head table===========================	 
	public function getEditService($id)
	{
		$data = $this->Services_model->getById($id);
		echo json_encode($data);
	}
	
	//=========================== getEditServiceCat function used for getting a Service Category details by id from client_service_category table===========================	 
	public function getEditServiceCat($id)
	{
		$data = $this->ServicesCat_model->getById($id);
		echo json_encode($data);
	}
	
	//==================================== saveService function for Saving Service details - by Sajitha ================================
	public function saveService()
	{
		$id				= $this->input->post("hidID");
		$data 			= array();  
		$serviceName  	= trim(addslashes($this->input->post('Service_Name')));
		$categoryName 	= $this->input->post('CategoryName');
		$servicePrice  	= $this->input->post('Service_Price');
		$serviceLink  	= $this->input->post('Service_Link');		
		
		// To avoiding specialchars in the link string
		$slink			= explode('/', $serviceLink);
		if($id==0)
			$serviceLink	= $slink[0] ."/". $slink[1] ."/". removeSpecialChar($slink[2]);  // removeSpecialChar is defined in common_functions helper
		else	
			$serviceLink	= $slink[0] ."/". $slink[1] ."/". $slink[2] ."/". removeSpecialChar($slink[3]);  // removeSpecialChar is defined in common_functions helper
		
		$status 		= $this->input->post('Status');
		$details  		= trim(addslashes($this->input->post('Details')));
		$SEO 			= trim(addslashes($this->input->post('SEO')));
		$features  		= trim(addslashes($this->input->post('Features')));
		
		$clientMenuItem = str_replace('service_details/', '', strtolower($this->input->post('Service_Link')));
		
		//if($id == 0) {
			$db  			= new Database();
			$where   		= " UPPER(ServiceName)='".strtoupper($serviceName)."' and Id!={$id} and CategoryId={$categoryName}";
			$res 			= $db->checkExistance("client_service_head", $where); // if exists id value will be returned.
		
			if($res)
			{
				echo json_encode(
									array("status" => false, 
										  "message"=>"This service is already created and exists! Please change the service name."
										 )
								);
				exit;
			}
		//}
		if($id==0) // if add
		{    
			$data = array(
						'ServiceName' => $serviceName,
						'CategoryId' => $categoryName,
						'ServicePrice' => $servicePrice,
						'Status' => $status,
						'Details' => $details,
						'Features' => $features,
						'LinkPage' => $serviceLink,
						'SEO' => $SEO,
						'CreatedId'		=>	$_SESSION['EMPLOYEE_ID'],
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),
						'ClientMenuItem' => $clientMenuItem,
						
					);
				
		}
		else { // if edit
				$data = array(
						'ServiceName' => $serviceName,
						'CategoryId' => $categoryName,
						'ServicePrice' => $servicePrice,
						'Status' => $status,
						'Details' => $details,
						'Features' => $features,
						'LinkPage' => $serviceLink,
						'SEO' => $SEO,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),
						'ClientMenuItem' => $clientMenuItem,						
						);
				if($status == 'Temporarily Suspended') {
					$data['SuspendedOn'] = date('Y-m-d H:i:s');
					$data['SuspendedId'] = $_SESSION['EMPLOYEE_ID'];
				}		
		}
		$res	= $this->Services_model->saveData($data, $id);
	   		
		$db = new BrqDatabase();
		$resCombo = $db->getServiceNameCombo();
		$resData  = array(
							"status" => true,
							'message' => 'Service details saved successfully!!',
							'filterService' => $resCombo
						 );	
		echo json_encode($resData);
	}
	
	//==================================== Function to get Service Names as options according to the selected category Id - by Sajitha ================================
	public function getCategoryServiceName()
	{
		$db				= new Database();
		$catid			= $this->input->post("catid");
		$serviceNames   = $db->fillCombo("client_service_head", "ServiceName", "...Choose...", "", "Id", "CategoryId=$catid", "");
		
		echo $serviceNames;
	}
	
	//==================================== saveServiceCategory function for Saving Service Category details - by Sajitha ================================
	public function saveServiceCategory()
	{
		$id				= $this->input->post("hidID");
		$data 			= array();  
		$catName  		= $this->input->post('Cat_Name');
		$status 		= $this->input->post('CatStatus');
		
		$db  			= new Database();
		$where   		= " UPPER(CategoryName)='".strtoupper($catName)."' and Id!={$id}";
		$res 			= $db->checkExistance("client_service_category", $where); // if exists id value will be returned.
	
		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This service category is already created and exists! Please change the service  category name."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'CategoryName' => $catName,
						'Status' => $status,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),
					);
				
		}
		else { // if edit
				$data = array(
						'CategoryName' => $catName,
						'Status' => $status,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),					
						);
		}
		$res	= $this->ServicesCat_model->saveData($data, $id);
	   
		$db = new BrqDatabase();
		$resCatCombo = $db->getServiceCatCombo();
		$resData    = array(
								"status" => true,
								'message' => 'Service Category details saved successfully!!',
								'filterServiceCatName' => $resCatCombo
						 );					 
				 
		echo json_encode($resData);
                
	}
	
	//=========================== deleteService function used for deleting Service details by id from client_service_head table===========================	 
	public function deleteService($id)
	{
       $res    =  $this->Services_model->deleteData($id);
       $resData = array();
	   if($res['status'])
	   {
		    $db = new BrqDatabase();
			$resCombo = $db->getServiceNameCombo();
			$resData    = array(
								"status" => true,
								'message' => 'Service deleted successfully!!',
								'filterService' => $resCombo
						 );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete service!!"
				   );
	   }
	   echo json_encode($resData); 
    }    
    
	//=========================== deleteCatService function used for deleting Service category details by id from client_service_category table===========================	 
	public function deleteCatService($id)
	{
       $res    =  $this->ServicesCat_model->deleteData($id);
       $resData =array();
	   if($res['status'])
	   {
		    $db = new BrqDatabase();
			$resCatCombo = $db->getServiceCatCombo();
			$resData    = array(
								"status" => true,
								'message' => 'Service category deleted successfully!!',
								'filterServiceCatName' => $resCatCombo
						 );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
	   echo json_encode($resData); 
    }   
	
	//=========================== suspendService function used for suspending Service by id in client_service_head table===========================	 
	public function suspendService($id)
	{
       $res    =  $this->Services_model->suspendData($id);
       $resData =array();
	   if($res)
	   {
		   $resData=array(
					"status"=>true,
					"message"=>"Service suspended successfully!!"
				   );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't suspend service!!"
				   );
	   }
	   echo json_encode($resData); 
    }   
	
	//=========================== unSuspendService function used for unsuspending Service by id in client_service_head table===========================	 
	public function unSuspendService($id)
	{
       $res    =  $this->Services_model->unSuspendData($id);
       $resData =array();
	   if($res)
	   {
		   $resData=array(
					"status"=>true,
					"message"=>"Service unsuspended successfully!!"
				   );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't unsuspend service!!"
				   );
	   }
	   echo json_encode($resData); 
    }   
	
	// -------------------------- client_menu function to add/edit/delete all the client menus ----------------
	public function client_menu($moduleTab="client_menu")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$this->load->view("brq-admin/client-menu", $data);
	}
	
	//==================================== clientMenuList function to get DataTables of Client Menu  - by Sajitha ================================
	public function clientMenuList($subid="")
	{
        $list 	= $this->Clientmenu_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row 	= array();
			$db  			= new Database();			
			$row[] = stripslashes($data->MenuItemName);
			$row[] = $data->IsMainMenu;
			$row[] = $data->IsWithSubMenu;
			$row[] = $data->IsDropDownMenu;
			$row[] = $data->MenuOrder;
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			
			$row[] = $data->CreatedBy;
			//add html for action
			$actions= $this->useractionpermission($subid,$data->Id);
			$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Clientmenu_model->countAll(),
						"recordsFiltered" => $this->Clientmenu_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
		
	//=========================== deleteMenu function used for deleting Client Menu details by id from client_menu table===========================	 
	public function deleteMenu($id)
	{
		$db     = new Database();
		$where 			= "CategoryId='{$id}'";
		$result 			= $db->checkExistance("sys_admin_sub_menu", $where); // if exists id value will be returned.
		if($result)
		{
			echo json_encode(
				array("status" => false, 
					  "message"=>"Can't Delete MenuItem. Some Sub Menus are created under this MenuItem ."
					 )
			);
			exit;
		}
       $res    =  $this->Clientmenu_model->deleteData($id);
       $resData =array();
	   if($res)
	   {
		   $resData=array(
					"status"=>true,
					"message"=>"Client menu deleted successfully!!"
				   );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete client menu!!"
				   );
	   }
	   echo json_encode($resData); 
    }    
    
	//==================================== saveClientMenu function for Saving Client Menu details - by Sajitha ================================
	public function saveClientMenu()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$menuItemName  			= addslashes($this->input->post('Menu_Item_Name'));
		$mainMenu 				= $this->input->post('Main_Menu');
		$dropdown  	    		= $this->input->post('Dropdown');
		$serviceLink  			= $this->input->post('Service_Link');
		$status 				= $this->input->post('Status');
		$linkPage  				= $this->input->post('Link_Page');
		$menuOrder 				= $this->input->post('Menu_Order');
		$dropdownTable 			= $this->input->post('Dropdown_Table');
		$viewName 	    		= $this->input->post('ViewName');
		$viewFullPath   		= $this->input->post('ViewFullPath'); 
		$dropdownTableFieldName = $this->input->post('Dropdown_Table_Field_Name');
		$subMenuTable 			= $this->input->post('SubMenu_Table');
		$subTableFieldName 		= $this->input->post('Sub_Table_Field_Name');
		$subTableIdFieldName 	= $this->input->post('Sub_Table_Id_Field_Name');
		$isWithSubMenu 			= $this->input->post('IsWithSubMenu');
		$isShownInTopMenuGroup 	= $this->input->post('IsShownInTopMenuGroup');
		$isSEOFriendlyURL 		= $this->input->post('IsSEOFriendlyURL');
		
		$db  			= new Database();
		$where   		= " UPPER(MenuItemName)='".strtoupper($menuItemName)."' and Id!={$id}";
		$res 			= $db->checkExistance("client_menu", $where); // if exists id value will be returned.
		
		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This client menu is already created and exists! Please change the client menu name."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'MenuItemName' => $menuItemName,
						'Status' => $status,
						'LinkPage' => $linkPage,
						'IsMainMenu' => $mainMenu,
						'MenuOrder' => $menuOrder,
						'IsDropDownMenu' => $dropdown,
						'DropDownMenuTable' => $dropdownTable,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),
						'ViewName' => $viewName,
						'ViewFullPath' => $viewFullPath,
						'TableNameField'=>$dropdownTableFieldName,
						'SubMenuTable' => $subMenuTable,
						'SubTableNameField' => $subTableFieldName,
						'SubTableIdFieldName' => $subTableIdFieldName,
						'IsWithSubMenu' => $isWithSubMenu,
						'IsShowInTopMenuGroup' => $isShownInTopMenuGroup,
						'IsSEOFriendlyURL' => $isSEOFriendlyURL
					);
				
		}
		else { // if edit
			$data = array(
					'MenuItemName' => $menuItemName,
					'Status' => $status,
					'LinkPage' => $linkPage,
					'IsMainMenu' => $mainMenu,
					'MenuOrder' => $menuOrder,
					'IsDropDownMenu' => $dropdown,
					'DropDownMenuTable' => $dropdownTable,
					'ModifiedBy' => $_SESSION['ADMIN_ID'],
					'ModifiedOn' => date('Y-m-d H:i:s'),
					'ViewName' => $viewName,
					'ViewFullPath' => $viewFullPath,
					'TableNameField'=>$dropdownTableFieldName,
					'SubMenuTable' => $subMenuTable,
					'SubTableNameField' => $subTableFieldName,
					'SubTableIdFieldName' => $subTableIdFieldName,
					'IsWithSubMenu' => $isWithSubMenu,
					'IsShowInTopMenuGroup' => $isShownInTopMenuGroup,
					'IsSEOFriendlyURL' => $isSEOFriendlyURL					
					);						
		}
		$res	= $this->Clientmenu_model->saveData($data, $id);
	   
		$resData    = array(
								"status" => true,
								'message' => 'Client Menu details saved successfully!!'
						 );
				 
		echo json_encode($resData);       
	}
	
	//=========================== getEditMenu function used for getting a Client Menu details by id from client_menu table===========================	 
	public function getEditMenu($id)
	{
		$data = $this->Clientmenu_model->getById($id);
		echo json_encode($data);
	}
	
	// -------------------------- job_skills function to add/edit/delete all the job skills ----------------
	public function job_skills($id,$moduleTab="job_skills")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $fuctionName =  $this->uri->segment(2);
		// $db = new Database();
		// $Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		// $this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]		= $id;
		$this->load->view("brq-admin/job-skills", $data);
	}
	
	//==================================== jobSkillsList function to get DataTables of job skills  - by Sajitha ================================
	public function jobSkillsList()
	{
        $list 	= $this->JobSkills_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = $data->Skill;
			$row[] = $data->Group;
			if($data->Status == 1) {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == 0) {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			$permission = $_SESSION['GROUP_PERMISSION'];
		
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
		
			$actions ="";
			$view ="Under_Visible_".$id;
			$edit ="Under_Edit_".$id;
			$edit ="Under_Copy_".$id;
			$delete = "Under_Del_".$id;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .= '<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editSkill('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
					}
			if(in_array($copy,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editSkill('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete"  onclick="deleteSkill('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			$actions .=' </div>'
	                  .'</div>';
			
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->JobSkills_model->countAll(),
						"recordsFiltered" => $this->JobSkills_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
 	
	//==================================== saveJobSkills function for Saving Job Skills details - by Sajitha ================================
	public function saveJobSkills()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$skill_Name  			= $this->input->post('Skill_Name');
		$group 					= $this->input->post('Group');
		$new_group 				= $this->input->post('New_Group');
		$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " UPPER(`Skill`)='".strtoupper($skill_Name)."' and UPPER(`Group`)='".strtoupper($group)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("job_skills", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Skills is already created and exists! Please change the Skills name."
									 )
							);
			exit;
		}
		
		if($group == '0'){
			$group = $new_group;
		}
		if($id==0) // if add
		{    
			$data = array(
						'Skill' => $skill_Name,
						'Status' => $status,
						'Group' => $group,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'Skill' => $skill_Name,
						'Status' => $status,
						'Group' => $group,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		
		$res	= $this->JobSkills_model->saveData($data, $id);
		
		$db = new BrqDatabase();
		$resCombo = $db->getJobSkillGroupCombo();
		$resData = array("status" => true,'message' => 'Job Skills details saved successfully!!','jobSkillsGroup' => $resCombo);
		
		echo json_encode($resData);
	}
	
	//=========================== deleteSkills function used for deleting Job Skills details by id from job_skills table===========================	 
	public function deleteSkills($id)
	{
       $res    =  $this->JobSkills_model->deleteData($id);
       $resData =array();
	   if($res['status'])
	   {
			$db = new BrqDatabase();
			$resCombo = $db->getJobSkillGroupCombo();
			$resData=array(
					"status"=>true,
					"message"=>"Job Skills deleted successfully!!",
					"jobSkillsGroup" => $resCombo
				   );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
		echo json_encode($resData); 
    }    
	
	//=========================== getEditSkills function used for getting a Job Skills details by id from job_skills table===========================	 
	public function getEditSkills($id)
	{
		$data = $this->JobSkills_model->getById($id);
		echo json_encode($data);
	}
	
	// -------------------------- job_education function to add/edit/delete all the job education ----------------
	public function job_education($id,$moduleTab="job_education")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $fuctionName =  $this->uri->segment(2);
		// $db = new Database();
		// $Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		// $this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]		= $id;

		$this->load->view("brq-admin/job-education", $data);
	}
	
	//==================================== jobEducationList function to get DataTables of job education  - by Sajitha ================================
	public function jobEducationList()
	{
        $list 	= $this->JobEducation_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = $data->Education;
			$row[] = $data->Group;
			if($data->Status == 1) {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == 0) {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			$permission = $_SESSION['GROUP_PERMISSION'];
		
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
		
			$actions ="";
			$view ="Under_Visible_".$id;
			$edit ="Under_Edit_".$id;
			$edit ="Under_Copy_".$id;
			$delete = "Under_Del_".$id;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
					  if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
					  {
						  $actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editEducation('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
					}
					if(in_array($copy,$userGroupPermission) || in_array($delete,$userWisePermission))
					{
						$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editEducation('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
					}
					if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
					{
						$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteEducation('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
					}
					$actions .=' </div>'
	                  		  .'</div>';
			
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->JobEducation_model->countAll(),
						"recordsFiltered" => $this->JobEducation_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
 	
	//==================================== saveJobEducation function for Saving Job Education details - by Sajitha ================================
	public function saveJobEducation()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$education  			= $this->input->post('Education_Name');
		$group 					= $this->input->post('Group');
		$new_group 				= $this->input->post('New_Group');
		$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " UPPER(`Education`)='".strtoupper($education)."' and UPPER(`Group`)='".strtoupper($group)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("job_education", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This education is already created and exists! Please change the job_education name."
									 )
							);
			exit;
		}
		
		if($group == '0'){
			$group = $new_group;
		}
		if($id==0) // if add
		{    
			$data = array(
						'Education' => $education,
						'Status' => $status,
						'Group' => $group,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'Education' => $education,
						'Status' => $status,
						'Group' => $group,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		
		$res	= $this->JobEducation_model->saveData($data, $id);
		
		$db = new BrqDatabase();
		$resCombo = $db->getJobEducationGroupCombo();
		$resData = array("status" => true,'message' => 'Job Education details saved successfully!!','jobEducationGroup' => $resCombo);
		
		echo json_encode($resData);
	}
	
	//=========================== deleteEducation function used for deleting Job Education details by id from job_education table===========================	 
	public function deleteEducation($id)
	{
       $res    =  $this->JobEducation_model->deleteData($id);
       $resData =array();
	   if($res['status'])
	   {
			$db = new BrqDatabase();
			$resCombo = $db->getJobEducationGroupCombo();
			$resData=array(
					"status"=>true,
					"message"=>"Job Education deleted successfully!!",
					"jobEducationGroup" => $resCombo
				   );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Job Education!!"
				   );
	   }
		echo json_encode($resData); 
    }    
		
	//=========================== getEditEducation function used for getting a Job Education details by id from job_education table===========================	 
	public function getEditEducation($id)
	{
		$data = $this->JobEducation_model->getById($id);
		echo json_encode($data);
	}
	// -------------------------- job_certifications function to add/edit/delete all the job certifications ----------------
	public function job_certifications($id="",$moduleTab="job_certifications")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $fuctionName =  $this->uri->segment(2);
		// $db = new Database();
		// $Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		// $this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]		= $id;

		$this->load->view("brq-admin/job-certifications", $data);
	}
	
	//==================================== jobCertificationsList function to get DataTables of job certifications  - by Sajitha ================================
	public function jobCertificationsList()
	{
        $list 	= $this->JobCertifications_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = $data->Certification;
			$row[] = $data->Group;
			if($data->Status == 1) {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == 0) {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			$permission = $_SESSION['GROUP_PERMISSION'];
		
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
		
			$actions ="";
			$view ="Under_Visible_".$id;
			$edit ="Under_Edit_".$id;
			$edit ="Under_Copy_".$id;
			$delete = "Under_Del_".$id;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .= '<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit"  onclick="editCertification('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editCertification('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteCertification('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			$actions .=' </div>'
	                  .'</div>';
			
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->JobCertifications_model->countAll(),
						"recordsFiltered" => $this->JobCertifications_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
 	
	//==================================== saveJobCertification function for Saving Job Certifications details - by Sajitha ================================
	public function saveJobCertification()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$certifications  		= $this->input->post('Certification_Name');
		$group 					= $this->input->post('Group');
		$new_group 				= $this->input->post('New_Group');
		$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " UPPER(`Certification`)='".strtoupper($certifications)."' and UPPER(`Group`)='".strtoupper($group)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("job_certification", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Certification is already created and exists! Please change the job_education name."
									 )
							);
			exit;
		}
		
		if($group == '0'){
			$group = $new_group;
		}
		if($id==0) // if add
		{    
			$data = array(
						'Certification' => $certifications,
						'Status' => $status,
						'Group' => $group,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'Certification' => $certifications,
						'Status' => $status,
						'Group' => $group,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		
		$res	= $this->JobCertifications_model->saveData($data, $id);
		
		$db = new BrqDatabase();
		$resCombo = $db->getJobCertificationsGroupCombo();
		$resData = array("status" => true,'message' => 'Job Certifications details saved successfully!!','jobCertificationGroup' => $resCombo);
		
		echo json_encode($resData);
	}
	
	//=========================== deleteCertifications function used for deleting Job Certifications details by id from job_certifications table===========================	 
	public function deleteCertification($id)
	{
       $res    =  $this->JobCertifications_model->deleteData($id);
       $resData =array();
	   if($res['status'])
	   {
			$db = new BrqDatabase();
			$resCombo = $db->getJobCertificationsGroupCombo();
			$resData=array(
					"status"=>true,
					"message"=>"Job Certifications deleted successfully!!",
					"jobCertificationGroup" => $resCombo
				   );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
		echo json_encode($resData); 
    }    
		
	//=========================== getEditCertification function used for getting a Job Certification details by id from job_certification table===========================	 
	public function getEditCertification($id)
	{
		$data = $this->JobCertifications_model->getById($id);
		echo json_encode($data);
	}
	
	
	
	// -------------------------- Overtime function to add/edit/delete overtime categories & overtime requests ----------------
	public function overtime($id="",$moduleTab="overtime")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]		= $id;
		$this->load->view("brq-admin/overtime", $data);
		
	}
	
	
	//==================================== overtimeList function to get DataTables of overtime categories  - by Sajitha ================================
	public function overtimeCatList($subid="")
	{
        $list 	= $this->OvertimeCat_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = stripslashes($data->CategoryName);
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"  aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editOvertimeCat('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission)||in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editOvertimeCat('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteOvertimeCat('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			$actions .=' </div>'
	                  .'</div>';
			
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->OvertimeCat_model->countAll(),
						"recordsFiltered" => $this->OvertimeCat_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}

	//==================================== overtimeRequestsList function to get DataTables of overtime requests  - by Sajitha ================================
	public function overtimeRequestsList($subid="")
	{
        
		$employee		=		$this->input->post('employee');
		$overtimecatid	=		$this->input->post('overtimecatid');
		$branch			=		$this->input->post('branch');
		$department		=		$this->input->post('department');
        $list 	= $this->Overtime_model->getDataTables($employee,$overtimecatid,$branch,$department);
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();
			$profilePath 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/';
			$mainPhoto		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$data->EmployeeId}'");
			if($mainPhoto == '') {
				if($db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'") == "Male")
					$mainPhoto 	= "male.png";
				else
					$mainPhoto 	= "female.png";
			}
			
			$profilePhotoLarge 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").$mainPhoto;
			$profilePhoto 	= $profilePath.$mainPhoto;
			if(!(file_exists($db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/'.$mainPhoto)) || $mainPhoto == '') {
				if($db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'") == "Male")
					$profilePhoto 	= $profilePath."male.png";
				else
					$profilePhoto 	= $profilePath."female.png";
			}
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'").'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';			
			$row[] = $db->getFieldValueById("employee_master", "Code", "Id='{$data->EmployeeId}'");
			
			$firstName 	= $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'");
			$lastName 	= $db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");
			$row[] = $firstName." ".$lastName;
			$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
			$branchName = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");
			$row[] = $branchName;
			$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
			$depName = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");
			$row[] = $depName;
			$catName = $db->getFieldValueById("overtime_category", "CategoryName", "Id='{$data->CategoryId}'");
			$row[] = $catName;

			$row[] = date('d/m/Y h:i:s a', strtotime($data->StartTime));
			$row[] = date('d/m/Y h:i:s a', strtotime($data->EndTime));
			if($data->ProjectId == 0)
				$row[] = 'Other Works';
			else {
				$projectName 	= $db->getFieldValueById("project_head", "ProjectName", "Id='{$data->ProjectId}'");
				$row[] = $projectName;
			}
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				
				$actions .= '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="editOvertimeRequests('."'".$data->Id."'".')" ><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>';
			}
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{
				$actions .=' <a  id="deleteButton" class="btn btn-sm btn-danger mt-1" href="javascript:void(0)" title="Click to Delete" onclick="deleteOvertimeRequests('."'".$data->Id."'".')"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</a>';
			}
		  	$row[] = $actions;	
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Overtime_model->countAll(),
						"recordsFiltered" => $this->Overtime_model->countFiltered($employee,$overtimecatid,$branch,$department),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}

	
	//=========================== getEditOvertimeCat function used for getting a Overtime Category details by id from overtime_category table===========================	 
	public function getEditOvertimeCat($id)
	{
		$data = $this->OvertimeCat_model->getById($id);
		echo json_encode($data);
	}
	
	//==================================== saveOvertimeCategory function for Saving Overtime Category details - by Sajitha ================================
	public function saveOvertimeCategory()
	{
		$id				= $this->input->post("hidID");
		$data 			= array();  
		$overtimeName  	= $this->input->post('Overtime_Name');
		$status 		= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " UPPER(CategoryName)='".strtoupper($overtimeName)."' and Id!={$id}";
		$res 			= $db->checkExistance("overtime_category", $where); // if exists id value will be returned.
	
		if($res)
		{
			echo json_encode(
				array("status" => false, 
					  "message"=>"This overtime category is already created and exists! Please change the overtime category name."
					 )
			);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'CategoryName' => $overtimeName,
						'Status' => $status,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),
					);
				
		}
		else { // if edit
				$data = array(
						'CategoryName' => $overtimeName,
						'Status' => $status,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),					
						);
		}
		$res	= $this->OvertimeCat_model->saveData($data, $id);
	    
		
		$db = new BrqDatabase();
		$resCatCombo = $db->getOvertimeCatCombo();
		$resData    = array(
								"status" => true,
								'message' => 'Overtime Category details saved successfully!!',
								'filterOvertimeCatName' => $resCatCombo
						 );					 
		
		echo json_encode($resData);                
	}
	
	//==================================== saveOvertime function for Saving Overtime Requests details - by Sajitha ================================
	public function saveOvertime()
	{
		$id				= $this->input->post("hidID");
		$data 			= array();  
		$employeeId  	= $this->input->post('EmployeeId');
		$overtimeCat 	= $this->input->post('OvertimeCat');
		$start_Time 	= strtotime(str_replace('-', ' ', $this->input->post('Start_Time')));
		$start_Time 	= date('Y-d-m H:i:s',$start_Time);
		
		$end_Time  		= strtotime(str_replace('-', ' ', $this->input->post('End_Time')));
		$end_Time 		= date('Y-d-m H:i:s',$end_Time);
		$status 		= $this->input->post('Status');
		$projectId  	= $this->input->post('ProjectId');
		$notes 			= $this->input->post('Notes');
		
		if($id==0) // if add
		{    
			$data = array(
						'EmployeeId' => $employeeId,
						'CategoryId' => $overtimeCat,
						'StartTime' => $start_Time,
						'Status' => $status,
						'EndTime' => $end_Time,
						'ProjectId' => $projectId,
						'Notes' => $notes,
						'CreatedId'		=>	$_SESSION['EMPLOYEE_ID'],
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),
					);
				
		}
		else { // if edit
				$data = array(
						'EmployeeId' => $employeeId,
						'CategoryId' => $overtimeCat,
						'StartTime' => $start_Time,
						'Status' => $status,
						'EndTime' => $end_Time,
						'ProjectId' => $projectId,
						'Notes' => $notes,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),
						'ModifiedId'		=>	$_SESSION['EMPLOYEE_ID'],						
						);
		}
		$res	= $this->Overtime_model->saveData($data, $id);
	   
		$resData    = array(
								"status" => true,
								'message' => 'Service details saved successfully!!',
						 );	
		echo json_encode($resData);
                
	}
	
	//=========================== getEmployeeCombo function used for getting employee name according to the selected branch and department===========================	 
	public function getEmployeeCombo()
	{
		$depId  	= $this->input->post('depId');
		$branchId  	= $this->input->post('branchId');
		$SQL 		="SELECT EmployeeId ";
		$SQL 		.=" FROM login where BranchId={$branchId} and DepId={$depId} order by CreatedOn ASC";
		
		$list		=  $this->db->query($SQL);
		$retHTML ="";
		if($list->num_rows()>0)
		{
			$retHTML = "<option value=''>...Select employee name...</option>";
		
			foreach ($list->result()  as $row)
			 {
				$EmpId  		= $row->EmployeeId;
				$db 			= new Database();
				$FirstName 		= $db->getFieldValueById("employee_master", "FirstName", "Id='{$row->EmployeeId}'");
				$LastName 		= $db->getFieldValueById("employee_master", "LastName", "Id='{$row->EmployeeId}'");
				$profilePhotoPath = $db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$row->EmployeeId}'");
				$profilePath 	= base_url($profilePhotoPath."thumb/");
				$profilePhoto	= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$row->EmployeeId}'");
				if(!(file_exists($profilePhotoPath."thumb/".$profilePhoto))) {
					if($db->getFieldValueById("employee_master", "Sex", "Id='{$row->EmployeeId}'")== "Male")
						$profilePhoto 	= "male.png";
					else
						$profilePhoto 	= "female.png";
				}
				$UserGroup 		= $db->getFieldValueById("employee_master", "UserGroupId", "Id='{$row->EmployeeId}'");
				$UserGroupName 	= $db->getFieldValueById("sys_user_group", "UserGroup", "Id='{$UserGroup}'");
				$retHTML 	    .= "<option  value='{$EmpId}'  data-thumbnail='".$profilePath.$profilePhoto."'>{$FirstName} {$LastName} ({$UserGroupName})</option>";			
			 } 
		 		 	
		} else {
			$retHTML 		= "<option value='No employees' disabled selected>...No employees...</option>";
		}	
		
		echo $retHTML;
	}	
	
	//=========================== getRegisteredEmployeeCombo function used for getting all registered employee name according to the selected branch and department===========================	 
	public function getRegisteredEmployeeCombo()
	{
		$depId  	= $this->input->post('depId');
		$branchId  	= $this->input->post('branchId');
		$subTab		= $this->input->post('subTab');
		$opr		= $this->input->post('opr');
		$subCond 	= '';
		if($subTab == 'Skills' && $opr == 'add') {
			$subCond .= " and OtherSkills  IS NULL ";
		} elseif($subTab == 'Edu' && $opr == 'add') {
			$subCond .= " and TopQualification  IS NULL ";
		} elseif($subTab == 'Cert' && $opr == 'add') {
			$subCond .= " and TopCertification  IS NULL ";
		}  elseif($subTab == 'Exp' && $opr == 'add') {
			$subCond .= " and TotalExperience  IS NULL ";
		}  elseif($subTab == 'PF' && $opr == 'add') {
			$subCond .= " and (`PFApplicable` = 'No' and `ESIApplicable` = 'No' and `PensionApplicable` = 'No') ";
		}  else {
			if(strtolower($opr) != 'filter' && strtolower($opr) != 'edit' && $subTab != 'Lang'  && $subTab != 'Depe' && $subTab != 'Contact' && $subTab != 'Emp_Doc_Sec')
				$subCond .= " and Status='Active' ";
		}
		if($subTab == 'Beneficiary' && $opr == 'add') {
			$SQL ="SELECT Id,FirstName,LastName,ProfilePhotoPath,ProfilePhoto,JobTitleId,Sex ";
			$SQL .=" FROM employee_master where BranchId={$branchId} and DepId={$depId} and Id NOT IN (SELECT EmployeeId FROM employee_beneficiary) order by CreatedOn ASC";
		} else {		
			$SQL ="SELECT Id,FirstName,LastName,ProfilePhotoPath,ProfilePhoto,JobTitleId,Sex ";
			$SQL .=" FROM employee_master where BranchId={$branchId} and DepId={$depId}".$subCond." order by CreatedOn ASC";
		}
		
		$list		=  $this->db->query($SQL);
	
		$retHTML ="";
		if($list->num_rows()>0)
		{
			$retHTML = "<option value=''>...Select employee name...</option>";
		
			foreach ($list->result()  as $row)
			 {
				$EmpId  		= $row->Id;
				$db 			= new Database();
				$FirstName 		= $row->FirstName;
				$LastName 		= $row->LastName;
				$profilePhotoPath = $row->ProfilePhotoPath;
				$profilePath 	= base_url($profilePhotoPath."thumb/");
				$profilePhoto	= $row->ProfilePhoto;
				if(!(file_exists($profilePhotoPath."thumb/".$profilePhoto)) || $profilePhoto=='') {
					if($row->Sex == "Male")
						$profilePhoto 	= "male.png";
					else
						$profilePhoto 	= "female.png";
				}
				$JobTitle 		= $row->JobTitleId;
				$JobTitleName 	= $db->getFieldValueById("job_titles", "JobTitle", "Id='{$JobTitle}'");
				$retHTML 	    .= "<option  value='{$EmpId}'  data-thumbnail='".$profilePath.$profilePhoto."'>{$FirstName} {$LastName} ({$JobTitleName})</option>";			
			 } 
		 		 	
		} else {
			$retHTML 		= "<option value='No employees' disabled selected>...No employees...</option>";
		}	
		
		echo $retHTML;
	}	
	
	//=========================== getEmployeeDocCombo function used for getting employee name according to the selected branch and department===========================	 
	public function getEmployeeDocCombo()
	{
		$depId  	= $this->input->post('depId');
		
		for($i=0;$i<count($depId);$i++) {
			$SQL 		= "SELECT Id,DepId ";
			if($depId[$i] == 'All')
				$SQL 		.=" FROM employee_master where Status='Active' order by CreatedOn ASC";
			else	
				$SQL 		.=" FROM employee_master where DepId={$depId[$i]} order by CreatedOn ASC";
			
			$list		=  $this->db->query($SQL);
			$retHTML ="";
			if($list->num_rows()>0)
			{
				
				foreach ($list->result()  as $row)
				 {
					$EmpId  		= $row->Id;
					$db 			= new Database();
					$FirstName 		= $db->getFieldValueById("employee_master", "FirstName", "Id='{$row->Id}'");
					$LastName 		= $db->getFieldValueById("employee_master", "LastName", "Id='{$row->Id}'");
					
					$UserGroup 		= $db->getFieldValueById("employee_master", "UserGroupId", "Id='{$row->Id}'");
					$UserGroupName 	= $db->getFieldValueById("sys_user_group", "UserGroup", "Id='{$UserGroup}'");
				
					$departmentName = $db->getFieldValueById("department", "DepartmentName", "Id='{$row->DepId}'");
					$retHTML 	    .= "<option  value='{$EmpId}'>{$FirstName} {$LastName} ({$UserGroupName}) ({$departmentName})</option>";	
				 }	
			}
			echo $retHTML;
			
		}
		
		
	}	
	
	//=========================== getEmployeeProjectCombo function used for getting employee name who are assigned to the projects according to the selected branch and department===========================	 
	public function getEmployeeProjectCombo()
	{
		$depId  	= $this->input->post('depId');
		$branchId  	= $this->input->post('branchId');
		$userCheck  	= $this->input->post('userCheck');
		if($userCheck == "assigned") {
			$db = new BrqDatabase();
			$resCombo = $db->getEmployeeNameCombo($branchId,$depId,true,true);
			echo $resCombo;
		} else if($userCheck == "") {
			$db = new BrqDatabase();
			$resCombo = $db->getAdminNameCombo($branchId,$depId,true,false);
			echo $resCombo;
		} else {
			$db = new BrqDatabase();
			$resCombo = $db->getAdminNameCombo($branchId,$depId,true,true);
			echo $resCombo;
		}
	}
	//=========================== getEmployee1ProjectCombo function used for getting employee name who are assigned to the projects according to the selected branch and department===========================	 
	public function getEmployee1ProjectCombo()
	{
		$depId  	= $this->input->post('depId');
		$branchId  	= $this->input->post('branchId');
		$userCheck  = $this->input->post('userCheck');
		$db = new BrqDatabase();
		$resCombo = $db->getEmployeeNameCombo($branchId,$depId,true,false);
		echo $resCombo;
	}
	
	
	//=========================== getMyProjects function used for getting the assigned projects of a employee which are not finished===========================	 
	public function getMyProjects($id)
	{
		$SQL 		 ="SELECT ProjectHeadId ";
		$SQL 		.=" FROM employee_projects where EmployeeId={$id} and Status!='Finished' order by CreatedOn ASC";
		
		$list		=  $this->db->query($SQL);
		$retHTML ="";
		if($list->num_rows()>0)
		{
			$retHTML = "<option value=''>...Select project name...</option>";
		
			foreach ($list->result()  as $row)
			 {
				
				$PrjId  		= $row->ProjectHeadId;
				$db 			= new Database();
				$PrjName 		= $db->getFieldValueById("project_head", "ProjectName", "Id='{$row->ProjectHeadId}'");
				
				$retHTML 		.= "<option  value='{$PrjId}' >{$PrjName}</option>";
			 } 
		 		 	
		} else {
			$retHTML 		= "<option value='No projects' disabled selected>...No projects...</option>";
		}	
					
		$retHTML 		.= "<option value='Other works'>...Other works...</option>";
		echo $retHTML;
	}	
	
	//=========================== deleteCatOvertime function used for deleting Overtime category details by id from overtime_category table===========================	 
	public function deleteCatOvertime($id)
	{
       $res    =  $this->OvertimeCat_model->deleteData($id);
       $resData =array();
	   if($res['status'])
	   {
			$db = new BrqDatabase();
			$resCatCombo = $db->getOvertimeCatCombo();
			$resData    = array(
								"status" => true,
								'message' => $res['message'],
								'filterOvertimeCatName' => $resCatCombo
						 );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }	   
	   echo json_encode($resData); 
    }  
 	
	//=========================== deleteOvertime function used for deleting Overtime requests details by id from overtime_requests table===========================	 
	public function deleteOvertime($id)
	{
       $res    =  $this->Overtime_model->deleteData($id);
       $resData =array();
	   if($res)
	   {
			$resData    = array(
								"status" => true,
								'message' => 'Overtime requests deleted successfully!!'
						 );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete overtime requests!!"
				   );
	   }
	   echo json_encode($resData); 
    }  
	
	//=========================== getEditOvertimeRequests function used for getting a overtime requests details by id from overtime_requests table===========================	 
	public function getEditOvertimeRequests($id)
	{
		$data = $this->Overtime_model->getById($id);
		$resData = array();
		$db = new Database();			
		$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
		$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
	    $resData = array(
						"BranchId" => $branchId,
						"DepId" => $depId
				 );
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData);
	}
	// -------------------------- job_details function to add/edit/delete Job Details Setup ----------------
	public function job_details($id="",$moduleTab="job_details")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $fuctionName =  $this->uri->segment(2);
		// $db = new Database();
		// $Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		// $this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data[$subMenuId]		= $id;
		$this->load->view("brq-admin/job-details", $data);
		
	}
	
	//==================================== jobTitlesList function to get DataTables of Job Titles  - by Sajitha ================================
	public function jobTitlesList($subid="")
	{
		$list 	= $this->JobTitles_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = stripslashes($data->JobTitleCode);
			$row[] = $data->JobTitle;
			$row[] = $db->getFieldValueById("sys_erp_projects", "ProjectName", "Id='{$data->BrqerpProjectId}'");
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}
			if($data->OpenCloseStatus == 1)		
				$checked = "checked";
			else
				$checked = "";
			$row[] = '<label class="switch"><input onClick="openClose('."'".$data->Id."'".');" id="Open_Close'.$data->Id.'" '.$checked.' class="switch-input" type="checkbox" /><span class="switch-label" data-on="Open" data-off="Close"></span><span class="switch-handle"></span></label>';
			if(strtotime($data->OpenDate) != '')
				$row[] = date('d/m/Y h:i:s a', strtotime($data->OpenDate));
			else
				$row[] = '';
			if(strtotime($data->CloseDate) != '')
				$row[] =  date('d/m/Y h:i:s a', strtotime($data->CloseDate));
			else
				$row[] = '';
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] = $data->CreatedBy;
			$permission = $_SESSION['GROUP_PERMISSION'];
		
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
		
			$actions ="";
			$view ="Under_Visible_".$subid;
			$edit ="Under_Edit_".$subid;
			$edit ="Under_Copy_".$subid;
			$delete = "Under_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			//add html for action
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editJobTitles('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editJobTitles('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteJobTitles('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			$actions .=' </div>'
	                  .'</div>';
			
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->JobTitles_model->countAll(),
						"recordsFiltered" => $this->JobTitles_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
		
	//==================================== payGradesList function to get DataTables of Pay Grades  - by Sajitha ================================
	public function payGradesList($subid="")
	{
		$list 	= $this->PayGrades_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$jobTitleCode = $db->getFieldValueById("job_titles", "JobTitleCode", "Id='{$data->JobTitleId}'");
			$row[] = $db->getFieldValueById("job_titles", "JobTitle", "Id='{$data->JobTitleId}'")." - (".$jobTitleCode.")";
			$row[] = $db->getFieldValueById('sys_currency_list', 'CurrencyName', "Id={$data->CurrencyId}");
			$row[] = $data->MinSalary;
			$row[] = $data->MaxSalary;
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] = $data->CreatedBy;

			//add html for action
			$permission = $_SESSION['GROUP_PERMISSION'];
		
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			// print_r($userGroupPermission);
			$actions ="";
			$view ="Under_Visible_".$subid;
			$edit ="Under_Edit_".$subid;
			$copy ="Under_Copy_".$subid;
			$delete = "Under_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			//add html for action
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"  aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .= '<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editPayGrades('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission)||in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editPayGrades('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($copy,$userGroupPermission)||in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deletePayGrades('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			$actions=' </div>'
	                  .'</div>';
			
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->PayGrades_model->countAll(),
						"recordsFiltered" => $this->PayGrades_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}

	//==================================== employmentStatusList function to get DataTables of Employment Status  - by Sajitha ================================
	public function employmentStatusList($subid="")
	{
		$jobTitleid  	= $this->input->post('jobTitleid');
		$empStatus 		= $this->input->post('empStatus');
		$list 	= $this->EmploymentStatus_model->getDataTables($jobTitleid,$empStatus);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();
			$jobTitleCode = $db->getFieldValueById("job_titles", "JobTitleCode", "Id='{$data->JobTitleId}'");
			$row[] = $db->getFieldValueById("job_titles", "JobTitle", "Id='{$data->JobTitleId}'")." - (".$jobTitleCode.")";			
			$row[] = $data->EmploymentStatus;
			$row[] = $data->Description;
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] = $data->CreatedBy;
			
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Under_Visible_".$subid;
			$edit ="Under_Edit_".$subid;
			$copy ="Under_Copy_".$subid;
			$delete = "Under_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			//add html for action
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"  aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .= '<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editEmpStatus('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission)||in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editEmpStatus('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteEmpStatus('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			$actions .=' </div>'
	                  .'</div>';
			
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->EmploymentStatus_model->countAll(),
						"recordsFiltered" => $this->EmploymentStatus_model->countFiltered($jobTitleid,$empStatus),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}

	
	//==================================== jobExperienceSetupList function to get DataTables of Experience Status  - by Sajitha ================================
	
	public function jobExperienceSetupList($subid="")
	{
		$list 	= $this->Experience_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();
			$jobTitleCode = $db->getFieldValueById("job_titles", "JobTitleCode", "Id='{$data->JobTitleId}'");
			$row[] = $db->getFieldValueById("job_titles", "JobTitle", "Id='{$data->JobTitleId}'")." - (".$jobTitleCode.")";			
			$row[] = $data->Experience;
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] = $data->CreatedBy;

			//add html for action
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Under_Visible_".$subid;
			$edit ="Under_Edit_".$subid;
			$copy ="Under_Copy_".$subid;
			$delete = "Under_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"  aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .= '<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editExperience('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission)||in_array($copy,$userWisePermission))
			{
				$actions .= '<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editExperience('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			 }
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{
				$actions .= '<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteExperience('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
				$actions.=' </div>'
						.'</div>';
			
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Experience_model->countAll(),
						"recordsFiltered" => $this->Experience_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
	
	//==================================== jobQualificationList function to get DataTables of Job Qualification  - by Sajitha ================================
	public function jobQualificationList($subId="")
	{
		$list 	= $this->Qualification_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();
			$jobTitleCode = $db->getFieldValueById("job_titles", "JobTitleCode", "Id='{$data->JobTitleId}'");
			$row[] = $db->getFieldValueById("job_titles", "JobTitle", "Id='{$data->JobTitleId}'")." - (".$jobTitleCode.")";			
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] = $data->CreatedBy;
			//add html for action
			$permission = $_SESSION['GROUP_PERMISSION'];
		
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
		
			$actions ="";
			$view ="Under_Visible_".$subId;
			$edit ="Under_Edit_".$subId;
			$edit ="Under_Copy_".$subId;
			$delete = "Under_Del_".$subId;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editQuali('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editQuali('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteQuali('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			$actions .=' </div>'
	                  .'</div>';
			
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Qualification_model->countAll(),
						"recordsFiltered" => $this->Qualification_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
	//==================================== saveJobTitle function for Saving Job Title details - by Sajitha ================================
	public function saveJobTitle()
	{
		$id				= $this->input->post("hidID");
		$data 			= array();  
		$jobTitleCode  	= addslashes($this->input->post('Job_Title_Code'));
		$jobTitle 		= $this->input->post('Job_Title');
		$status 		= $this->input->post('Status');
		$specification  = addslashes($this->input->post('Specification'));
		$description 	= addslashes($this->input->post('Description'));
		
		//if($id == 0) {
			$db  			= new Database();
			$where   		= "( UPPER(JobTitleCode)='".strtoupper($jobTitleCode)."') and Id!={$id}";
			$res 			= $db->checkExistance("job_titles", $where); // if exists id value will be returned.
		
			if($res)
			{
				
				echo json_encode(
									array("status" => false, 
										  "message"=>"This Job Title Code is already created and exists! Please change it."
										 )
								);
				exit;
			}
			
			$db  			= new Database();
			$where1   		= "( UPPER(JobTitle)='".strtoupper($jobTitle)."') and Id!={$id}";
			$res1 			= $db->checkExistance("job_titles", $where1); // if exists id value will be returned.
		
			if($res)
			{
				
				echo json_encode(
									array("status" => false, 
										  "message"=>"This Job Title is already created and exists! Please change it."
										 )
								);
				exit;
			}
		//}
		if($id==0) // if add
		{    
			$data = array(
						'JobTitleCode' => $jobTitleCode,
						'JobTitle' => $jobTitle,
						'Specification' => $specification,
						'Description' => $description,
						'Status' => $status,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
				
		}
		else { // if edit
				$data = array(
						'JobTitleCode' => $jobTitleCode,
						'JobTitle' => $jobTitle,
						'Specification' => $specification,
						'Description' => $description,
						'Status' => $status,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s')						
						);					
		}
		$res	= $this->JobTitles_model->saveData($data, $id);
	   
		$db = new BrqDatabase();
		$resCombo = $db->getJobTitleCombo();
		$resData    = array(
								"status" => true,
								'message' => 'Job Title details saved successfully!!',
								'jobTitleId' => $resCombo
						 );					 
		echo json_encode($resData);
                
	}
	//==================================== updateOpenClose function for Updating OpenCloseStatus in job_titles to show / hide a job in career's job list  - by Sajitha ================================
	public function updateOpenClose() {
		$openCloseStatus = $this->input->post("open");
		$id = $this->input->post("id");
		
		if($openCloseStatus == 1) {
			$this->db->set('OpenDate', date('Y-m-d H:i:s'));
			$this->db->set('OpenCloseStatus', 1);
			$this->db->set('CloseDate', NULL);
		} else {
			$this->db->set('CloseDate', date('Y-m-d H:i:s'));
			$this->db->set('OpenCloseStatus', 0);
			$this->db->set('OpenDate', NULL);
		}			
		$where = array('Id' =>$id);
		$this->db->where($where);
		$this->db->update('job_titles');	
	}	
	
	//==================================== savePayGrade function for Saving Pay Grade details - by Sajitha ================================
	public function savePayGrade()
	{
		$id				= $this->input->post("hidID");
		$data 			= array();
		$jobTitleId  	= $this->input->post('Job_Title_Id');
		$currency 		= $this->input->post('Currency');
		$status 		= $this->input->post('PayGrade_Status');
		$minSalary  	= $this->input->post('Min_Salary');
		$maxSalary 		= $this->input->post('Max_Salary');
		
		//if($id == 0) {
			$db  			= new Database();
			$where   		= " JobTitleId='".$jobTitleId."' and Id!={$id}";
			$res 			= $db->checkExistance("pay_grades", $where); // if exists id value will be returned.
		
			if($res)
			{
				echo json_encode(
									array("status" => false, 
										  "message"=>"This Pay Grade Name is already created and exists! Please change it."
										 )
								);
				exit;
			}
		//}
		if($id==0) // if add
		{    
			$data = array(
						'JobTitleId' => $jobTitleId,
						'CurrencyId' => $currency,
						'MinSalary' => $minSalary,
						'MaxSalary' => $maxSalary,
						'Status' => $status,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
				
		}
		else { // if edit
				$data = array(
						'JobTitleId' => $jobTitleId,
						'CurrencyId' => $currency,
						'MinSalary' => $minSalary,
						'MaxSalary' => $maxSalary,
						'Status' => $status,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s')						
						);					
		}
		$res	= $this->PayGrades_model->saveData($data, $id);
	   
		$resData    = array(
								"status" => true,
								'message' => 'Pay Grade details saved successfully!!'
						 );	
		echo json_encode($resData);
                
	}
	
	//==================================== saveEmpStatus function for Saving Employment Status details - by Sajitha ================================
	public function saveEmpStatus()
	{
		$id					= $this->input->post("hidID");
		$data 				= array(); 
		$jobTitleId  		= $this->input->post('Job_Title_Id_ES');
		$employmentStatus  	= $this->input->post('Employment_Status');
		$empDescription 	= $this->input->post('Emp_Description');
		$isTraining 		= $this->input->post('Is_Training');
		$status 			= $this->input->post('Emp_Status');
		
		//if($id == 0) {
			$db  			= new Database();
			$where   		= " JobTitleId='".$jobTitleId."' and UPPER(EmploymentStatus)='".strtoupper($employmentStatus)."' and Id!={$id}";
			$res 			= $db->checkExistance("employment_status", $where); // if exists id value will be returned.
		
			if($res)
			{
				echo json_encode(
					array("status" => false, 
						  "message"=>"This Employment Status is already created and exists! Please change it."
						 )
				);
				exit;
			}
		//}
		if($id==0) // if add
		{    
			$data = array(
						'JobTitleId' => $jobTitleId,
						'EmploymentStatus' => $employmentStatus,
						'Description' => $empDescription,
						'IsTraining' => $isTraining,
						'Status' => $status,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
				
		}
		else { // if edit
				$data = array(
						'JobTitleId' => $jobTitleId,	
						'EmploymentStatus' => $employmentStatus,
						'Description' => $empDescription,
						'IsTraining' => $isTraining,
						'Status' => $status,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s')						
						);					
		}
		$res	= $this->EmploymentStatus_model->saveData($data, $id);
	   
		$resData    = array(
								"status" => true,
								'message' => 'Employment Status details saved successfully!!'
						 );	
						 
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$moduleTab = "job-details";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		
		$db 					= new BrqDatabase();
		$resCombo 				= $db->getEmpStatusCombo();
		$resData    			= array(
										"status" => true,
										'message' => 'Employment Status details saved successfully!!',
										'filterEmpStatus' => $resCombo
								 );	
		
		$resData = (object) array_merge((array) $resData, (array) $data);				 
						 
		echo json_encode($resData);
                
	}
	
	//==================================== saveJobExperienceSetup function for Saving Experience details - by Sajitha ================================
	public function saveJobExperienceSetup()
	{
		$id					= $this->input->post("hidID");
		$data 				= array(); 
		$jobTitleId  		= $this->input->post('Job_Title_Id_Exp');
		$experience  		= $this->input->post('Experience');
		$expDescription 	= $this->input->post('Exp_Description');
		$status 			= $this->input->post('Exp_Status');
		
		//if($id == 0) {
			$db  			= new Database();
			$where   		= " JobTitleId='".$jobTitleId."' and UPPER(Experience)='".strtoupper($experience)."' and Id!={$id}";
			$res 			= $db->checkExistance("job_experience_setup", $where); // if exists id value will be returned.
		
			if($res)
			{
				echo json_encode(
					array("status" => false, 
						  "message"=>"This Experience is already created and exists! Please change it."
						 )
				);
				exit;
			}
		//}
		if($id==0) // if add
		{    
			$data = array(
						'JobTitleId' => $jobTitleId,
						'Experience' => $experience,
						'Description' => $expDescription,
						'Status' => $status,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
				
		}
		else { // if edit
				$data = array(
						'JobTitleId' => $jobTitleId,
						'Experience' => $experience,
						'Description' => $expDescription,
						'Status' => $status,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s')						
						);					
		}
		$res	= $this->Experience_model->saveData($data, $id);
	   
		$resData    = array(
								"status" => true,
								'message' => 'Experience details saved successfully!!'
						 );	
					 
		echo json_encode($resData);
                
	}
	
	//==================================== saveJobQualification function for Saving Job Qualification details - by Sajitha ================================
	public function saveJobQualification()
	{
		$id				= $this->input->post("hidID");
		$data 			= array();  
		$jobTitleId  	= $this->input->post('Job_Title_Id_Quali');
		$jobSkills  	= $this->input->post('Job_Skills');
		$jobSkillsDesc 	= $this->input->post('Skills_Description');
		$jobEdu  		= $this->input->post('Education');
		$jobEduDesc 	= $this->input->post('Edu_Description');
		$jobCert  		= $this->input->post('Certifications');
		$jobCertDesc 	= $this->input->post('Cert_Description');
		$status 		= $this->input->post('Quali_Status');
		
		//if($id == 0) {
			$db  			= new Database();
			$where   		= " JobTitleId='".$jobTitleId."' and Id!={$id}";
			$res 			= $db->checkExistance("job_qualification_setup", $where); // if exists id value will be returned.
		
			if($res)
			{
				
				echo json_encode(
									array("status" => false, 
										  "message"=>"This Qualification Setup is already created and exists! Please change it."
										 )
								);
				exit;
			}
		//}
		if($id==0) // if add
		{    
			$data = array(
						'JobTitleId' => $jobTitleId,
						'Skills' => $jobSkills,
						'SkillsDescription' => $jobSkillsDesc,
						'Education' => $jobEdu,
						'EducationDescription' => $jobEduDesc,
						'Certifications' => $jobCert,
						'CertificationsDescription' => $jobCertDesc,
						'Status' => $status,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
				
		}
		else { // if edit
				$data = array(
						'JobTitleId' => $jobTitleId,
						'Skills' => $jobSkills,
						'SkillsDescription' => $jobSkillsDesc,
						'Education' => $jobEdu,
						'EducationDescription' => $jobEduDesc,
						'Certifications' => $jobCert,
						'CertificationsDescription' => $jobCertDesc,
						'Status' => $status,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s')						
						);					
		}
		$res	= $this->Qualification_model->saveData($data, $id);
	   
		$resData    = array(
								"status" => true,
								'message' => 'Job Qualification details saved successfully!!'
						 );	
		echo json_encode($resData);
                
	}
	
	//=========================== getEditJobTitle function used for getting a Job Title details by id from job_titles table===========================	 
	public function getEditJobTitle($id)
	{
		$data = $this->JobTitles_model->getById($id);
		echo json_encode($data);
	}
	
	//=========================== getEditPayGrade function used for getting a Pay Grade details by id from pay_grades table===========================	 
	public function getEditPayGrade($id)
	{
		$data = $this->PayGrades_model->getById($id);
		echo json_encode($data);
	}
	
	//=========================== getEditEmpStatus function used for getting a Employment Status details by id from employment_status table===========================	 
	public function getEditEmpStatus($id)
	{
		$data = $this->EmploymentStatus_model->getById($id);
		echo json_encode($data);
	}
	
	//=========================== getEditExperienceSetup function used for getting a Experience Setup details by id from job_experience_setup table===========================	 
	public function getEditExperienceSetup($id)
	{
		$data = $this->Experience_model->getById($id);
		echo json_encode($data);
	}
	
	//=========================== getEditQualification function used for getting a Qualification details by id from employment_status table===========================	 
	public function getEditQualification($id)
	{
		$data = $this->Qualification_model->getById($id);
		echo json_encode($data);
	}
	
	//=========================== deleteJobTitle function used for deleting Job Title details by id from job_titles table===========================	 
	public function deleteJobTitle($id)
	{
       $res    =  $this->JobTitles_model->deleteData($id);
       $resData =array();
	   if($res['status'])
	   {
			$db = new BrqDatabase();
			$resCombo = $db->getJobTitleCombo();
			$resData    = array(
								"status" => true,
								'message' => 'Job Title deleted successfully!!',
								'jobTitleId' => $resCombo
						 );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
	   echo json_encode($resData); 
    }  
	
	//=========================== deletePayGrade function used for deleting Pay Grade details by id from pay_grades table===========================	 
	public function deletePayGrade($id)
	{
       $res    =  $this->PayGrades_model->deleteData($id);
       $resData =array();
	   if($res)
	   {
			$resData    = array(
								"status" => true,
								'message' => 'Pay Grade deleted successfully!!'
						 );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Pay Grade!!"
				   );
	   }
	   echo json_encode($resData); 
    }  
	
	//=========================== deleteEmpStatus function used for deleting Employment Status details by id from employment_status table===========================	 
	public function deleteEmpStatus($id)
	{
       $res    =  $this->EmploymentStatus_model->deleteData($id);
       $resData =array();
	   if($res)
	   {
			$resData    = array(
								"status" => true,
								'message' => 'Employment Status deleted successfully!!'
						 );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Employment Status!!"
				   );
	   }
	   echo json_encode($resData); 
    }
	
	//=========================== deleteExperienceSetup function used for deleting Experience Setup details by id from job_experience_setup table===========================	 
	public function deleteExperienceSetup($id)
	{
       $res    =  $this->Experience_model->deleteData($id);
       $resData =array();
	   if($res)
	   {
			$resData    = array(
								"status" => true,
								'message' => 'Experience deleted successfully!!'
						 );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Experience!!"
				   );
	   }
	   echo json_encode($resData); 
    }
	
	//=========================== deleteQualification function used for deleting Qualification details by id from job_qualification_setup table===========================	 
	public function deleteQualification($id)
	{
       $res    =  $this->Qualification_model->deleteData($id);
       $resData =array();
	   if($res)
	   {
			$resData    = array(
								"status" => true,
								'message' => 'Qualification deleted successfully!!'
						 );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Qualification!!"
				   );
	   }
	   echo json_encode($resData); 
    }
	// -------------------------- company branches module start ----------------
	public function branches($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$moduleTab="branches";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		$data["subMenuId"]			= $id;
		$this->load->view("brq-admin/branches", $data);
	}
	
	//====================================Function to get DataTables of Employee List ================================
	public function branchList($subid="")
	{
	
        $contact	=		$this->input->post('contact');
		$branch		=		$this->input->post('branch');
		$gst		=		$this->input->post('gst');
		$mobile		=		$this->input->post('mobile');
		$email		=		$this->input->post('email');
		$phone		=		$this->input->post('phone');
		$list 		= 		$this->Branches_model->getDataTables($contact,$gst,$mobile,$email,$phone,$branch);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start'];
		
		//$no=1;
		
		foreach ($list as $data) {
		
			$actions	 = "";
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$row[] = $data->BranchName;
			$row[] = $data->GSTNo;
			$row[] = $data->Email;
			$row[] = $data->ContactPerson;
			$row[] = $data->MobileNo;
			$row[] = $data->Phone;
			
		    $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
            $row[] = $data->CreatedBy;
			
			if($data->Status=="Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			$row[] = $data->IsMainBranch; 
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";

						$actions= $this->useractionpermission($subid,$data->Id);
						$row[] = $actions;	 
						$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Branches_model->countAll(),
						"recordsFiltered" => $this->Branches_model->countFiltered($contact,$gst,$mobile,$email,$phone,$branch),
						"data" => $data1,
				);
		//output as json format
		
		echo json_encode($output);
		
	}
	
	//=========================== deleteBranch function used for deleting Branch details by id from branches table===========================	 
	public function deleteBranch($id)
	{
       $res    =  $this->Branches_model->deleteData($id);
       $resData =array();
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$moduleTab="branches";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		
	   if($res['status'])
	   {
			$db = new BrqDatabase();
			$resCombo = $db->getBranchCombo();
			$resData    = array(
								"status" => true,
								'message' => 'Branch deleted successfully!!',
								'filterBranch' => $resCombo
						 );	
		}
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData); 
    }    
   	
	//==================================== saveBranch function for Saving Branches details - by Sajitha ================================
	public function saveBranch()
	{
		$id				= $this->input->post("hidID");
		
		$data 			= array();  
		$branchName  	= $this->input->post('Branch_Name');

		
		$db  			= new Database();
		$where   		= " BranchName='".$branchName."' and Id!={$id}";
		$res 			= $db->checkExistance("branches", $where); // if exists id value will be returned.
		
		if($res)
		{
			
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Branch is already created and exists! Please change it."
									 )
							);
			exit;
		}
	  
		if($id==0) // if add
		{    
			$data = array(
						'BranchName' => $branchName,
						'ContactPerson' => $this->input->post('Contact_Person'),
						'Status' => $this->input->post('Status'),
						'Address' => $this->input->post('Address'),
						'Email' => $this->input->post('Email'),
						'MobileNo' => $this->input->post('Mobile_No'),
						'GSTNo' => $this->input->post('GST_Number'),
						'Phone' => $this->input->post('Phone'),
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),	
						'IsMainBranch' => $this->input->post('Main_Branch'),
					);
				
		}
		else { // if edit
				$data = array(
						'BranchName' => $branchName,
						'ContactPerson' => $this->input->post('Contact_Person'),
						'Status' => $this->input->post('Status'),
						'Address' => $this->input->post('Address'),
						'Email' => $this->input->post('Email'),
						'MobileNo' => $this->input->post('Mobile_No'),
						'GSTNo' => $this->input->post('GST_Number'),
						'Phone' => $this->input->post('Phone'),
						'IsMainBranch' => $this->input->post('Main_Branch'),
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),					
						);
		}
	  
		$res	= $this->Branches_model->saveData($data, $id);
	   
		$resData    = array(
								"status" => true,
								'message' => 'Branch details saved successfully!!'
						 );
						 
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$moduleTab="branches";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		
		$db = new BrqDatabase();
		$resCombo = $db->getBranchCombo();
		$resData    = array(
								"status" => true,
								'message' => 'Branch details saved successfully!!',
								'filterBranch' => $resCombo
						 );	
		
		$resData = (object) array_merge((array) $resData, (array) $data);
	    echo json_encode($resData);
	}
	
	//=========================== getEditBranch function used for getting a Branch details by id from branches table===========================	 
	public function getEditBranch($id)
	{
		$data = $this->Branches_model->getById($id);
		echo json_encode($data);
	}
	
	// -------------------------- Salary module start ----------------
	public function employee_salary($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $fuctionName =  $this->uri->segment(2);
		// $db = new Database();
		// $Id = $db->getFieldValueById("sys_admin_under_sub_menu", "Id", "pageLink='{$fuctionName}'");
		// $this->isAccessDenied($Id);
		$moduleTab="employee_salary";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]		= $id;
		$data["moduleTab"]		= $moduleTab; // product or product_category
		
		$this->load->view("brq-admin/employee-salary", $data);
	}
	
	//====================================Function to get DataTables of Salary List ================================
	public function salaryList($subid="")
	{
		$list 		= $this->Salary_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start'];
		
		//$no=1;
		
		foreach ($list as $data) {
		
			$actions	 = "";
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$row[] = $data->SalaryComponent;
			$row[] = $data->Amount;
			if($data->Status=="Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			
		    $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
            $row[] = $data->CreatedBy;
			
			//add html for action
			// $actions = '<div class="btn-group">'
	        //           .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"  aria-expanded="false">'
	        //           .'Action<span class="sr-only">Toggle Dropdown</span>'
	        //           .'</button>'
	        //           .'<div class="dropdown-menu" role="menu" style="">'
	        //           .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editSalary('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>'
	        //           .'<div class="dropdown-divider"></div>'
	        //           .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editSalary('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>'
			// 		  .'<div class="dropdown-divider"></div>'
	        //           .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteSalary('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>'
	        //           .' </div>'
	        //           .'</div>';
			$actions = $this->useractionpermissionUnderSubMenu($subid,$data->Id);
			$row[] = $actions;
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Salary_model->countAll(),
						"recordsFiltered" => $this->Salary_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}

	
	//=========================== deleteSalary function used for deleting Salary details by id from employee_salary table===========================	 
	public function deleteSalary($id)
	{
       $res    =  $this->Salary_model->deleteData($id);
       $resData =array();
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$moduleTab="salary";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		
	   if($res)
	   {
			$resData    = array(
								"status" => true,
								'message' => 'Salary deleted successfully!!'
						 );	
		}
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Salary!!"
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData); 
    }    
   	
	//==================================== saveSalary function for Saving Salary details - by Sajitha ================================
	public function saveSalary()
	{
		$id				= $this->input->post("hidID");
		
		$data 			= array();  
		$salaryCompName  	= $this->input->post('Salary_Component');
	  
		$db  			= new Database();
		$where   		= " SalaryComponent='".$salaryCompName."' and Id!={$id}";
		$res 			= $db->checkExistance("employee_salary", $where); // if exists id value will be returned.
	
		if($res)
		{
			
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Salary Component is already created and exists! Please change it."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'SalaryComponent' => $salaryCompName,
						'Details' => $this->input->post('Details'),
						'Status' => $this->input->post('Status'),
						'Amount' => $this->input->post('Amount'),
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),
					);
		}
		else { // if edit
				$data = array(
						'SalaryComponent' => $salaryCompName,
						'Details' => $this->input->post('Details'),
						'Status' => $this->input->post('Status'),
						'Amount' => $this->input->post('Amount'),
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),					
						);
		}
	  
		$res	= $this->Salary_model->saveData($data, $id);
	   
		$resData    = array(
								"status" => true,
								'message' => 'Salary details saved successfully!!'
						 );	
		
	    echo json_encode($resData);
	}
	
	//=========================== getEditSalary function used for getting a Salary details by id from employee_salary table===========================	 
	public function getEditSalary($id)
	{
		$data = $this->Salary_model->getById($id);
		echo json_encode($data);
	}
	
// -------------------------- Company Loans module start ----------------

public function company_loans($id="")
{
	if(!$this->isSessionSet())
	{
		$this->index();
		return;
	}
	// $fuctionName =  $this->uri->segment(2);
	// $db = new Database();
	// $Id = $db->getFieldValueById("sys_admin_under_sub_menu", "Id", "pageLink='{$fuctionName}'");
	// $this->isAccessDenied($Id);
	$moduleTab="Company Loans";
	$_SESSION["USER_MODULE_PAGE"]	= $moduleTab; // for lock screen management;
	$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
	
	$data 					= array();
	$headTitleAddText		= " - Products : Login as ";
	$headTitleAddId			= $_SESSION['ADMIN_ID'];
	$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
	
	$data["moduleTab"]		= $moduleTab;
	$data["subMenuId"]		= $id;
	$this->load->view("brq-admin/company-loans", $data);
}

//====================================Function to get DataTables of Company Loans List ================================
public function companyLoansList($subid="")
{
	$loanType  	= $this->input->post('loanType');
	$loanPeriod 	= $this->input->post('loanPeriod');
	$list 			= $this->CompanyLoans_model->getDataTables($loanType,$loanPeriod);
	
	$data 	= array();
	$data1 	= array();
	$no 	= $_POST['start'];
	
	//$no=1;
	
	foreach ($list as $data) {
	
		$actions	 = "";
		$statusClass 	= "label label-success";
		$showClass	 	= "label label-success";
		$statusText	 	= "Active";
		$no++;
		$id 			= $data->Id;
		$row 			= array();
		
		$row[] = $data->LoanType;
		$row[] = $data->Period;
		$row[] = $data->Amount;
		if($data->Status=="Inactive")
		{
			$statusClass = "label label-danger";
			$statusText  = "Inactive";
		}
		$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
		
		$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
		$row[] = $data->CreatedBy;
		
		//add html for action
		// $actions = '<div class="btn-group">'
		// 		  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
		// 		  .'Action<span class="sr-only">Toggle Dropdown</span>'
		// 		  .'</button>'
		// 		  .'<div class="dropdown-menu" role="menu" style="">'
		// 		  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editCompanyLoans('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>'
		// 		  .'<div class="dropdown-divider"></div>'
		// 		  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editCompanyLoans('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>'
		// 		  .'<div class="dropdown-divider"></div>'
		// 		  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteCompanyLoans('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>'
		// 		  .' </div>'
		// 		  .'</div>';
		$actions=$this->useractionpermissionUnderSubMenu($subid,$data->Id);
		$row[] = $actions; 
		
		$data1[] = $row;
	}

	$output = array(
					"draw" => $_POST['draw'],
					"recordsTotal" => $this->CompanyLoans_model->countAll(),
					"recordsFiltered" => $this->CompanyLoans_model->countFiltered($loanType,$loanPeriod),
					"data" => $data1,
			);
	//output as json format
	echo json_encode($output);
}



//=========================== deleteCompanyLoans function used for deleting Loan Taken details by id from company_loans table===========================	 
public function deleteCompanyLoans($id)
{
   $res    =  $this->CompanyLoans_model->deleteData($id);
   $resData =array();
   if(!$this->isSessionSet())
	{
		$this->index();
		return;
	}
	
	$moduleTab="company_loans";
	$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
	$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
	
	$data 					= array();
	$headTitleAddText		= " - Products : Login as ";
	$headTitleAddId			= $_SESSION['ADMIN_ID'];
	$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
	
	$data["moduleTab"]		= $moduleTab; 
	
   if($res)
   {
		$db = new BrqDatabase();
		$resComboLT = $db->getLoanTypeCombo();
		$resComboLP = $db->getLoanPeriodCombo();
	
		$resData    = array(
							"status" => true,
							'message' => 'Loans Taken deleted successfully!!',
							'filterLoanType' => $resComboLT,
							'filterLoanPeriod' => $resComboLP
					 );	
	}
   else
   {
	   $resData=array(
				"status"=>false,
				"message"=>"Oops! Error, Can't delete Loans Taken!!"
			   );
   }
	
	$resData = (object) array_merge((array) $resData, (array) $data);
	echo json_encode($resData); 
}    
   
//==================================== saveLoans function for Saving Loans Taken details - by Sajitha ================================
public function saveLoans()
{
	$id				= $this->input->post("hidID");
	
	$db  			= new Database();
	$where   		= " LoanType='".$this->input->post('Loan_Type')."' and Id!={$id}";
	$res 			= $db->checkExistance("company_loans", $where); // if exists id value will be returned.
	if($res)
	{
		echo json_encode(
							array("status" => false, 
									"message"=>"This Loan Type is already created and exists! Please change it."
									)
						);
		exit;
	}
	
	$data 			= array();
	
	if($id==0) // if add
	{    
		$data = array(
					'LoanType' 					=> $this->input->post('Loan_Type'),
					'Period' 					=> $this->input->post('Loan_Period'),
					'Status' 					=> $this->input->post('Status'),
					'Amount' 					=> $this->input->post('Amount'),
					'ReimbursementPercentage' 	=> $this->input->post('Reimbursement_Percentage'),
					'Details' 					=> $this->input->post('Details'),
					'CreatedBy' 				=> $_SESSION['ADMIN_ID'],
					'CreatedOn' 				=> date('Y-m-d H:i:s'),
				);
			
	}
	else { // if edit
			$data = array(
					'LoanType' 					=> $this->input->post('Loan_Type'),
					'Period' 					=> $this->input->post('Loan_Period'),
					'Status' 					=> $this->input->post('Status'),
					'Amount' 					=> $this->input->post('Amount'),
					'ReimbursementPercentage' 	=> $this->input->post('Reimbursement_Percentage'),
					'Details' 					=> $this->input->post('Details'),
					'ModifiedBy' 				=> $_SESSION['ADMIN_ID'],
					'ModifiedOn' 				=> date('Y-m-d H:i:s'),					
					);
	}
	
	$res	= $this->CompanyLoans_model->saveData($data, $id);
	
	$db = new BrqDatabase();
	$resComboLT = $db->getLoanTypeCombo();
	$resComboLP = $db->getLoanPeriodCombo();
	
	$resData    = array(
							"status" => true,
							'message' => 'Loans Taken details saved successfully!!',
							'filterLoanType' => $resComboLT,
							'filterLoanPeriod' => $resComboLP
						);
								
	echo json_encode($resData);
}



// Loan Application module start ----------------
public function loanApplication($id="")
{
	if(!$this->isSessionSet())
	{
		$this->index();
		return;
	}
	// $fuctionName =  $this->uri->segment(2);
	// 	$db = new Database();
	// 	$Id = $db->getFieldValueById("sys_admin_under_sub_menu", "Id", "pageLink='{$fuctionName}'");
	// 	$this->isAccessDenied($Id);
	$moduleTab="Loan Application";
	$_SESSION["USER_MODULE_PAGE"]	= $moduleTab; // for lock screen management;
	$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
	
	$data 					= array();
	$headTitleAddText		= " - Products : Login as ";
	$headTitleAddId			= $_SESSION['ADMIN_ID'];
	$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
	$data["subMenuId"]		=$id;
	$data["moduleTab"]		= $moduleTab;
	
	$this->load->view("brq-admin/loan_application", $data);
}



	//====================================Function to get DataTables of Loan Application List ================================
	public function companyLoanApplicationList($subid="")
	{
		$employeeId  	= $this->input->post('employeeId');
		$loanType 		= $this->input->post('loanType');
		$branch			= $this->input->post('branch');
		$department		= $this->input->post('department');
		$list 			= $this->LoanApplication_model->getDataTables($employeeId,$loanType,$branch,$department);
				
		$data 	= array();
		$data1 	= array();
		$no 	= $_POST['start'];
		
	
	foreach ($list as $data) {
		
		$actions	 = "";
		$statusClass 	= "label label-primary";
		$statusText	 	= "Pending";
		
		$no++;
		$id 			= $data->Id;
		$row 			= array();
		
		$db = new Database();
		$profilePath 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/';
		$mainPhoto		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$data->EmployeeId}'");
		if($mainPhoto == '') {
			if($db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'") == "Male")
				$mainPhoto 	= "male.png";
			else
				$mainPhoto 	= "female.png";
	
			}
		
		$profilePhotoLarge 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").$mainPhoto;
		$profilePhoto 	= $profilePath.$mainPhoto;
		if(!(file_exists($db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/'.$mainPhoto)) || $mainPhoto == '') {
			if($db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'") == "Male")
				$profilePhoto 	= $profilePath."male.png";
			else
				$profilePhoto 	= $profilePath."female.png";
		}
		$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'").'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';			
		$row[] = $db->getFieldValueById("employee_master", "Code", "Id='{$data->EmployeeId}'");
		
		$firstName = $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'");
		$lastName = $db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");
		$row[] = $firstName." ".$lastName;
		$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
		$branchName = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");
		$row[] = $branchName;
		$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
		$depName = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");
		$row[] = $depName;
		
	
		if($data->Status=="Denied")
		{
			$statusClass = "label label-danger";
			$statusText  = "Denied";
		} else if($data->Status=="Approved")
		{
			$statusClass = "label label-success";
			$statusText  = "Approved";
		} else if($data->Status=="Cancelled")
		{
			$statusClass = "label label-warning";
			$statusText  = "Cancelled";
	
		}else if($data->Status=="Issued")
		{
			$statusClass = "label label-info ";
			$statusText  = "Issued";
		}
		$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
		
		$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
		$row[] =  $data->CreatedBy;
		
		//add html for action
		// $actions = '<div class="btn-group">'
		// 		  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
		// 		  .'Action<span class="sr-only">Toggle Dropdown</span>'
		// 		  .'</button>'
		// 		  .'<div class="dropdown-menu" role="menu" style="">'
		// 		  .'<a id="viewButton"  class="dropdown-item text-primary view_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to View" onclick="viewLoanApplication('."'".$data->Id."'".')"><span class="fa fa-eye"></span> View</a>';
		
		// if(($_SESSION['ADMIN_USER_TYPE'] == 'SUPER ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'HR') || ($data->Status != 'Approved' && $data->Status != 'Denied' && $data->Status != 'Issued')) {		  		  
		// 	if(($_SESSION['ADMIN_USER_TYPE'] == 'SUPER ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'HR')) {
		// 		if($data->Status != 'Cancelled' && $data->Status != 'Issued') {
		// 			$actions .= '<div class="dropdown-divider"></div>'
		// 				  .'<a id="updateButton"  class="dropdown-item text-info update_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Update Status"  onclick="updateStatus('."'".$data->Id."'".','."'".$data->Status."'".');"><span class="fa fa-pencil text-fanger"></span> Update Status</a>';
		// 		}
		// 	} else 
		// 		$actions .= '<div class="dropdown-divider"></div>'
		// 				  .'<a id="updateButton"  class="dropdown-item text-info update_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Update Status"  onclick="updateStatus('."'".$data->Id."'".','."'".$data->Status."'".');"><span class="fa fa-pencil text-fanger"></span> Update Status</a>';	
		// }		  
		
		// if($_SESSION['ADMIN_USER_TYPE'] == 'SUPER ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'ADMIN') {
		// 	if($data->Status != 'Issued') {		  
		// 	$actions .= '<div class="dropdown-divider"></div>'
		// 				.'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editLoanApplication('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
		// 	}	 
		// 	$actions .= '<div class="dropdown-divider"></div>'
		// 				  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteLoanApplication('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			
		// }
		// $actions .=' </div>'
		// 		  .'</div>';
		$actions= $this-useractionpermissionUnderSubMenu($subid,$data->Id);
		$row[] = $actions;
		$data1[] = $row;
	
	}
	
	$output = array(
					"draw" => $_POST['draw'],
					"recordsTotal" => $this->LoanApplication_model->countAll(),
					"recordsFiltered" => $this->LoanApplication_model->countFiltered($employeeId,$loanType,$branch,$department),
					"data" => $data1
			);
	//output as json format
	echo json_encode($output);
	
	
	}

	
public function deleteLoanApplication($id)
{
   $res    =  $this->LoanApplication_model->deleteData($id);
   $resData =array();
  
   if($res)
   {
		$resData    = array(
							"status" => true,
							'message' => 'Loan Application deleted successfully!!'
					 );	
		
	}
   else
   {
	   $resData=array(
				"status"=>false,
				"message"=>"Oops! Error, Can't delete Loan Application!!"
			   );
   }
	
	echo json_encode($resData); 
}  

//=========================== updateLoanApplicationStatus function used for updating Loan Application status by id in prl_loan_applications table===========================	 
public function updateLoanApplicationStatus()
{
$id				= $this->input->post("hidID");
$status			= $this->input->post("status");		
$approvedAmount = $this->input->post("appAmount");	
if($status == 'Approved')

	$approvedBy = $_SESSION['EMPLOYEE_ID'];
else
	$approvedBy = null;


$data = array(
				'Approved_by' =>$approvedBy,
				'ApprovedAmount' =>$approvedAmount,
				'ApprovedOn' => date('Y-m-d H:i:s'),
				'Status' =>$status,
				'ModifiedBy' => $_SESSION['ADMIN_ID'],
				'ModifiedOn' => date('Y-m-d H:i:s')
			);

$this->db->update('prl_loan_applications',$data, array('Id' =>$id)); // 3rd argument is where
$resData=array(
			"status"=>true,
			"message"=>"Loan Application Status updated!"
		   );
echo json_encode($resData);	   
}


//=========================== getViewLoanApplication function used for getting a Loan Application details by id from prl_loan_applications table===========================	 
public function getViewLoanApplication($id)
{
$data = $this->LoanApplication_model->getById($id);
$resData = array();
$db = new Database();
$fullName = $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");	
$code = $db->getFieldValueById("employee_master", "Code", "Id='{$data->EmployeeId}'");		
$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
$branchName = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");
$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
$depName = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");
$loanType = $db->getFieldValueById("prl_loan_types", "LoanType", "Id='{$data->EmployeeId}'");
$Amount = $db->getFieldValueById("Company_loans", "Amount", "Id='{$data->LoanType}'");
$AppliedAmount = $db->getFieldValueById("prl_loan_types", "AppliedAmount", "Id='{$data->EmployeeId}'");
$resData = array(
				"BranchName" => $branchName,
				"DepName" => $depName,
				"EmployeeCode" => $code,
				"FullName" => $fullName,
				"LoanType"	=> $loanType,
				"AppliedAmount"=> $AppliedAmount,
		 );
$resData = (object) array_merge((array) $resData, (array) $data);
echo json_encode($resData);
} 



//=========================== getEditLoanApplication function used for getting a Loan Application details by id from prl_loan_applications table===========================	 
public function getEditLoanApplication($id)
{
$data = $this->LoanApplication_model->getById($id);
$resData = array();
$db = new Database();			
$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
$resData = array(
				"BranchId" => $branchId,
				"DepId" => $depId
		 );
$resData = (object) array_merge((array) $resData, (array) $data);
echo json_encode($resData);
} 

//==================================== saveLoanApplication function for Saving Loan Application details - by Sruthi ================================
public function saveLoanApplication()
{
$id				= $this->input->post("hidID");
$empId			= $this->input->post('EmployeeId');
$data 			= array(); 


if(!$_SESSION['ADMIN_ID']) {
	$db = new Database();			
	$createdBy = $db->getFieldValueById("employee_master", "FirstName", "Id='{$empId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$empId}'");
} else
	$createdBy = $_SESSION['ADMIN_ID'];

if($id==0) // if add
{    
	$data = array(
				'EmployeeId' 	=> $this->input->post('EmployeeId'),
				'LoanType' 		=> $this->input->post('Loan_Type'),
				'Purpose' 		=> $this->input->post('Purpose'),
				//'ApplicationDate' => $this->input->post('ApplicationDate'), 
				'ApplicationDate' =>date('Y-m-d H:i:s'),
				'ApplicationNumber' => $this->input->post('ApplicationNo'),
				'Amount' => $this->input->post('Amount'),
				'Period' => $this->input->post('Period'),
				'AppliedAmount' => $this->input->post('AppliedAmount'),
				'ReimbursementPercentage' => $this->input->post('ReimbursementPercentage'),
				'CreatedBy' 	=> $createdBy,
				'CreatedOn'	 	=> date('Y-m-d H:i:s'),
			);
}
else { // if edit
		$data = array(
				'EmployeeId' => $this->input->post('EmployeeId'),
				'LoanType' => $this->input->post('Loan_Type'),
				'Purpose' => $this->input->post('Purpose'),
				//'ApplicationDate' => $this->input->post('ApplicationDate'), 
				'ApplicationDate' =>date('Y-m-d H:i:s'),
				'ApplicationNumber' => $this->input->post('ApplicationNo'),
				'Amount' => $this->input->post('Amount'),
				'Period' => $this->input->post('Period'),
				'appliedAmount' => $this->input->post('appliedAmount'),
				'ReimbursementPercentage' => $this->input->post('ReimbursementPercentage'),
				'ModifiedBy' => $_SESSION['ADMIN_ID'],
				'ModifiedOn' => date('Y-m-d H:i:s'),					
				);
}


$res	= $this->LoanApplication_model->saveData($data, $id);


$resData    = array(
					"status" => true,
					'message' => 'Loan Application details saved successfully!!'
			 );	

echo json_encode($resData);
} 
//--------------------------------------getApplicationNumber function for get an application number for applying loan-----------
public function getApplicationNumber()
{


	//Incrementing the LastNumber by 1 for LOAN_APPLICATION in prl_loan_pplications table after inserting Loan Application
	$db   	= new Database();
	$data  	= array('LOAN_APPLICATION', '1');  // to increment second parameter should 1
	$appNo	= $db->callProcedure("getNumberPRO", $data, TRUE);  //  last parameter is TRUE for get the output.


if($appNo)
{
			
$resData=array(
			"status"=>true,
			"message"=>"Success!!",
			"applicationNo"=>$appNo
		);

}
else
{
$resData=array(
			"status"=>false,
			"message"=>"Oops! Error, No record for salary component type code!!"
		);

}
echo json_encode($resData);  
}


	// Employee Loan module start ----------------
	
	public function employeeLoan($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $fuctionName =  $this->uri->segment(2);
		// $db = new Database();
		// $Id = $db->getFieldValueById("sys_admin_under_sub_menu", "Id", "pageLink='{$fuctionName}'");
		// $this->isAccessDenied($Id);
		$moduleTab="Employee Loan";
		$_SESSION["USER_MODULE_PAGE"]	= $moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]		= $id;
		$data["moduleTab"]		= $moduleTab;
		
		$this->load->view("brq-admin/employee_loan", $data);
	}
	//====================================Function to get DataTables of Loan Application List ================================
	public function employeeLoanList($subid="")
	{
		$employeeId  	= $this->input->post('employeeId');
		$loanType 		= $this->input->post('loanType');
		$branch			= $this->input->post('branch');
		$department		= $this->input->post('department');
		$list 			= $this->EmployeeLoan_model->getDataTables($employeeId,$loanType,$branch,$department);
				
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start'];
		
	
	foreach ($list as $data) {
		
		$actions	 = "";
		// $statusClass 	= "label label-primary";
		// $statusText	 	= "Pending";
		
		$no++;
		$id 			= $data->Id;
		$row 			= array();
		
		$db = new Database();
		$profilePath 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/';
		$mainPhoto		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$data->EmployeeId}'");
		if($mainPhoto == '') {
			if($db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'") == "Male")
				$mainPhoto 	= "male.png";
			else
				$mainPhoto 	= "female.png";
		}
		
		$profilePhotoLarge 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").$mainPhoto;
		$profilePhoto 	= $profilePath.$mainPhoto;
		if(!(file_exists($db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/'.$mainPhoto)) || $mainPhoto == '') {
			if($db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'") == "Male")
				$profilePhoto 	= $profilePath."male.png";
			else
				$profilePhoto 	= $profilePath."female.png";
		}
		$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'").'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';			
		$row[] = $db->getFieldValueById("employee_master", "Code", "Id='{$data->EmployeeId}'");
		
		$firstName = $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'");
		$lastName = $db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");
		$row[] = $firstName." ".$lastName;
		$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
		$branchName = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");
		$row[] = $branchName;
		$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
		$depName = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");
		$row[] = $depName;
		$appId =$data->Approved_by;
		$ApprovedBy = $db->getFieldValueById("employee_master", "FirstName", "Id='{$appId}'");
		$Approvedby = $db->getFieldValueById("employee_master", "LastName", "Id='{$appId}'");
		$row[] =$ApprovedBy." ".$Approvedby;
		$row[] =date('d/m/Y h:i:s a', strtotime($data->ApprovedOn));
		$row[] =$data->ApprovedAmount;
		
		$statusClass = "label label-success";
		$statusText  = "Approved";
		
		$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
		$row[] =  $data->CreatedBy;
		$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
		
		//add html for action
		// $actions = '<div class="btn-group">'
		// 		  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
		// 		  .'Action<span class="sr-only">Toggle Dropdown</span>'
		// 		  .'</button>'
		// 		  .'<div class="dropdown-menu" role="menu" style="">'
		// 		  .'<a id="viewButton"  class="dropdown-item text-primary view_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to View" onclick="viewLoanApplication('."'".$data->Id."'".')"><span class="fa fa-eye"></span> View</a>';
		
		
		// if($_SESSION['ADMIN_USER_TYPE'] == 'SUPER ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'ADMIN') {		  
		// 	$actions .= '<div class="dropdown-divider"></div>'
		// 		  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Issue" onclick="issueLoanApplication('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Issue</a>'
		// 		  .'<div class="dropdown-divider"></div>'
		// 		  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteLoanApplication('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
		// }
		// $actions .=' </div>'
		// 		  .'</div>';
		$actions= $this->useractionpermissionUnderSubMenu($subid,$data->Id);
		$row[] = $actions;
		$data1[] = $row;

	}
	
	$output = array(
					"draw" => $_POST['draw'],
					"recordsTotal" => $this->EmployeeLoan_model->countAll(),
					"recordsFiltered" => $this->EmployeeLoan_model->countFiltered($employeeId,$loanType,$branch,$department),
					"data" => $data1
			);
	//output as json format
	echo json_encode($output);


	}


	//=========================== getViewApprovedLoans function used for getting approved Loan Application details by id from prl_loan_applications table===========================	 
	public function getViewApprovedLoans($id)
	{
		$data = $this->EmployeeLoan_model->getById($id);
		$resData = array();
		$db = new Database();
		$fullName = $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");	
		$code = $db->getFieldValueById("employee_master", "Code", "Id='{$data->EmployeeId}'");		
		$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
		$branchName = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");
		$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
		$depName = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");
		$loanType =$data->LoanType;
		$Amount = $db->getFieldValueById("Company_loans", "Amount", "Id='{$data->LoanType}'");
		$AppliedAmount = $db->getFieldValueById("prl_loan_application", "AppliedAmount", "Id='{$data->EmployeeId}'");

		$appId =$data->Approved_by;
		$ApprovedBy = $db->getFieldValueById("employee_master", "FirstName", "Id='{$appId}'");
		$Approvedby = $db->getFieldValueById("employee_master", "LastName", "Id='{$appId}'");
		$approvedBy =$ApprovedBy." ".$Approvedby;
	    $resData = array(
						"BranchName" => $branchName,
						"DepName" => $depName,
						"EmployeeCode" => $code,
						"FullName" => $fullName,
						"LoanType"	=> $loanType,
						"AppliedAmount"=> $AppliedAmount,
						"ApprovedBy"=>$approvedBy
				 );
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData);
	} 

	

	//=========================== issueLoanApplication function used for updating Loan Application status  as issued by id in prl_loan_applications table===========================	 
	public function issueLoanApplication()
	{
		$id				= $this->input->post("hidID");
		$status			= 'Issued';

			$issuedBy = $_SESSION['EMPLOYEE_ID'];
	

		
		$data = array(
						'IssuedBy' =>$issuedBy,
						'IssuedOn' => date('Y-m-d H:i:s'),
						'Status' =>$status,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s')
					);
		
		$this->db->update('prl_loan_applications',$data, array('Id' =>$id)); // 3rd argument is where
		$resData=array(
					"status"=>true,
					"message"=>"Loan Application is Issued!",
					'Status' =>$status,
					'IssuedBy' =>$issuedBy
				);
		echo json_encode($resData);	   
	}

	
	// -------------------------- Company Leave module start ----------------
	public function company_leave($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$moduleTab="Company Leave";
		$_SESSION["USER_MODULE_PAGE"]	= $moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		

		$data["moduleTab"]		= $moduleTab;
		
		$data["subMenuId"]			= $id;
		$this->load->view("brq-admin/company-leave", $data);
	}
	
	//====================================Function to get DataTables of Company Leave List ================================
	public function companyLeaveList($subid="")
	{
		$leaveType  	= $this->input->post('leaveType');
		$withSalary 	= $this->input->post('withSalary');
		$list 			= $this->CompanyLeave_model->getDataTables($leaveType,$withSalary);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start'];
		
		//$no=1;
		
		foreach ($list as $data) {
		
			$actions	 = "";
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$row[] = $data->LeaveType;
			$row[] = $data->NoOfDays;
			if($data->WithSalary == '1')
				$row[] = 'Yes';
			else
				$row[] = 'No';
			
			if($data->Status=="Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			
		    $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
            $row[] = $data->CreatedBy;
			
			$actions= $this->useractionpermission($subid,$data->Id);
		
			$row[] = $actions; 
			
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->CompanyLeave_model->countAll(),
						"recordsFiltered" => $this->CompanyLeave_model->countFiltered($leaveType,$withSalary),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
	
	//=========================== deleteCompanyLeave function used for deleting Company Leave details by id from company_leave table===========================	 
	public function deleteCompanyLeave($id)
	{
       $res    =  $this->CompanyLeave_model->deleteData($id);
       $resData =array();
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$moduleTab="company_leave";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		
	   if($res)
	   {
			$db = new BrqDatabase();
			$resCombo = $db->getLeaveTypeCombo();
		
			$resData    = array(
								"status" => true,
								'message' => 'Company Leave deleted successfully!!',
								'filterLeaveType' => $resCombo
						 );	
		}
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Company Leave!!"
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData); 
    }    
   	
	//=========================== deleteCompanyLeaveDetails function used for deleting Company Leave details by Leave Id from company_leave_details table===========================	 
	public function deleteCompanyLeaveDetails($id)
	{
        // Selecting the Ids from company_leave_detail whose LeaveId is the selected Company Leave Type
		$SQL 		="SELECT Id ";
		$SQL 		.=" FROM company_leave_detail where LeaveId='{$id}'";
		$list		=  $this->db->query($SQL);
		if($list->num_rows()>0)
		{
			foreach($list->result()  as $row)
			 {
				$res    =  $this->CompanyLeave_model->deleteDetailsData($row->Id);
			 }
		}
	   
	   $resData =array();
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$moduleTab="company_leave";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		
	   if($res)
	   {
			$resData    = array(
								"status" => true,
								'message' => 'Company Leave Details deleted successfully!!'
						 );	
		}
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Company Leave Details!!"
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData); 
    }    
	
	//==================================== saveLeave function for Saving Leave details - by Sajitha ================================
	public function saveLeave()
	{
		$id				= $this->input->post("hidID");
		
		$db  			= new Database();
		$where   		= " LeaveType='".$this->input->post('Leave_Type')."' and Id!={$id}";
		$res 			= $db->checkExistance("company_leave", $where); // if exists id value will be returned.
		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Leave Type is already created and exists! Please change it."
									 )
							);
			exit;
		}
		
		$data 			= array();
	  
		if($id==0) // if add
		{    
			$data = array(
						'LeaveType' => $this->input->post('Leave_Type'),
						'Remarks' => $this->input->post('Remarks'),
						'Status' => $this->input->post('Status'),
						'NoOfDays' => $this->input->post('NoOfDays'),
						'WithSalary' => $this->input->post('WithSalary'),
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),
					);
				
		}
		else { // if edit
				$data = array(
						'LeaveType' => $this->input->post('Leave_Type'),
						'Remarks' => $this->input->post('Remarks'),
						'Status' => $this->input->post('Status'),
						'NoOfDays' => $this->input->post('NoOfDays'),
						'WithSalary' => $this->input->post('WithSalary'),
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),					
						);
		}
		
		$res	= $this->CompanyLeave_model->saveData($data, $id);
		
		$db = new BrqDatabase();
		$resCombo = $db->getLeaveTypeCombo();
		
		$resData    = array(
								"status" => true,
								'message' => 'Company Leave details saved successfully!!',
								'filterLeaveType' => $resCombo 
						 );
						 		
	    echo json_encode($resData);
	}
	
	//=========================== getEditCompanyLeave function used for getting a Company Leave details by id from company_leave table===========================	 
	public function getEditCompanyLeave($id)
	{
		$data = $this->CompanyLeave_model->getById($id);
		echo json_encode($data);
	}
	
	// getCompanyLeaveTypeCombo function for getting Company Leave and Id present in company_leave table - Sajitha
	public function getCompanyLeaveTypeCombo($id=0) {
		$SQL 		 ="SELECT Id,LeaveType ";
		$SQL 		.="FROM company_leave  WHERE Id NOT IN (SELECT LeaveId FROM company_leave_detail";
		if($id != 0)
			$SQL 		.=" where LeaveId!={$id} "; // selecting the perticular Leave Type in the case edit (which will be disabled in the select box)
		$SQL 		.=")";
		
		$list		=  $this->db->query($SQL);
		$retHTML ="";
		
		if($list->num_rows()>0)
		{
			$retHTML = "<option value=''>...Select company leave...</option>";
		
			foreach ($list->result()  as $row)
			 {
				$leaveType  	= $row->LeaveType;
				$leaveId  		= $row->Id;
				$retHTML 	.= "<option  value='{$leaveId}'>{$leaveType}</option>";			
			 } 	
		} else {
			$retHTML = "<option value='' disabled selected>...No Leave Type...</option>";
		}
		echo $retHTML;
	}	
	
	//=========================== getEditCompanyLeaveDetails function used for getting a Company Leave Details by id from company_leave_detail table===========================	 
	public function getEditCompanyLeaveDetails($id)
	{
		$data = $this->CompanyLeave_model->getDetailsById($id); // Details of LeaveType Id from company_leave_detail table
		$resData = array();
		$resData = array(
						"CountDataOther" => count($data), // count of other Ids (other than the first Id) of employee_beneficiary table details of Employeed id 
				 );
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData);
	}
	
	//==================================== saveCompanyLeaveDetails function for Saving Company Leave details - by Sajitha ================================
	public function saveCompanyLeaveDetails()
	{
		$data 					= array(); 
		$LeaveTypeId 			= $this->input->post('LeaveTypeId');	
		$details  				= json_decode($this->input->post('DetailsArray')); // JSON decode of JSON array
		$allIds 				= '';
		
		for($i = 0; $i < count($details); $i++) {
			
			//Creating $updatedArray for each sub array of input fields of Company Leave details for insert/update sql query
			$updatedArray = [];
			$updatedArray = array_merge($updatedArray, ['LeaveId' => $LeaveTypeId]);
			$updatedArray = array_merge($updatedArray, ['CreatedBy' => $_SESSION['ADMIN_ID']]);
			foreach ($details[$i] as $key => $value) {
				if (!is_array($value) && $key == 0) { // Changing Key value of array from 0 to 'LeaveName' for insert/update sql query
					$updatedArray = array_merge($updatedArray, ['LeaveName' => $value]);
					continue;
				}
				else if (!is_array($value) && $key == 1) { // Changing Key value of array from 1 to 'LeaveDescription' for insert/update sql query
					$updatedArray = array_merge($updatedArray, ['LeaveDescription' => $value]);
					continue;
				}
				else if (!is_array($value) && $key == 2) { // Changing Key value of array from 2 to 'LeaveDay' for insert/update sql query
					$leaveday_str 	  = $value;
					$leaveday_str      = str_replace('/', '-', $leaveday_str);
					$leaveday 	  = date('Y-m-d',(strtotime($leaveday_str)));
					$updatedArray = array_merge($updatedArray, ['LeaveDay' => $leaveday]);
					continue;
				}
				else if (!is_array($value) && $key == 3) { // Changing Key value of array from 4 to 'WithSalary' for insert/update sql query
					$updatedArray = array_merge($updatedArray, ['WithSalary' => $value]);
					continue;
				}
				else if (!is_array($value) && $key == 4) { // Changing Key value of array from 5 to 'Status' for insert/update sql query
					$updatedArray = array_merge($updatedArray, ['Status' => $value]);
					continue;
				}
				else if (!is_array($value) && $key == 6) { 
					$id = $value; // Ids from each row to be inserted/updateed
					
					continue;
				}
				else {
					continue;
				}
			}
			// Saving each row of Table of Company Leave Details
			$allIds .= $this->CompanyLeave_model->saveDetailsData($updatedArray, $id); // $allIds will be having Id s of all inserted/updated rows. separated by ,
			$allIds .= ",";
		}
		
		// all Ids of Rows from table to find out if any Rows are removed from html Table of Company Leave Details that will be deleted from the database table in below codes
		$allIds = substr($allIds, 0, -1);
		
		$allIds_array = explode(",", $allIds);
		
		$this->CompanyLeave_model->update($LeaveTypeId,count($allIds_array));
		// If any row Id is missing for LeaveId that Id will be delete by assuming it is removed from the html Table of Company Leave Details
		$SQL 		="SELECT Id ";
		$SQL 		.=" FROM company_leave_detail where LeaveId='{$LeaveTypeId}' and Id NOT IN ({$allIds})";
		$list		=  $this->db->query($SQL);
		if($list->num_rows()>0)
		{
			foreach($list->result()  as $row)
			 {
				$res    =  $this->CompanyLeave_model->deleteDetailsData($row->Id);
			 }
		}
		$resData = array('status' => true,'message' => "Company Leave Details saved successfully!!");
		
		echo json_encode($resData);
	}
	
	//=========================== getWithSalaryDetails function used for getting Company Leave Type's 'With Salary' value  and set it as leave details 'With Salary' select box's value as default value===========================	 
	public function getWithSalaryDetails($id)
	{
		$db = new Database();
		$withSalary = $db->getFieldValueById("company_leave", "WithSalary", "Id='{$id}'");
		$resData = array('status' => true,'withSalary' => $withSalary);
		echo json_encode($resData);
	}
	
	// -------------------------- Travel Requests module start ----------------
	public function travel_requests($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$moduleTab="travel_requests";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]		= $id;
		$data["moduleTab"]		= $moduleTab; // product or product_category
		
		$this->load->view("brq-admin/travel-requests", $data);
	}
	
	//====================================Function to get DataTables of Travel Requests List ================================
	public function travelRequestsList($subid="")
	{
		$employeeId  	= $this->input->post('employeeId');
		$transMeans 	= $this->input->post('transMeans');
		$branch			= $this->input->post('branch');
		$department		= $this->input->post('department');
		$list 			= $this->TravelRequests_model->getDataTables($employeeId,$transMeans,$branch,$department);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start'];
		//$no=1;
		
		foreach ($list as $data) {
		
			$actions	 = "";
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$db = new Database();
			$profilePath 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/';
			$mainPhoto		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$data->EmployeeId}'");
			if($mainPhoto == '') {
				if($db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'") == "Male")
					$mainPhoto 	= "male.png";
				else
					$mainPhoto 	= "female.png";
			}
			
			$profilePhotoLarge 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").$mainPhoto;
			$profilePhoto 	= $profilePath.$mainPhoto;
			if(!(file_exists($db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/'.$mainPhoto)) || $mainPhoto == '') {
				if($db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'") == "Male")
					$profilePhoto 	= $profilePath."male.png";
				else
					$profilePhoto 	= $profilePath."female.png";
			}
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'").'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';			
			$row[] = $db->getFieldValueById("employee_master", "Code", "Id='{$data->EmployeeId}'");
			
			$firstName = $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'");
			$lastName = $db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");
			$row[] = $firstName." ".$lastName;
			$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
			$branchName = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");
			$row[] = $branchName;
			$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
			$depName = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");
			$row[] = $depName;
			$row[] = $data->TravelFrom;
			$row[] = $data->TravelTo;
			$row[] = date('d/m/Y h:i:s a', strtotime($data->TravelDate));
			$row[] = date('d/m/Y h:i:s a', strtotime($data->ReturnDate));
			if($data->Status=="Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			//add html for action
			$actions = '<div class="btn-group" >'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .= '<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editTravelRequests('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .= '<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editTravelRequests('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			 }
			 if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			 {
				 $actions .= '<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteTravelRequests('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			 }
			 $actions=' </div>'
	                  .'</div>';
			$row[] = $actions; 
			
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->TravelRequests_model->countAll(),
						"recordsFiltered" => $this->TravelRequests_model->countFiltered($employeeId,$transMeans,$branch,$department),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
	
	//==================================== saveTravelRequests function for Saving Travel Requests details - by Sajitha ================================
	public function saveTravelRequests()
	{
		$id				= $this->input->post("hidID");
		$tdate_str 		= $this->input->post('Travel_Date');
		$tdate_str 		= str_replace('/', '-', $tdate_str);
		$traveldate 	= date('Y-m-d',(strtotime($tdate_str)));
		$rdate_str 		= $this->input->post('Return_Date');
		$rdate_str 		= str_replace('/', '-', $rdate_str);
		$returndate 	= date('Y-m-d',(strtotime($rdate_str)));
		
		$data 			= array();
	  
		if($id==0) // if add
		{    
			$data = array(
						'EmployeeId' => $this->input->post('EmployeeId'),
						'TransportationMeans' => $this->input->post('Means'),
						'OtherMeans' => $this->input->post('Other_Means'),
						'TravelPurpose' => $this->input->post("Purpose"),
						'TravelFrom' => $this->input->post("Travel_From"),
						'TravelTo' => $this->input->post("Travel_To"),
						'Status' => $this->input->post('Status'),
						'Currency' => $this->input->post('Currency'),
						'Notes' => $this->input->post('Notes'),
						'TotalFund' => $this->input->post('Fund_Proposed'),
						'TravelDate' => $traveldate,
						'ReturnDate' => $returndate,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),
					);				
		}
		else { // if edit
				$data = array(
						'EmployeeId' => $this->input->post('EmployeeId'),
						'TransportationMeans' => $this->input->post('Means'),
						'OtherMeans' => $this->input->post('Other_Means'),
						'TravelPurpose' => $this->input->post("Purpose"),
						'TravelFrom' => $this->input->post("Travel_From"),
						'TravelTo' => $this->input->post("Travel_To"),
						'Status' => $this->input->post('Status'),
						'Currency' => $this->input->post('Currency'),
						'Notes' => $this->input->post('Notes'),
						'TotalFund' => $this->input->post('Fund_Proposed'),
						'TravelDate' => $traveldate,
						'ReturnDate' => $returndate,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),					
						);
		}
		
		$res	= $this->TravelRequests_model->saveData($data, $id);
	   
		$resData    = array(
								"status" => true,
								'message' => 'Travel Requests details saved successfully!!'
						 );
						 		
	    echo json_encode($resData);
	}
	
	//=========================== getEditTravelRequests function used for getting a Travel Requests details by id from travel_requests table===========================	 
	public function getEditTravelRequests($id)
	{
		
		$data = $this->TravelRequests_model->getById($id);
		$resData = array();
		$db = new Database();			
		$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
		$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
	    $resData = array(
						"BranchId" => $branchId,
						"DepId" => $depId
				 );
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData);
	}
	
	//=========================== deleteTravelRequests function used for deleting Travel Requests details by id from travel_requests table===========================	 
	public function deleteTravelRequests($id)
	{
       $res    =  $this->TravelRequests_model->deleteData($id);
       $resData =array();
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}

		$moduleTab="travel_requests";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		
	   if($res)
	   {
			$resData    = array(
								"status" => true,
								'message' => 'Travel Requests deleted successfully!!'
						 );	
		}
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Travel Requests!!"
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData); 
    } 

	// -------------------------- job_experience function to add/edit/delete all the job experience ----------------
	public function job_experience($id,$moduleTab="job_experience")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $fuctionName =  $this->uri->segment(2);
		// $db = new Database();
		// $Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		// $this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]		= $id;

		$this->load->view("brq-admin/job-experience", $data);
	}
		
   	//==================================== jobExperienceList function to get DataTables of job experience  - by Sajitha ================================
	public function jobExperienceList($subid="")
	{
        $list 	= $this->JobExperience_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = $data->Experience;
			if($data->Status == 1) {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == 0) {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			$permission = $_SESSION['GROUP_PERMISSION'];
		
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
		
			$actions ="";
			$view ="Under_Visible_".$subid;
			$edit ="Under_Edit_".$subid;
			$edit ="Under_Copy_".$subid;
			$delete = "Under_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			
			$actions = '<div class="btn-group" >'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editExperience('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editExperience('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteExperience('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			$actions .=' </div>'
	                  .'</div>';
			
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->JobExperience_model->countAll(),
						"recordsFiltered" => $this->JobExperience_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}

 	
	//==================================== saveJobExperience function for Saving Job Experience details - by Sajitha ================================
	public function saveJobExperience()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$experience  			= $this->input->post('Experience_Name');
		$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " UPPER(`Experience`)='".strtoupper($experience)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("job_experience", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Experience is already created and exists! Please change the Experience name."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'Experience' => $experience,
						'Status' => $status,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'Experience' => $experience,
						'Status' => $status,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		
		$res	= $this->JobExperience_model->saveData($data, $id);
		
		$resData = array("status" => true,'message' => 'Job Experience details saved successfully!!');
		
		echo json_encode($resData);
	}	
	
	//=========================== deleteExperience function used for deleting Job Experience details by id from job_experience table===========================	 
	public function deleteExperience($id)
	{
       $res    =  $this->JobExperience_model->deleteData($id);
       $resData =array();
	   if($res['status'])
	   {
			$resData=array(
					"status"=>true,
					"message"=>"Job Experience deleted successfully!!"
				   );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
		echo json_encode($resData); 
    }    
	
	//=========================== getEditExperience function used for getting a Job Experience details by id from job_experience table===========================	 
	public function getEditExperience($id)
	{
		$data = $this->JobExperience_model->getById($id);
		echo json_encode($data);
	}
	
	// -------------------------- departments function to add/edit/delete all the Department ----------------
	public function departments($id="",$moduleTab="departments")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]		= $id;
		$this->load->view("brq-admin/departments", $data);
	}
	
	//==================================== departmentList function to get DataTables of department  - by Sajitha ================================
	public function departmentList($subid="")
	{
		
        $department				= $this->input->post("department");
		$branch					= $this->input->post("branch");
		$list 					= $this->Department_model->getDataTables($department,$branch);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = $data->DepartmentName;
			
			$db  = new Database();
			$branchName = $db->getFieldValueById("branches", "BranchName", "Id='{$data->BranchId}'");
			$row[] = $branchName;
			if($data->Status == "Active") {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == "Inactive") {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
		
					  $actions= $this->useractionpermission($subid,$data->Id);
					  $row[] = $actions;	 
					  $data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Department_model->countAll(),
						"recordsFiltered" => $this->Department_model->countFiltered($department,$branch),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}

	
	//==================================== saveDepartment function for Saving Department details - by Sajitha ================================
	public function saveDepartment()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$department  			= $this->input->post('Department_Name');
		$branchId  				= $this->input->post('BranchId');
		$details  				= $this->input->post('Details');
		$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " UPPER(`DepartmentName`)='".strtoupper($department)."' and `BranchId`={$branchId} and `Id`!={$id}";
		$res 			= $db->checkExistance("department", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Department is already created and exists for the specified branch! Please change the Department name."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'DepartmentName' => $department,
						'Status' => $status,
						'Details' => $details,
						'BranchId' => $branchId,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'DepartmentName' => $department,
						'Status' => $status,
						'Details' => $details,
						'BranchId' => $branchId,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		
		$res	= $this->Department_model->saveData($data, $id);
		
		$resData = array("status" => true,'message' => 'Department details saved successfully!!');
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$moduleTab="departments";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		
		$db = new BrqDatabase();
		$resCombo = $db->DepartmentCombo();
		$resData    = array(
								"status" => true,
								'message' => 'Department details saved successfully!!',
								'filterDep' => $resCombo
						 );	
		
		$resData = (object) array_merge((array) $resData, (array) $data);
		
		echo json_encode($resData);
	}	
	
	//=========================== getEditDepartment function used for getting a Department details by id from department table===========================	 
	public function getEditDepartment($id)
	{
		$data = $this->Department_model->getById($id);
		echo json_encode($data);
	}
	
	//=========================== deleteDepartment function used for deleting Department details by id from department table===========================	 
	public function deleteDepartment($id)
	{
       $res    =  $this->Department_model->deleteData($id);
       	   
	   $resData =array();
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$moduleTab="departments";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		
	   if($res['status'])
	   {
			$db = new BrqDatabase();
			$resCombo = $db->DepartmentCombo();
			$resData    = array(
								"status" => true,
								'message' => 'Department deleted successfully!!',
								'filterDep' => $resCombo
						 );	
		}
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
	   
		echo json_encode($resData); 
    }    
	
	// -------------------------- document_management function to add/edit/delete all the company document / employee document / employee document type ----------------
	public function document_management($id="",$moduleTab="document_management")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]		= $id;
		$this->load->view("brq-admin/document-management", $data);
	}
	
	//==================================== companyDocumentList function to get DataTables of Company Documents  - by Sajitha ================================
	
	
public function companyDocumentList($subid="")
{
	$document				= $this->input->post("documents");
	$list 					= $this->CompanyDocument_model->getDataTables($document);
	
	$data 	= array();
	$data1 	= array();
	$no 	= $_POST['start']; 
	
	
	foreach ($list as $data) {
		$actions	 = "";
		$statusClass = "label label-success";
		$showClass	 = "label label-success";
		$statusText	 = "Active";
		$no++;
		$id = $data->Id;
		$row = array();
		$db = new Database();			
		$row[] = $data->DocumentName;
		
		if($data->Status == "Active") {
			$statusClass = "label label-success";
			$row[] = "<span class='" . $statusClass . "'>Active</span>";
		} else if($data->Status == "Inactive") {
			$statusClass = "label label-warning";
			$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
		} else {
			$statusClass = "label label-success";
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
		}	
		$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
		$row[] =  $data->CreatedBy;
		if($data->ModifiedOn == null)
			$row[] = '';
		else
			$row[] = date('d/m/Y h:i:s a', strtotime($data->ModifiedOn));
		$row[] =  $data->ModifiedBy;
		
		$permission = $_SESSION['GROUP_PERMISSION'];
		$userGroupPermission =array();
		$userGroupPermission = explode(",",$permission);

		$actions ="";
		$view ="Sub_Visible_".$subid;
		$edit ="Sub_Edit_".$subid;
		$copy ="Sub_Copy_".$subid;
		$delete = "Sub_Del_".$subid;
		$userPermission = $_SESSION['USER_PERMISSION'];
		$userWisePermission =array();
		$userWisePermission = explode(",",$userPermission);

		$actions = '<div class="btn-group" >'
				  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"  aria-expanded="false">'
				  .'Action<span class="sr-only">Toggle Dropdown</span>'
				  .'</button>';
		if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
		{
			$actions .='<div class="dropdown-menu" role="menu" style="">'
				  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editCompanyDoc('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
		}
		if(in_array($copy,$userGroupPermission)||in_array($copy,$userWisePermission))
		{
			$actions .='<div class="dropdown-divider"></div>'
				  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editCompanyDoc('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
		}
		if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
		{
			$actions .='<div class="dropdown-divider"></div>'
				  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteCompanyDoc('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
		}
		$actions.=' </div>'
				  .'</div>';
		
		  $row[] = $actions;	 
		$data1[] = $row;
	}
	$output = array(
					"draw" => $_POST['draw'],
					"recordsTotal" => $this->CompanyDocument_model->countAll(),
					"recordsFiltered" => $this->CompanyDocument_model->countFiltered($document),
					"data" => $data1,
			);
	//output as json format
	echo json_encode($output);
}
	
	//==================================== saveCompanyDoc function for Saving Company Document details - by Sajitha ================================
	public function saveCompanyDoc()
	{
		$id						= $this->input->post("id");
		$data 					= array();  
		$companyDocName  		= $this->input->post('companyDocName');
		$details 				= $this->input->post('details');
		$uploadDir				= '';
		
		if($this->input->post('employeeId')) {
			$employeeId 		= $this->input->post('employeeId');//implode(",",$this->input->post('employeeId'));
		} else
			$employeeId 		= "";
		
		$status 				= $this->input->post('status');
		$branches				= $this->input->post('branches');//implode(",",$this->input->post('branches'));
		if($this->input->post('departments'))
			$department			= $this->input->post('departments');//implode(",",$this->input->post('departments'));
		else
			$department 		= "";
		$db  			= new Database();
		$where   		= " UPPER(`DocumentName`)='".strtoupper($companyDocName)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("company_document", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This company document is already created and exists!"
									 )
							);
			exit;
		}
		
		// Company document uploading starts
		if(isset($_FILES))
		{
			
			$TotalFiles = $_POST["TotalFiles"];
			
			//foreach($_FILES as $file)
			for ($i=0;  $i<=$TotalFiles; $i++)
			{
				if(isset($_FILES["file_".$i]))
				{
					// tmp_name | name | type | size | error
					
					// -- Check here type  size and if any error.
					$fileName 	= $_FILES["file_".$i]['name'];
					$imgSize 	= $_FILES["file_".$i]['size'];
							
							// Check file size '5MB' or from max.image byte upload settings, in site settings module.
							if($imgSize < 5000000){}
							else{
										$msgError = "Document " . $fileName . " file is too large. Only 5 MB allowed!.";
										$errMSG   = "Error : Sorry," .$msgError;
								}
						
					$tempName	= $_FILES["file_".$i]['tmp_name'];
					$uploadDir	= "./uploads/company_document/"; // this would be the upload file path. Exactly specify here or from the settings.
					 
					// move_uploaded_file( $tempName, "./uploads/" . $fileName); 
					 
					// uploadDocument is defined in site_helper (system/helper folder).
					$uploadResult = uploadDocument($tempName, $uploadDir, "", $fileName, "", "",  FALSE, TRUE, TRUE,$_POST["Doc_Name"]);
					if($uploadResult['status'] == 'true') {
						
					} else {
						echo json_encode(
								array("status" => false, 
									  "message"=>$uploadResult['message']
									 )
							);
						exit;
					}
					$fileDesc = $_POST["fileDesc"];
				}
			}
		}
		// Company document uploading ends
		
		if($id==0) // if add
		{    
			$data = array(
						'DocumentName' => $companyDocName,
						'Status' => $status,
						'Details' => $details,
						'Branches' => $branches,						
						'Departments' => $department,
						'EmployeeId' => $employeeId,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'DocumentName' => $companyDocName,
						'Status' => $status,
						'Details' => $details,
						'Branches' => $branches,
						'Departments' => $department,
						'EmployeeId' => $employeeId,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		
		$res	= $this->CompanyDocument_model->saveData($data, $id);
		
		// inserting company document files details in the company_document_files table
		if($id!=0) // if edit
			$res = $id; // assiging the document id 
		
		if($uploadDir) {
			$filedata = array(
							'DocumentId' => $res,
							'Status' => $status,
							'DocumentPath' => $uploadDir,
							'FileDesc' => $fileDesc,
							'FileName' => $uploadResult['fileName'],
							'CreatedBy' => $_SESSION['ADMIN_ID'],
							'CreatedOn' => date('Y-m-d H:i:s')
						);
			$this->db->insert('company_document_files',$filedata);		
		}			
		
		$db 		= new BrqDatabase();
		$resCombo 	= $db->getCompanyDocCombo();
		$resData    = array(
								"status" => true,
								'message' => 'Company Document details saved successfully!!',
								'filterCompanyDoc' => $resCombo
						 );
		echo json_encode($resData);
	}	
	
	//=========================== deleteCompanyDoc function used for deleting Company document details by id from company_document table===========================	 
	public function deleteCompanyDoc($id)
	{
       $res    =  $this->CompanyDocument_model->deleteData($id);
       $resData =array();
	   if($res)
	   {
			$this->db->from('company_document_files');
			$this->db->where('DocumentId',$id);
			$query = $this->db->get();
			$list  = $query->result();
			
			//deleting the company document files from company_document folder in upload folder when deleting company document detials from the company_document table
			foreach ($list as $row) {
				unlink($row->DocumentPath.$row->FileName);				
			}
			//deleting the company document files records from company_document_files table when deleting company document detials from the company_document table
			$res     	= $this->db->delete('company_document_files', array('DocumentId' => $id));
			$resData 	= array();		    			
			$resData    = array(
								"status" => true,
								'message' => 'Company document deleted successfully!!'
						 );
		   
	   }
	   else
	   {
		    $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Company document!!"
				   );
	   }
	   echo json_encode($resData); 
    } 
	
	//================================= getCompanyDoc function to get Company Document's details ===========================
	public function getCompanyDoc($id=0)
	{
        $data 	 = $this->CompanyDocument_model->getById($id);
		$resData = array();
		
		$this->db->from('company_document_files');
		$this->db->where('DocumentId',$id);
		$query = $this->db->get();
		$rowcount = $query->num_rows();
		
		$db  			= new Database();
		$fileDescr 		= $db->getFieldValueById("company_document_files", "FileDesc", "DocumentId='{$id}'");
		
		$resData = array(
						"FileDetailsCount" => $rowcount,
						"FileDesc"		   => $fileDescr
					 );
		$data = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($data);
	}
	
	//================================= getCompanyDocFile function to get Company Document Files ===========================
	public function getCompanyDocFile($id=0)
	{
        $resData = array();		
		$this->db->from('company_document_files');
		$this->db->where('DocumentId',$id);
		$query = $this->db->get();
		$list  = $query->result();
		
		$tr 	= '';
		$i	= 0;
		//company document files details to be loaded in the Edit company document's Existing file section		
		foreach ($list as $row) {
			$i++;
			$tr .= '<tr><td><span><a style="font-size: 1rem !important;" href="'.base_url().$row->DocumentPath.$row->FileName.'" target="_blank"><i class="fa fa-eye" aria-hidden="true"></i> '.$row->FileDesc.'</a></span></td>';
			$tr .= '<td><input class="optional toggle" type="checkbox" id="CompanyDoc_Remove'.$i.'" name="CompanyDoc_Remove'.$i.'" value="'.$row->Id.'"><label  id="CompanyDoc_Remove_Label'.$i.'" name="CompanyDoc_Remove_Label'.$i.'" for="CompanyDoc_Remove"> &nbsp;Remove '.$row->FileDesc.' file</label></td></tr>';
		}
		
		if($tr == '')
			$tr .= '';
		//output as html format
		
		echo $tr;
	}
	
	
	//================================= deleteCompanyDocFile function to delete Company Document file/s ===========================
	public function deleteCompanyDocFile($id=0)
	{
			$db  			= new Database();
			$filePath 		= $db->getFieldValueById("company_document_files", "DocumentPath", "Id='{$id}'");
			$fileName 		= $db->getFieldValueById("company_document_files", "FileName", "Id='{$id}'");
			
			//deleting the company document files from company_document folder in upload folder 
			unlink($filePath.$fileName);
			
			//deleting the company document files record from company_document_files table
			$res    =  $this->db->delete('company_document_files', array('Id' => $id));
			$resData =array();
		    if($res)
		    {
				$resData    = array(
									"status" => true,
									'message' => 'Company document file deleted successfully!!'
							 );
			   
		    }
		    else
		    {
				$resData=array(
						"status"=>false,
						"message"=>"Oops! Error, Can't delete Company document file!!"
					   );
		    }
		    echo json_encode($resData); 	
	}
	
	//==================================== employeeDocumentList function to get DataTables of Employee Documents  - by Sajitha ================================
	public function employeeDocumentList($subId="")
	{
        $docemployee			= $this->input->post("docemployee");
		$empbranch				= $this->input->post("empbranch");
		$empdep					= $this->input->post("empdep");
		$doctype				= $this->input->post("doctype");
		
		$list 					= $this->EmployeeDocument_model->getDataTables($docemployee,$empbranch,$empdep,$doctype);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start'];
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();

			$profilePath 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/';
			$mainPhoto		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$data->EmployeeId}'");
			if($mainPhoto == '') {
				if($db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'") == "Male")
					$mainPhoto 	= "male.png";
				else
					$mainPhoto 	= "female.png";
			}
			
			$profilePhotoLarge 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").$mainPhoto;
			$profilePhoto 	= $profilePath.$mainPhoto;
			if(!(file_exists($db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/'.$mainPhoto)) || $mainPhoto == '') {
				if($db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'") == "Male")
					$profilePhoto 	= $profilePath."male.png";
				else
					$profilePhoto 	= $profilePath."female.png";
			}
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'").'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';			
			$row[] = $db->getFieldValueById("employee_master", "Code", "Id='{$data->EmployeeId}'");
			
			$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
			$branchName = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");
			$row[] = $branchName;
			
			$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
			$depName = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");
			$row[] = $depName;
			$firstName = $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'");
			$lastName = $db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");
			$row[] = $firstName." ".$lastName;
			
			$docName = $db->getFieldValueById("employee_document_type", "DocumentTypeName", "Id='{$data->DocumentId}'");
			$row[] = $docName;
			
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->DateAdded));
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->ValidUntil));
			$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			
			if($data->Status == "Active") {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == "Inactive") {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	

			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
		
			$actions ="";
			// $view ="Sub_Visible_".$id;
			$edit ="Sub_Edit_".$id;
			$edit ="Sub_Copy_".$id;
			$delete = "Sub_Del_".$id;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			$actions = '<div class="btn-group" >'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  	 .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editEmployeeDoc('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  	 .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editEmployeeDoc('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  	.'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteEmployeeDoc('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			$actions .=' </div>'
	                  .'</div>';
			
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->EmployeeDocument_model->countAll(),
						"recordsFiltered" => $this->EmployeeDocument_model->countFiltered($docemployee,$empbranch,$empdep,$doctype),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}	

	//=========================== deleteEmployeeDoc function used for deleting Employee document details by id from employee_document table===========================	 
	public function deleteEmployeeDoc($id)
	{
		
       $res    =  $this->EmployeeDocument_model->deleteData($id);
       
	   $resData =array();
	   if($res)
	   {
			$this->db->from('employee_document_files');
			$this->db->where('EmployeeDocId',$id);
			$query = $this->db->get();
			$list  = $query->result();
			
			//deleting the employee document files from employee_document folder in upload folder when deleting employee document detials from the employee_document table
			foreach ($list as $row) {
				unlink($row->DocumentPath.$row->FileName);				
			}
		
			//deleting the company document files from company_document_files table when deleting company document detials from the company_document table
			$res     	= $this->db->delete('employee_document_files', array('EmployeeDocId' => $id));
			$resData 	= array();		    			
			$resData    = array(
								"status" => true,
								'message' => 'Employee document deleted successfully!!'
						 );
		   
	   }
	   else
	   {
		    $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Employee document!!"
				   );
	   }
	   echo json_encode($resData);
    } 
	
	//================================= deleteEmployeeDocFile function to delete Employee Document file/s ===========================
	public function deleteEmployeeDocFile($id=0)
	{
			$db  			= new Database();
			$filePath 		= $db->getFieldValueById("employee_document_files", "DocumentPath", "Id='{$id}'");
			$fileName 		= $db->getFieldValueById("employee_document_files", "FileName", "Id='{$id}'");
			
			//deleting the employee document files from employee_document folder in upload folder 
			unlink($filePath.$fileName);
			
			//deleting the company document files from company_document_files table
			$res    =  $this->db->delete('employee_document_files', array('Id' => $id));
			$resData =array();
		    if($res)
		    {
				$resData    = array(
									"status" => true,
									'message' => 'Employee document file deleted successfully!!'
							 );
			   
		    }
		    else
		    {
				$resData=array(
						"status"=>false,
						"message"=>"Oops! Error, Can't delete Employee document file!!"
					   );
		    }
		    echo json_encode($resData); 	
	}
	
	//=========================== getEmployeeDoc function used for getting a Employee Document details by id from employee_document table===========================	 
	public function getEmployeeDoc($id)
	{
		$data = $this->EmployeeDocument_model->getById($id);
		$resData = array();
		
		$this->db->from('employee_document_files');
		$this->db->where('EmployeeDocId',$id);
		$query = $this->db->get();
		$rowcount = $query->num_rows();
		
		$db  			= new Database();
		$fileDescr 		= $db->getFieldValueById("employee_document_files", "FileDesc", "EmployeeDocId='{$id}'");
		
		$resData = array(
						"FileDetailsCount" => $rowcount,
						"FileDesc"		   => $fileDescr		
					 );
					 
		$resData1 = array();
		$db = new Database();			
		$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
		$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
	    $resData1 = array(
						"BranchId" => $branchId,
						"DepId" => $depId
				 );
		$resData = (object) array_merge((array) $resData,(array) $resData1, (array) $data);
		echo json_encode($resData);
	}
	
	//================================= getEmployeeDocFile function to get Employee Document Files ===========================
	public function getEmployeeDocFile($id=0)
	{
        $resData = array();		
		$this->db->from('employee_document_files');
		$this->db->where('EmployeeDocId',$id);
		$query = $this->db->get();
		$list  = $query->result();		
		$tr 	= '';
		$i	= 0;
		
		//employee document files details to be loaded in the Edit employee document's Existing file section		
		foreach ($list as $row) {
			$i++;
			$tr .= '<tr><td><span><a style="font-size: 1rem !important;" href="'.base_url().$row->DocumentPath.$row->FileName.'" target="_blank"><i class="fa fa-eye" aria-hidden="true"></i> '.$row->FileDesc.'</a></span></td>';
			$tr .= '<td><input class="optional toggleEmpDoc" type="checkbox" id="EmployeeDoc_Remove'.$i.'" name="EmployeeDoc_Remove'.$i.'" value="'.$row->Id.'"><label  id="EmployeeDoc_Remove_Label'.$i.'" name="EmployeeDoc_Remove_Label'.$i.'" for="EmployeeDoc_Remove"> &nbsp;Remove '.$row->FileDesc.' file</label></td></tr>';
		}
		
		if($tr == '')
			$tr .= '';
		//output as html format
		
		echo $tr;
	}
	
	//==================================== saveEmpDoc function for Saving Employee Document details - by Sajitha ================================
	public function saveEmpDoc()
	{
		$id						= $this->input->post("id");
		$data 					= array();  
		$docName  				= $this->input->post('docName');
		$details 				= $this->input->post('details');
		$employeeId 			= $this->input->post('employeeId');		
		$status 				= $this->input->post('status');
		$dateAdded				= $this->input->post('dateAdded');
		$validUntil_str 		= $this->input->post('validUntil');
		$validUntil_str 		= str_replace('/', '-', $validUntil_str);
		$validUntil 			= date('Y-m-d',(strtotime($validUntil_str)));
		$uploadDir				= '';
		
		$db  			= new Database();
		$where   		= " `DocumentId`={$docName} and `EmployeeId`={$employeeId} and Id!={$id}";
		$res 			= $db->checkExistance("employee_document", $where); // if exists id value will be returned.
		
		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This employee document is already created and exists!"
									 )
							);
			exit;
		}
		
		// Employee document uploading starts
		if(isset($_FILES))
		{
			
			$TotalFiles = $_POST["TotalFiles"];
			
			//foreach($_FILES as $file)
			for ($i=0;  $i<=$TotalFiles; $i++)
			{
				if(isset($_FILES["file_".$i]))
				{
					// tmp_name | name | type | size | error
					
					// -- Check here type  size and if any error.
					$fileName 	= $_FILES["file_".$i]['name'];
					$imgSize 	= $_FILES["file_".$i]['size'];
							
							// Check file size '5MB' or from max.image byte upload settings, in site settings module.
							if($imgSize < 5000000){}
							else{
										$msgError = "Document " . $fileName . " file is too large. Only 5 MB allowed!.";
										$errMSG   = "Error : Sorry," .$msgError;
								}
						
					$tempName	= $_FILES["file_".$i]['tmp_name'];
					$uploadDir	= "./uploads/employee_document/"; // this would be the upload file path. Exactly specify here or from the settings.
					
					// uploadDocument is defined in site_helper (system/helper folder).
					$uploadResult = uploadDocument($tempName, $uploadDir, "", $fileName, "", "",  FALSE, TRUE, TRUE,$_POST["Doc_Name"]);
					if($uploadResult['status'] == 'true') {
						
					} else {
						echo json_encode(
								array("status" => false, 
									  "message"=>$uploadResult['message']
									 )
							);
						exit;
					}
					$fileDesc = $_POST["fileDesc"];
				}
			}
		}
		// Company document uploading ends
		
		if($id==0) // if add
		{    
			$data = array(
						'DocumentId' => $docName,
						'Status' => $status,
						'Details' => $details,
						'EmployeeId' => $employeeId,
						'DateAdded' => date('Y-m-d H:i:s'),
						'ValidUntil' => $validUntil,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'DocumentId' => $docName,
						'Status' => $status,
						'Details' => $details,
						'EmployeeId' => $employeeId,
						'ValidUntil' => $validUntil,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		$res	= $this->EmployeeDocument_model->saveData($data, $id);
		
		// inserting employee document files details in the employee_document_files table
		if($id!=0) // if edit
			$res = $id;// assiging the document id 
		
		if($uploadDir) {
			$filedata = array(
							'EmployeeDocId' => $res,
							'Status' => $status,
							'DocumentPath' => $uploadDir,
							'FileDesc' => $fileDesc,
							'FileName' => $uploadResult['fileName'],
							'CreatedBy' => $_SESSION['ADMIN_ID'],
							'CreatedOn' => date('Y-m-d H:i:s')
						);
			$this->db->insert('employee_document_files',$filedata);		
		}			
		
		$resData = array('status' => true,'message' => 'Employee Document details saved successfully!!');
		
		echo json_encode($resData);
	}	
	
	//================================= checkEmpDocAdded function for getting the already added documents for the selected employee ===========================
	public function checkEmpDocAdded()
	{
		$employeeId  	= $this->input->post('employeeId');
		$res = $this->EmployeeDocument_model->getDocIds($employeeId);
		echo json_encode($res);
		
	}
	
	//==================================== employeeDocumentTypeList function to get DataTables of Employee Document Types  - by Sajitha ================================

	public function employeeDocumentTypeList($subid="")
	{
        $documentType			= $this->input->post("documenttype");
		$list 					= $this->EmployeeDocumentType_model->getDataTables($documentType);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id 	= $data->Id;
			$row 	= array();
			$db 	= new Database();			
			$row[] 	= $data->DocumentTypeName;
			if($data->NotifyExpiry == 1)
				$row[] = 'Yes';
			else
				$row[] = 'No';
			
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			if($data->ModifiedOn == null)
				$row[] = '';
			else
				$row[] = date('d/m/Y h:i:s a', strtotime($data->ModifiedOn));
			$row[] =  $data->ModifiedBy;
			if($data->Status == "Active") {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == "Inactive") {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			$actions = '<div class="btn-group" >'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"  aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editEmployeeDocType('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission)||in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editEmployeeDocType('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteEmployeeDocType('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
	                 
			 }
			 $actions .= ' </div>'
	                  .'</div>';
						
			
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->EmployeeDocumentType_model->countAll(),
						"recordsFiltered" => $this->EmployeeDocumentType_model->countFiltered($documentType),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}	
	
	
	//==================================== saveEmployeeDocType function for Saving Employee Document Type details - by Sajitha ================================
	public function saveEmployeeDocType()
	{
		$id						= $this->input->post("id");
		$data 					= array();  
		$empDocTypeName  		= $this->input->post('empDocTypeName');
		$details 				= $this->input->post('details');
		$notifyExpiry 			= $this->input->post('notifyExpiry');
		$notifyExpiryMonth 		= $this->input->post('notifyExpiryMonth');
		$notifyExpiryWeek 		= $this->input->post('notifyExpiryWeek');
		$notifyExpiryDay 		= $this->input->post('notifyExpiryDay');
				
		$status 				= $this->input->post('status');
		
		$db  					= new Database();
		$where   				= " UPPER(`DocumentTypeName`)='".strtoupper($empDocTypeName)."' and `Id`!={$id}";
		$res 					= $db->checkExistance("employee_document_type", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This employee document type is already created and exists!"
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'DocumentTypeName' => $empDocTypeName,
						'Status' => $status,
						'Details' => $details,
						'NotifyExpiry' => $notifyExpiry,
						'NotifyExpiryMonth' => $notifyExpiryMonth,
						'NotifyExpiryWeek' => $notifyExpiryWeek,
						'NotifyExpiryDay' => $notifyExpiryDay,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'DocumentTypeName' => $empDocTypeName,
						'Status' => $status,
						'Details' => $details,
						'NotifyExpiry' => $notifyExpiry,
						'NotifyExpiryMonth' => $notifyExpiryMonth,
						'NotifyExpiryWeek' => $notifyExpiryWeek,
						'NotifyExpiryDay' => $notifyExpiryDay,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		
		$res	= $this->EmployeeDocumentType_model->saveData($data, $id);
		$db = new BrqDatabase();
		$resCombo = $db->getEmployeeDocTypeCombo();
		$resData    = array(
								"status" => true,
								'message' => 'Employee Document Type details saved successfully!!',
								'filterEmployeeDocType' => $resCombo
						 );	
		echo json_encode($resData);
	}
	
	//=========================== deleteEmployeeDocType function used for deleting Employee Document Type details by id from employee_document_type table===========================	 
	public function deleteEmployeeDocType($id)
	{
       $res    =  $this->EmployeeDocumentType_model->deleteData($id);
       $resData =array();
	   if($res['status'])
	   {
			$db = new BrqDatabase();
			$resCombo = $db->getEmployeeDocTypeCombo();
			$resData    = array(
								"status" => true,
								'message' => 'Employee Document Type deleted successfully!!',
								'filterEmployeeDocType' => $resCombo
						 );
	   }
	   else
	   {
		    $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
	   
	   echo json_encode($resData); 
    } 
	
	//================================= getEmployeeDocType function to get Employee Document Type's details ===========================
	public function getEmployeeDocType($id=0)
	{
        $data 	= $this->EmployeeDocumentType_model->getById($id);
		echo json_encode($data);
	}
	
// -------------------------- Image Gallery module start ----------------
public function image_gallery($id="")
{
	if(!$this->isSessionSet())
	{
		$this->index();
		return;
	}
	$fuctionName =  $this->uri->segment(2);
	$db = new Database();
	$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
	$this->isAccessDenied($Id);
	$moduleTab="image_gallery";
	$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
	$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
	
	$data 					= array();
	$headTitleAddText		= " - Products : Login as ";
	$headTitleAddId			= $_SESSION['ADMIN_ID'];
	$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
	
	$data["moduleTab"]		= $moduleTab; // product or product_category
	$data["subMenuId"]		=$id;
	$this->load->view("brq-admin/image-gallery", $data);
	
}
	
	//====================================Function to get DataTables of Gallery Image ================================
	public function imageGalleryList($subid="")
	{
        $list 	= $this->ImageGallery_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		//$no=1;
		
		foreach ($list as $data) {
		
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$imagePath 	= base_url().$data->ImagePath.'thumb/';
			$galleryImageLarge 	= base_url().$data->ImagePath.$data->ImageName;
			$galleryPhoto 	= $imagePath.$data->ImageName;
			if(!(file_exists($data->ImagePath.'thumb/'.$data->ImageName))) {
				$galleryPhoto 	= $imagePath."gallery.png";
			}
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$galleryImageLarge.'\',\''.$data->Title.'\');" ><img   class="rounded-circle" src="'.$galleryPhoto.'" height="40" width="40" alt=""></a>';
			$row[] = $data->Title;
			
		    if($data->Status=="Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			 
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
		    $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
            $row[] = $data->CreatedBy;
           
			//add html for action
			// $row[] = '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="editImgData('."'".$data->Id."'".');"><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>
			// 	  <a  id="deleteButton_'. $data->Id.'" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="ajaxImgDelete('."'".$data->Id."'".')"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</a>';
		  	$row[]=$this-> useractionpermission($subid,$data->Id);
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->ImageGallery_model->countAll(),
						"recordsFiltered" => $this->ImageGallery_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
		
	}
	
	//==================================== saveGalleryImage function for Saving Gallery Image details - by Sajitha ================================
	public function saveGalleryImage()
	{
		$id				= $this->input->post("hidID");
		$uploadDir		= '';
		
		$data 			= array();  
		$imgTitle  	= $this->input->post('Img_Name');
		$db  			= new Database();
		$where   		= " UPPER(Title)='".strtoupper($imgTitle)."' and Id!={$id}";
		$res 			= $db->checkExistance("image_gallery", $where); // if exists id value will be returned.
	
		if($res)
		{
			echo json_encode(
				array("status" => false, 
					  "message"=>"This gallery image title is already created and exists! Please change the gallery image title."
					 )
			);
			exit;
		}
		$galleryImage   = '';
		
		// Gallery Image uploading starts
		if(isset($_FILES))
		{
			$TotalFiles = $_POST["TotalFiles"];
			if($TotalFiles != 0) {
				//foreach($_FILES as $file)
				for ($i=0;  $i<=$TotalFiles; $i++)
				{
					if(isset($_FILES["file_".$i]))
					{
						// tmp_name | name | type | size | error
						
						// -- Check here type  size and if any error.
						$fileName 	= $_FILES["file_".$i]['name'];
						$imgSize 	= $_FILES["file_".$i]['size'];
								
								// Check file size '5MB' or from max.image byte upload settings, in site settings module.
								if($imgSize < 5000000){}
								else{
											$msgError = "Gallery image " . $fileName . " file is too large. Only 5 MB allowed!.";
											$errMSG   = "Error : Sorry," .$msgError;
									}
							
						$tempName	= $_FILES["file_".$i]['tmp_name'];
						$uploadDir	= "./uploads/gallery_image/"; // this would be the upload file path. Exactly specify here or from the settings.
						
						// uploadImage is defined in site_helper (system/helper folder).
						$uploadResult = uploadImage($tempName, $uploadDir, "", $fileName, "", "",  TRUE, FALSE, FALSE,$_POST["Pic_Name"]);
						if($uploadResult['status'] == 'true') {
							$galleryImage = $uploadResult['fileName'];
							
						} else {
							echo json_encode(
									array("status" => false, 
										  "message"=>$uploadResult['message']
										 )
								);
							exit;
						}
					}
				}
			} else { 
				if($id==0) {
					$uploadDir	= "./uploads/gallery_image/";
					$galleryImage = "gallery.png";
				}
			}
		} 
		
		// Gallery Image uploading ends
		
		if($id==0) // if add
		{    
			$data = array(
						'Title' => $imgTitle,
						'Status' => $this->input->post('Status'),						
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedId'		=>	$_SESSION['EMPLOYEE_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),	
						'ImagePath' => $uploadDir,
						'ImageName' => $galleryImage,
					);
				
		}
		else { // if edit
				$data = array(
						'Title'=> $imgTitle,
						'Status' 	 => $this->input->post('Status'),
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),	
						'ModifiedId' => $_SESSION['EMPLOYEE_ID'],						
						);
				
					if($galleryImage !='' && $uploadDir != '') {
						 $data += [ "ImageName" => $galleryImage, "ImagePath" => $uploadDir ];
							
						//deleting existing employee profile picture and thumbnail		
						$db  				= new Database();
						$imageName 			= $db->getFieldValueById("image_gallery", "ImageName", "Id='{$id}'");	
						$imagePath 			= $db->getFieldValueById("image_gallery", "ImagePath", "Id='{$id}'");	
						if($imageName != 'male.png' && (file_exists($imagePath.$imageName))) {
							unlink($imagePath.$imageName);
							if(file_exists($imagePath."thumb/".$imageName))
								unlink($imagePath."thumb/".$imageName);
						}
					}		
		}
		
		$res	= $this->ImageGallery_model->saveData($data, $id);
	   
		$resData    = array(
								"status" => true,
								'message' => 'Gallery Image details saved successfully!!'
						 );
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$moduleTab="image_gallery";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		
		$resData = (object) array_merge((array) $resData, (array) $data);
	    echo json_encode($resData);
	}
	
	//==================================== Function to get details of Gallery Image by Id - by Sajitha ================================
	public function getEditGalleryImage($id)
	{
		$data 		= $this->ImageGallery_model->getById($id);
		
		echo json_encode($data);
	}
	
	//==================================== Function to get details of Gallery Image details by Id - by Sajitha ================================
	public function getImagePic($id)
	{
		$db  				= new Database();
		$imageName 		= $db->getFieldValueById("image_gallery", "ImageName", "Id='{$id}'");	
		$imagePath 	= $db->getFieldValueById("image_gallery", "ImagePath", "Id='{$id}'");	
		if(file_exists($imagePath."thumb/".$imageName)) 
			echo 1;
		else
			echo 0;
	}
	
	//====================================Function to delete Gallery Image by Id ================================
	public function deleteGalleryImage($id)
	{
        //deleting gallery image and thumbnail
		$db  				= new Database();
		$imageName 		= $db->getFieldValueById("image_gallery", "ImageName", "Id='{$id}'");	
		$imagePath 	= $db->getFieldValueById("image_gallery", "ImagePath", "Id='{$id}'");	
		if($imageName != 'gallery.png' && (file_exists($imagePath.$imageName))) {
			unlink($imagePath.$imageName);
			if(file_exists($imagePath."thumb/".$imageName))
				unlink($imagePath."thumb/".$imageName);
		}			
			
		$res=  $this->ImageGallery_model->deleteData($id);
	    if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$moduleTab="image_gallery";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // image_gallery
		
       $resData =array();
	   if($res)
	   {
		   		   
		   $resData=array(
					"status"=>true,
					"message"=>"Gallery Image deleted successfully!!"
				   );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete gallery image!!"
				   );
		   
	   }
	   $resData = (object) array_merge((array) $resData, (array) $data);
	   echo json_encode($resData);  
	} 
   
    // -------------------------- Footer Links module start ----------------
	
public function footer_links($id="")
{
	if(!$this->isSessionSet())
	{
		$this->index();
		return;
	}
	$fuctionName =  $this->uri->segment(2);
	$db = new Database();
	$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
	$this->isAccessDenied($Id);
	$moduleTab="image_gallery";
	$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
	$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
	
	$data 					= array();
	$headTitleAddText		= " - Products : Login as ";
	$headTitleAddId			= $_SESSION['ADMIN_ID'];
	$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
	$data["subMenuId"]		= $id;
	$data["moduleTab"]		= $moduleTab; // product or product_category
	$this->load->view("brq-admin/footer-links", $data);
	
}
	
	//====================================Function to get DataTables of Site Footer Links ================================
	public function footerLinkList($subid="")
	{
        $list 	= $this->FooterLink_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		//$no=1;
		
		foreach ($list as $data) {
		
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$row[] 			= $data->LinkName;
			$row[] 			= $data->LinkTo;
		    if($data->Status=="0")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			 
			$row[] = "<span class='" . $statusClass . "'>" . $statusText . "</span>";
		    $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
            $row[] = $data->CreatedBy;	
			if($data->ModifiedOn)
				$row[] = date('d/m/Y h:i:s a', strtotime($data->ModifiedOn));
			else 
				$row[] = "";
            $row[] = $data->ModifiedBy;	
			//add html for action
			// $actions = '<div class="btn-group">'
	        //           .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	        //           .'Action<span class="sr-only">Toggle Dropdown</span>'
	        //           .'</button>'
	        //           .'<div class="dropdown-menu" role="menu" style="">'
	        //           .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editData('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>'
	        //           .'<div class="dropdown-divider"></div>'
	        //           .'<a id="copyeButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editData('."'".$data->Id."'".', true)"><span class="fa fa-files-o text-fanger"></span> Copy</a>'
			// 		  .'<div class="dropdown-divider"></div>'
			// 		  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Delete"  onclick="deleteData('."'".$data->Id."'".');"><span class="fa fa-trash-o text-fanger"></span> Delete</a>'
	        //           .' </div>'
	        //           .'</div>';
			$actions= $this->useractionpermission($subid,$data->Id);
			$row[] = $actions;
			
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->FooterLink_model->countAll(),
						"recordsFiltered" => $this->FooterLink_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
		
	}
		
	//==================================== saveFooterLink function for Saving Footer Link details - by Sajitha ================================
	public function saveFooterLink()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$footerLinkName  		= addslashes($this->input->post('FooterLink_Name'));
		$status 				= $this->input->post('Status');
		$linkPage  				= $this->input->post('Link_Page');
			
		$db  			= new Database();
		$where   		= " UPPER(LinkName)='".strtoupper($footerLinkName)."' and Id!={$id}";
		$res 			= $db->checkExistance("sys_site_footer_links", $where); // if exists id value will be returned.
		
		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Footer Link Name is already created and exists! Please change the Footer Link Name."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'LinkName' => $footerLinkName,
						'Status' => $status,
						'LinkTo' => $linkPage,						
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),						
					);
				
		}
		else { // if edit
			$data = array(
					'LinkName' => $footerLinkName,
					'Status' => $status,
					'LinkTo' => $linkPage,	
					'ModifiedBy' => $_SESSION['ADMIN_ID'],
					'ModifiedOn' => date('Y-m-d H:i:s'),				
					);						
		}
		$res	= $this->FooterLink_model->saveData($data, $id);
	   
		$resData    = array(
								"status" => true,
								'message' => 'Footer Link details saved successfully!!'
						 );
				 
		echo json_encode($resData);       
	}
	
	//==================================== Function to get details of Footer Link by Id - by Sajitha ================================
	public function getEditFooterLink($id)
	{
		$data 		= $this->FooterLink_model->getById($id);
		echo json_encode($data);
	}
	
	//====================================Function to delete Footer Link by Id ================================
	public function deleteFooterLink($id)
	{
		$res=  $this->FooterLink_model->deleteData($id);
	   
       $resData =array();
	   if($res)
	   {
		   		   
		   $resData=array(
					"status"=>true,
					"message"=>"Footer Link deleted successfully!!"
				   );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Footer Link!!"
				   );
		   
	   }
	   echo json_encode($resData);  
	} 
	
	// -------------------------- Set Number module start ----------------
	public function set_number($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		 //$fuctionName =  $this->uri->segment(2);
		//$db = new Database();
		//$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		//$this->isAccessDenied($Id); 
		$moduleTab="set_number";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		$data["menuId"]		= $id;
		$this->load->view("brq-admin/set-number", $data);
		
	}
	
	//====================================Function to get DataTables of Set Number List ================================
	public function setNumberList($menuid="")
	{
		$list 			= $this->SetNumber_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start'];
		
		//$no=1;
		
		foreach ($list as $data) {
		
			$actions	 = "";
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$row[] = $data->NumberText;
			$row[] = $data->NumberType;
			$row[] = $data->StartNumber;
			$row[] = $data->LastNumber;
			$row[] = $data->Year;
			if($data->Status=="0")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			$row[] = "<span class='" . $statusClass . "'>" . $statusText . "</span>";
			
		    $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
            $row[] = $data->CreatedBy;
			if($data->ModifiedOn)
				$row[] = date('d/m/Y h:i:s a', strtotime($data->ModifiedOn));
			else 
				$row[] = "";
            $row[] = $data->ModifiedBy;	
			
			//add html for action
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Main_Visible_".$menuid;
			$edit ="Main_Edit_".$menuid;
			$copy ="Main_Copy_".$menuid;
			$delete = "Main_Del_".$menuid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			$actions = '<div class="btn-group" >'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="popUpPasswordRecheck('."'".$data->Id."'".',\'edit\');"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="popUpPasswordRecheck('."'".$data->Id."'".' ,\'copy\');"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="popUpPasswordRecheck('."'".$data->Id."'".',\'delete\');"><span class="fa fa-trash text-fanger"></span> Delete</a>';
				
			}
			$actions .=' </div>'
	                  .'</div>';
			
			$row[] = $actions; 
			
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->SetNumber_model->countAll(),
						"recordsFiltered" => $this->SetNumber_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
	
	//==================================== saveSetNumber function for Saving System Set Number Record details - by Sajitha ================================
	public function saveSetNumber()
	{
		$id				= $this->input->post("hidID");
		
		$db  			= new Database();
		$where   		= " NumberType='".$this->input->post('Number_Type')."' and Id!={$id}";
		$res 			= $db->checkExistance("sys_setnumber", $where); // if exists id value will be returned.
		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Set Number Type is already created and exists! Please change it."
									 )
							);
			exit;
		}
		
		$where   		= " NumberText='".$this->input->post('Number_Text')."' and Id!={$id}";
		$res 			= $db->checkExistance("sys_setnumber", $where); // if exists id value will be returned.
		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Set Number Text is already created and exists! Please change it."
									 )
							);
			exit;
		}
		
		
		$data 			= array();
	  
		if($id==0) // if add
		{    
			$data = array(
						'NumberType' => strtoupper(preg_replace('/\s+/', '_', $this->input->post('Number_Type'))),
						'NumberText' => strtoupper($this->input->post('Number_Text')),
						'Status' => $this->input->post('Status'),
						'StartNumber' => $this->input->post('Start_Number'),
						'LastNumber' => $this->input->post('Start_Number')-1,
						'Year' => $this->input->post('Year'),
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),
					);
				
		}
		else { // if edit
				if(!$this->input->post('Year'))
					$year = date("Y");
				else 
					$year = $this->input->post('Year');
				
				$data = array(
						'Status' => $this->input->post('Status'),
						
						'Year' => $year,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),					
						);
				$db  			= new Database();
				$startNumber 		= $db->getFieldValueById("sys_setnumber", "StartNumber", "Id='{$id}'");	
				if($startNumber != 	$this->input->post('Start_Number')) {
					$data1 = array(
							'StartNumber' => $this->input->post('Start_Number'),
							'LastNumber' => $this->input->post('Start_Number')-1,				
							);	
					$res	= $this->SetNumber_model->saveData($data1, $id);	
				} else {
					if($this->input->post('Last_Number')) {
						$data1 = array(
							'LastNumber' => $this->input->post('Last_Number'),				
							);	
						$res	= $this->SetNumber_model->saveData($data1, $id);
					}	
				}		
		}
		
		$res	= $this->SetNumber_model->saveData($data, $id);
	   
		$resData    = array(
								"status" => true,
								'message' => 'Set Number details saved successfully!!'
						 );
						 		
	    echo json_encode($resData);
	}
	
	//====================================Function to delete Footer Link by Id ================================
	public function deleteSetNumber($id)
	{
		$res=  $this->SetNumber_model->deleteData($id);
	   
       $resData =array();
	   if($res)
	   {
		   		   
		   $resData=array(
					"status"=>true,
					"message"=>"Set Number record deleted successfully!!"
				   );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Set Number!!"
				   );
		   
	   }
	   echo json_encode($resData);  
	} 
	
	//==================================== Function to get details of Set Number by Id - by Sajitha ================================
	public function getEditSetNumber($id)
	{
		$data 		= $this->SetNumber_model->getById($id);
		echo json_encode($data);
	}
	
	// -------------------------- Table Counter module start ----------------
	public function table_counter()
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$moduleTab="table_counter";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		$this->load->view("brq-admin/table-counter", $data);		
	}
	
	//====================================Function to get DataTables of Set Number List ================================
	public function tableCounterList()
	{		
		$tableName	=		$this->input->post('tableName');
		$list 			= $this->TableCounter_model->getDataTables($tableName);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start'];
		
		//$no=1;
		
		foreach ($list as $data) {
		
			$actions	 = "";
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$row[] = $data->TableName;
			$row[] = '<span class="label label-success"><a href="javascript:void(0)" onclick="popUpPasswordRecheck('."'".$data->Id."'".',\'edit\');">'.$data->SerialNumber.'</a></span>';
			if($data->Status=="0")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			if($data->Status == 1)		
				$checked = "checked";
			else
				$checked = "";
			$row[] = '<label class="switch"><input onClick="onOff('."'".$data->Id."'".');" id="On_Off'.$data->Id.'" '.$checked.' class="switch-input" type="checkbox" /><span class="switch-label" data-on="On" data-off="Off"></span><span class="switch-handle"></span></label>';
			
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->TableCounter_model->countAll(),
						"recordsFiltered" => $this->TableCounter_model->countFiltered($tableName),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
	
	//==================================== Function to get details of Table Counter by Id - by Sajitha ================================
	public function getEditTableCounter($id)
	{
		$data 		= $this->TableCounter_model->getById($id);
		echo json_encode($data);
	}
	
	//==================================== saveTableCounter function for Saving Table Counter Record details - by Sajitha ================================
	public function saveTableCounter()
	{
		$id				= $this->input->post("hidID");
		
		$data 			= array();
	  
		$data = array(
				'SerialNumber' => $this->input->post('Serial_Number'),
				);
		
		$res	= $this->TableCounter_model->saveData($data, $id);
	   
		$resData    = array(
								"status" => true,
								'message' => 'Table Counter serial number saved successfully!!'
						 );
						 		
	    echo json_encode($resData);
	}
	
	//==================================== updateOpenClose function for Updating OpenCloseStatus in job_titles to show / hide a job in career's job list  - by Sajitha ================================
	public function updateTableCounterOnOff() {
		$openCloseStatus = $this->input->post("on");
		$id = $this->input->post("id");
		
		if($openCloseStatus == 1) {
			$this->db->set('Status', 1);
		} else {
			$this->db->set('Status', 0);
		}			
		$where = array('Id' =>$id);
		$this->db->where($where);
		$this->db->update('sys_counter');	
	}	
	
	// -------------------------- live_documentation function to add/edit/delete all the live documentations ----------------
	public function live_documentation($moduleTab="live_documentation")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$this->load->view("brq-admin/live-documentation", $data);
	}
	//==================================== liveDocList function to get DataTables of Live Documentation  - by Sajitha ================================
	public function liveDocList($menuid="")
	{
        $list 	= $this->LiveDoc_model->getDataTables();
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row 	= array();
			$db  			= new Database();			
			$row[] = stripslashes($data->DocumentModule);
			$row[] = $data->DocumentTitle;
			$row[] = $data->DocumentPath;
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] = $data->Module;
			$row[] = $data->Type;
			//add html for action
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Main_Visible_".$menuid;
			$edit ="Main_Edit_".$menuid;
			$copy ="Main_Copy_".$menuid;
			$delete = "Main_Del_".$menuid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			$actions = '<div class="btn-group" >'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				
				$actions .= '<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editHelp('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';

			}
			if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editHelp('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteHelp('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			$actions .=' </div>'
	                  .'</div>';
			
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->LiveDoc_model->countAll(),
						"recordsFiltered" => $this->LiveDoc_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}

	
	//=========================== getEditLiveDoc function used for getting a Live Documenattion details by id from sys_help_live_documentation table===========================	 
	public function getEditLiveDoc($id)
	{
		$data = $this->LiveDoc_model->getById($id);
		echo json_encode($data);
	}
	//==================================== saveHelp function for Saving Live Documentation details - by Sajitha ================================
	public function saveHelp()
	{
		$id				= $this->input->post("hidID");
		$data 			= array();  
		$documentTitle  	= addslashes($this->input->post('Document_Title'));
		$documentPath 		= $this->input->post('Document_Path');
		$documentModule  	= $this->input->post('Document_Module');
		$serviceLink  		= $this->input->post('Service_Link');
		$status 			= $this->input->post('Status');
		$module  			= $this->input->post('Module');
		$type 				= $this->input->post('Type');
		
		$db  			= new Database();
		$where   		= "UPPER(Type)='".strtoupper($type)."' and UPPER(Module)='".strtoupper($module)."' and Id!={$id}";
		$res 			= $db->checkExistance("sys_help_live_documentation", $where); // if exists id value will be returned.
		
		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Live Documentation is already created and exists with different name! Please change the Live Documentation Module & Type details."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'DocumentTitle' => $documentTitle,
						'Status' => $status,
						'DocumentModule' => $documentModule,
						'DocumentPath' => $documentPath,
						'Module' => $module,
						'Type' => $type,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),
					);
				
		}
		else { // if edit
			$data = array(
					'DocumentTitle' => $documentTitle,
					'Status' => $status,
					'DocumentModule' => $documentModule,
					'DocumentPath' => $documentPath,
					'Module' => $module,
					'Type' => $type,
					'ModifiedBy' => $_SESSION['ADMIN_ID'],
					'ModifiedOn' => date('Y-m-d H:i:s'),				
					);						
		}

		$res	= $this->LiveDoc_model->saveData($data, $id);
	   
		$resData    = array(
								"status" => true,
								'message' => 'Live Documentation details saved successfully!!'
						 );
				 
		echo json_encode($resData);
                
	} 
	
	//=========================== deleteHelp function used for deleting Live Documentation details by id from sys_help_live_documentation table===========================	 
	public function deleteHelp($id)
	{
       $res    =  $this->LiveDoc_model->deleteData($id);
       $resData =array();
	   if($res)
	   {
		   $resData=array(
					"status"=>true,
					"message"=>"Live Documentation deleted successfully!!"
				   );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Live Documentation!!"
				   );
	   }
	   echo json_encode($resData); 
    }    
    	
	// used for testing need to delete
	public function getLiveHelpDocFileContent($type,$module)
	{
		$db  			= new Database();
		$helpFilePath = $db->getFieldValueById('sys_help_live_documentation', 'DocumentPath', "Type='{$type}' and Module='{$module}'");
		
		//$helpFilePath 	= "./system-help-live-documentation/admin/test.txt";	
		$content		= file_get_contents($helpFilePath);
		$content 		= nl2br(htmlspecialchars($content, ENT_QUOTES)); 
		echo $content;
	}
	
			
    //=================== FOR ADMIN - functional documentation --------------------

	public function functional_documentation()
	{
		 if(!$this->isSessionSet())
			{
				$this->index();
				return;
			}
			$fuctionName =  $this->uri->segment(2);
			$db = new Database();
			$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
			$this->isAccessDenied($Id);
			$data						= array();	
			$data["adminController"] 	= $this->adminController;
			
			$headTitleAddText			= " : Login as ";
			$headTitleAddId				=	 $_SESSION['ADMIN_ID'];
			
			$data["headTitle"] 		 	= $headTitleAddText . "- Function document creation.";
			$data						= $this->Common_model->common_sidebar_counts();
			
			$this->load->view('brq-admin/functional-documentation.php',$data);
	}	
	
			
	//=========================== getFnDocumentationList function used for listing All Functional Documentation : Super Admin Module ===========================	 
	public function getFnDocumentationList($documentTitle="",$subject="", $status="")
	{
        $title		=		$this->input->post('documentTitle');
		$subject	=		$this->input->post('subject');
		
		$list 	= $this->FnDocument_model->getDataTables($title, $subject);
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; // commented for working
		
		//$no=1;
		
		foreach ($list as $data) {
		
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$row = array();
			$row[] = $data->UserId;
			$row[] = $data->UserType;
			
			if($data->LastLoginDate!=NULL)
                            $row[] = date('d/m/Y h:i:s a', strtotime($data->LastLoginDate)); // converting to indian format with 12hr.
			else
                        $row[] ="Not yet login.";
                        $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
                        $row[] = $data->LastLoginIP;
			
			if($data->Status=="Inactive")
			 {
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			 }
			  
			 
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			//add html for action
			$row[] = '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="editData('."'".$data->Id."'".')"><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>
				  <a  id="deleteButton" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="deleteData('."'".$data->Id."'".')"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</a>';
		  		  
			//<a id="viewButton" class="btn btn-small btn-info" href="javascript:void(0)" title="Click to edit" onclick="edit_menu('."'". $menu->Id ."'".')"><i class="fa fa-sticky-note-o"></i> View</a>';	  
		
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->FnDocument_model->countAll(),
						"recordsFiltered" => $this->FnDocument_model->countFiltered($title,$subject),
						"data" => $data1,
				);
		//output to json format
		echo json_encode($output);
   }



public function createFunctionalDocument()
{
	
		$this->load->model('FnDocument_model');
		$this->load->helper('pdf_helper');
		
		$logo   				= 	base_url() ."images/logo.png";
		
		$deatiledDescription	=	trim($this->input->post("DetailedDescription"));
		$documentTitle			= 	trim($this->input->post("DocumentTitle"));
		$subject				= 	trim($this->input->post("Subject"));
		$breafDescription		= 	trim($this->input->post("BreafDescription"));
		$documentHeader			= 	trim($this->input->post("DocumentHeader"));
		$documentFooter			= 	trim($this->input->post("DocumentFooter"));
		
	
		
		
		//$deatiledDescription	=	str_replace("'","\'",$deatiledDescription); // replacing the quotes.
		//$deatiledDescription	=	htmlspecialchars($deatiledDescription);
		
		tcpdf(); //calling pdf_helper function.		
		
	    $obj_pdf = new TCPDF('P', PDF_UNIT, PDF_PAGE_FORMAT, true, 'UTF-8', false);
		$obj_pdf->SetCreator(PDF_CREATOR);
		$title 	= "Functional Document-" . $documentTitle;
		$obj_pdf->SetTitle($title);
		
		// Getting address for header
		$db 	 = new Database(); 
		$address = $db->getFieldValueById('sys_settings', 'Address', 'Id=1');
		
		$documentHeader= $address. "\r\n\n".$documentHeader;
		
        	
		
		//PDF HEADER Details
		$obj_pdf->setHeaderFont(array('helvetica', 'I', 8));
		$obj_pdf->SetHeaderData(PDF_HEADER_LOGO, PDF_HEADER_LOGO_WIDTH, $title, $documentHeader);
		$obj_pdf->setFooterData(array(0, 64, 0), array(0, 64, 128),'Title','Footer data here');
		
		$obj_pdf->setHeaderFont(Array(PDF_FONT_NAME_MAIN, '', PDF_FONT_SIZE_MAIN));
		$obj_pdf->setFooterFont(Array(PDF_FONT_NAME_DATA, '', PDF_FONT_SIZE_DATA));
		$obj_pdf->SetDefaultMonospacedFont('helvetica');
		$obj_pdf->SetHeaderMargin(PDF_MARGIN_HEADER);
		$obj_pdf->SetFooterMargin(PDF_MARGIN_FOOTER);
		$obj_pdf->SetMargins(PDF_MARGIN_LEFT, PDF_MARGIN_TOP, PDF_MARGIN_RIGHT);
		$obj_pdf->SetAutoPageBreak(TRUE, PDF_MARGIN_BOTTOM);
		$obj_pdf->SetFont('helvetica', '', 9);
		$obj_pdf->setFontSubsetting(false);
		$obj_pdf->setImageScale(PDF_IMAGE_SCALE_RATIO);
		$obj_pdf->AddPage();
		
		ob_start();
			
			// we can have any view part here like HTML, PHP etc
		$content  = $deatiledDescription;  //ob_get_contents();
		//ob_end_clean();
	
		$obj_pdf->writeHTML($content, true, false, true, false, '');
		
		//$obj_pdf->Output('output.pdf', 'I'); // out put to browser itself.
		
		// for creating Word file.	
		/*
		$phpWord = new \PhpOffice\PhpWord\PhpWord();
		$phpWord->getCompatibility()->setOoxmlVersion(14);
		$phpWord->getCompatibility()->setOoxmlVersion(15);
		*/
		$pdfOutPutFile="./functional-documentation/". $documentTitle .".pdf"; 
		$docOutPutFile="./functional-documentation/". $documentTitle .".docx"; 
		$obj_pdf->Output($pdfOutPutFile, 'F'); // this is for saving to the PDF file.
		 
		 
		 // Saving the document as OOXML file...
		/*
		$objWriter = \PhpOffice\PhpWord\IOFactory::createWriter($phpWord, 'Word2007');
		$objWriter->save($docOutPutFile);
		*/ 
		 
		$id	= $this->input->post('hidID');
		 // inserting or updating into table.
		
		$data = array(
						'DocumentTitle' 			=> $documentTitle,
						'Subject' 					=> $subject,
						'BreafDescription'  		=> $breafDescription,
						'DetailedDocumentContent' 	=> $deatiledDescription,
						'DocumentHeader'			=> $documentHeader,
						'DocumentFooter'			=> $documentFooter,
						'PDFFilePath'				=> $pdfOutPutFile,
						'DocFilePath'				=> $docOutPutFile,
						'Status' 					=> $this->input->post('Status'),
						);
		

		
		if($id	==	0) // if save
		{  
					$data['CreatedBy'] 	= $_SESSION['ADMIN_ID'];
					$data['CreatedOn']	= date('Y-m-d H:i:s');	  
					
		}
		else { // if edit
					$data['ModifiedBy'] 	= $_SESSION['ADMIN_ID'];
					$data['ModifiedOn']		= date('Y-m-d H:i:s');	  
		
			}
		 
		 $this->FnDocument_model->saveData($data,$id);
		 $msg = 'Functional Document successfully created!.';
		 if($id!=0)
		  $msg = 'Functional Document successfully modified!.';
		
 	
		
		$resData = array(
							'status'=>true,
							'msg'	=>$msg,
						);

		echo json_encode($resData);
} 

/*	------------------*--------------------------*---------------*------------------------
// Sandeep : -> 20/11/20,11:50 pm, should be separated by in the  site_helper (system/helper folder).

//	O-> Getting all sys_help_live_documentation table sys_help_live_documentation file to HTML. 
//  O-> Pass here Module name and path file from the view.
//  O-> Conversion One line tool : follow the link : https://www.zamzar.com/convert/doc-to-html5/
//  o-> First to make a document file(doc/docx) file through Word. and convert with the Tool 
		Mension above. And then put it in the 'sys_help_live_documentation' table's field
		'DocumentPath'
		
	**-> Author : Sandeep / Mobile :9633 428 498		
 -----------------------* -----------------------*-----------------*------------------------ */
 
public function getLiveHelpDocumentFile($module, $type)
{
	$db  				= new Database();
    $documentFilePath	= $db->getFieldValueById("sys_help_live_documentation", "DocumentPath", "Module='{$module}' AND Type='{$type}'");
	echo base_url().$documentFilePath;
}

// ============================ filterSearchItem : For Auto Complete For Different Text Box =============
public function filterSearchItem()
{
	//filterSearchItemHelper(); // defined in site_helper
		
		$searchText = isset($_POST['search'])? $_POST['search'] : "" ;
		
		
		if($searchText!=="")
			$searchText = explode("|", $searchText);
        else
		{
			return json_encode(array("ItemName" => false));		   
		}
		
		$SQL ='SELECT Id, REPLACE('.$searchText[2].', "\\\", "") AS ItemName FROM  '.$searchText[1];
		$SQL .=" WHERE ".$searchText[2]." LIKE '%". $searchText[0]."%'";
		if($searchText[1] == 'sys_hsn_master')
			$SQL .=" ORDER BY {$searchText[2]} ASC LIMIT 10";
		else if($searchText[1] == 'client_registration')
			$SQL .=" OR FirstName LIKE '%". $searchText[0]."%' OR LastName LIKE '%". $searchText[0]."%' ORDER BY {$searchText[2]} ASC LIMIT 4";
		else
			$SQL .=" ORDER BY {$searchText[2]} ASC LIMIT 4";
		$res = $this->db->query($SQL);
        echo json_encode($res->result_array());
}

// ============================ filterSearchItemConCat : For Auto Complete For Different Text Box with Two fields concatinated=============
public function filterSearchItemConCat()
{
	//filterSearchItemHelper(); // defined in site_helper
		
		$searchText = isset($_POST['search'])? $_POST['search'] : "" ;
		
		
		if($searchText!=="")
			$searchText = explode("|", $searchText);
        else
		{
			return json_encode(array("ItemName" => false));		   
		}
		
		$SQL ='SELECT Id, CONCAT(REPLACE('.$searchText[2].', "\\\", ""), " (", REPLACE('.$searchText[3].', "\\\", ""),")")  AS ItemName FROM  '.$searchText[1];
		$SQL .=" WHERE ".$searchText[2]." LIKE '%". $searchText[0]."%' OR ".$searchText[3]." LIKE '%". $searchText[0]."%' ";
		$SQL .=" ORDER BY {$searchText[2]} ASC LIMIT 4";
		
		$res = $this->db->query($SQL);
        echo json_encode($res->result_array());
}

// Add these function at the end. 24/12/2020
//---------------- Start : For File Upload Demo Code : Not in the part of the Project, but only for reference for uploading images------------------------

public function file_upload_demo() // view 
	{
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$_SESSION["USER_MODULE_PAGE"]	="Multiple file upload Demo."; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		
		$this->load->view("brq-admin/file-upload_demo", $data);
		
	}
	
function uploadImageProcess() // uploadImage Processing
{
	if(isset($_FILES))
	{
		
		$TotalFiles = $_POST["TotalFiles"];
		//foreach($_FILES as $file)
		for ($i=0;  $i<=$TotalFiles; $i++)
		{
			if(isset($_FILES["file_".$i]))
			{
				// tmp_name | name | type | size | error
				
				// -- Check here type  size and if any error.
				$fileName 	= $_FILES["file_".$i]['name'];
				$imgSize 	= $_FILES["file_".$i]['size'];
						
						// Check file size '5MB' or from max.image byte upload settings, in site settings module.
                        if($imgSize < 5000000){}
					    else{
									$msgError = "Image " . $fileName . " file is too large. Only 5 MB allowed!.";
                                    $errMSG   = "Error : Sorry," .$msgError;
                            }
					
				$tempName	= $_FILES["file_".$i]['tmp_name'];
				$uploadDir	= "./uploads/"; // this would be the upload file path. Exactly specify here or from the settings.
				 
				// move_uploaded_file( $tempName, "./uploads/" . $fileName); 
				 
			    // uploadImage is defined in site_helper (system/helper folder).
				uploadImage($tempName, $uploadDir, "", $fileName, "", "",  FALSE, TRUE, TRUE);	
			
			}	
			
		}
		
	}
	echo "Finished Uploading.";
	
}	
//---------------- End :For File Upload Demo Code : Not in the part of the Project, but only for reference------------------------

//---------------- Start : For Document Upload Demo Code : Not in the part of the Project, but only for reference for uploading documents------------------------

public function document_upload_demo() // view 
	{
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$_SESSION["USER_MODULE_PAGE"]	="Multiple document upload Demo."; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		
		$this->load->view("brq-admin/document-upload_demo", $data);
		
	}

function uploadDocumentProcess() // uploadDocument Processing
{
	if(isset($_FILES))
	{
		
		$TotalFiles = $_POST["TotalFiles"];
		//foreach($_FILES as $file)
		for ($i=0;  $i<=$TotalFiles; $i++)
		{
			if(isset($_FILES["file_".$i]))
			{
				// tmp_name | name | type | size | error
				
				// -- Check here type  size and if any error.
				$fileName 	= $_FILES["file_".$i]['name'];
				$imgSize 	= $_FILES["file_".$i]['size'];
						
						// Check file size '5MB' or from max.image byte upload settings, in site settings module.
                        if($imgSize < 5000000){}
					    else{
									$msgError = "Document " . $fileName . " file is too large. Only 5 MB allowed!.";
                                    $errMSG   = "Error : Sorry," .$msgError;
                            }
					
				$tempName	= $_FILES["file_".$i]['tmp_name'];
				$uploadDir	= "./uploads/"; // this would be the upload file path. Exactly specify here or from the settings.
				 
				// move_uploaded_file( $tempName, "./uploads/" . $fileName); 
				 
			    // uploadDocument is defined in site_helper (system/helper folder).
				uploadDocument($tempName, $uploadDir, "", $fileName, "", "",  FALSE, TRUE, TRUE);	
			
			}	
			
		}
		
	}
	echo "Finished Uploading.";
	
}	
//---------------- End :For File Upload Demo Code : Not in the part of the Project, but only for reference------------------------

//================== 404:Error Redirective  START====================

function _404(){
    $this->load->view("brq-admin/page-error-400");
}
//================== 404:Error Redirective  END====================

//------------- Accounts Module Access Verification For Logined User ------------
function accountLoginVerify()
{
	 $userId 			 = $_POST["userid"];
	 $unlockpass  		 = $_POST["unlockPass"];
	 $userGroupId		 = $_POST["userGroupId"];
	 
	 $res = $this->AdminModel->accountLoginVerify($userId, $unlockpass, $userGroupId);
	 $resData = array();
	 
	 if($res)
	 {
		 $resData    = array(
								"status" => true,
								
							);	
		 
	 }
	 else
	 {
			$resData    = array(
								"status" => false,
								
							);
	 }

	echo json_encode($resData);	
	 
}
	
	
	//========================== Message function  start ==============================
	public function message_inbox()
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	="message-inbox"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$this->load->view("brq-admin/message-inbox", $data);
		
		
		
	}
	
	public function message_compose()
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	="email-compose"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$this->load->view("brq-admin/message-compose", $data);
	
	}
	
	
	public function message_read()
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	="message-read"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$this->load->view("brq-admin/message-read", $data);
		
		
		
	}
	
	//========================== Message function  end ==============================
	
		//========================== Notification function  start ==============================
	// public function notification()
	// {
	// 	if(!$this->isSessionSet())
	// 	{
	// 		$this->index();
	// 		return;
	// 	}
	// 	$fuctionName =  $this->uri->segment(2);
	// 	$db = new Database();
	// 	$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
	// 	$this->isAccessDenied($Id);
	// 	$_SESSION["USER_MODULE_PAGE"]	="notification"; // for lock screen management;
	// 	$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
	// 	$data 					= array();
	// 	$headTitleAddText		= " : Login as ";
	// 	$headTitleAddId			= $_SESSION['ADMIN_ID'];
	// 	$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
	// 	$clientRegId 			  = $_SESSION['CLIENT_REG_ID'];
		
	// 	$client_notificationCount = $db->totalCount("Id", 'client_notifications', " ClientRegId ='$clientRegId' ");
	// 	$data['notificationCount'] =$client_notificationCount;
			
	// 	$this->load->view("brq-admin/notification", $data);
		
	// }

	
	public function notification()
	{
	
		if(!$this->isSessionSet())
		{
			$this->login();
			return;
		}
			$data 					  = array();
			$data["headTitle"] 		  = $this->headTitle ." - notification";
			$data["clientController"] = $this->clientController;
			$db						  = new Database();
			// $clientRegId 			  = $_SESSION['CLIENT_REG_ID'];
			// echo "<script>alert($clientRegId)</script>";
			// $client_notificationCount = $db->totalCount("Id", 'client_notifications', " ClientRegId ='$clientRegId' ");
			$client_notificationCount = $db->totalCount("Id", 'client_notifications');
			// echo "<script>alert($client_notificationCount)</script>";
			$data['notificationCount'] =$client_notificationCount;
			$this->load->view("brq-admin/notification", $data);

	}
	// public function notification_read()
	// {
	// 	if(!$this->isSessionSet())
	// 	{
	// 		$this->index();
	// 		return;
	// 	}
		
	// 	$_SESSION["USER_MODULE_PAGE"]	="message-read"; // for lock screen management;
	// 	$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
	// 	$data 					= array();
	// 	$headTitleAddText		= " : Login as ";
	// 	$headTitleAddId			= $_SESSION['ADMIN_ID'];
	// 	$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
	// 	$this->load->view("brq-admin/notification-read", $data);
	
		
	// }

	public function notification_read($mailId)
	
	{
		if(!$this->isSessionSet())
		{
			$this->login();
			return;
		}
		
		//echo $mailId;
		//exit;
		$data 					  = array();
		$data["headTitle"] 		  = $this->headTitle ." - notification_read".$mailId;
        $data["clientController"] = $this->clientController;
		$data["mailId"]           =$mailId;
		
		
		$this->load->view("brq-admin/notification-read", $data);
	}



	public function sendNotification() {
		$selectedUsers = $this->input->post("user");
		$selectedUsers = explode(",",$selectedUsers);
		
		if(empty($selectedUsers)) {
			$selectedUsers = array("0");
		}
	
		$sendMessage = $this->input->post("sendMessage");
		
		$Subject = $this->input->post("Subject");
		
		$method = $this->input->post("method");
		$templateType = $this->input->post('template_type');
		$file_name = $_FILES['file']['name'];
		if ($file_name != NULL) {
					$temp = $_FILES['file']['tmp_name']; //default storage path for file store
					$new_file_name = time() . $file_name;
					move_uploaded_file($temp, 'uploads/notificationimages/' . $new_file_name);
				}
	
		// Get clients based on selection
		if (in_array(0, $selectedUsers)) {
			// echo "Sending notification to all users";
			// If ToAll is selected, set 'ClientRegId' to 0 and get all clients
			$clients = $this->db->select('*')->from('client_registration')->get()->result();
			$clientRegId = 0;
			$clientEmails = array_column($clients, 'Email');
			$mobileNumber = array_column($clients, 'MobileNo');
			
			$data = [
				'Date' => date('Y-m-d'),
				'Subject' => $Subject,
				'Notification' => $sendMessage,
				'ClientEmail' => implode(',', $clientEmails),
				'ClientRegId' => 0,
				'FullName' => 'To All',
			];
			
			if ($method == "email") {
				$resData = $this->db->insert('client_notifications', $data);
				// $this->notificationEmail($data);
				$this->notificationEmail((object) $data);
				
				echo json_encode(array("status" => true, "message" => "Notification sent successfully"));
				
			}
			
			else if ($method == "whatsapp") {
				// echo "Sending notification to all users";
					$whatsappData = [
						'Date' => date('Y-m-d'),
						'Subject' => $Subject,
						'Message' => $sendMessage,
						'ClientId' => 0,
						'CreatedOn' => date('Y-m-d H:i:s'),
						
					];
					
					$this->db->insert('client_whatsapp_messages', $whatsappData);
					// echo "Message sent successfully";
					echo json_encode(array("status" => true, "message" => "Notification sent successfully"));
			} 
			else if ($method == "sms") {
			
				
				$smsData =[
					'Date' => date('Y-m-d'),
					'Message' => $sendMessage,
					'MobileNo' => implode(',', $mobileNumber),
					'ClientId' => 0,
					'CreatedOn' => date('Y-m-d H:i:s'),

				];
				
				
				$this->db->insert('client_sms_messages', $smsData);
				$this->sendSMS($mobileNumber, $sendMessage,$templateType);
				if ($this->db->error()) {
					// error occurred, do something
					$error = $this->db->error();
					echo "Error: " . $error['message'];
				} else {
					// $this->sendSms($mobileNumber,$sendMessage);
					echo json_encode(array("status" => true, "message" => "Notification sent successfully"));
				}

				$this->sendSms($mobileNumber,$sendMessage);
					// echo "Message sent successfully";
				echo json_encode(array("status" => true, "message" => "Notification sent successfully"));
			}

		} else {
			// echo "Sending notification to selected users";
			// If individual users are selected, loop through the selected users
			// and get only those clients, saving the data for each client with
			// their respective 'ClientRegId'
			$clients = $this->db->select('*')->from('client_registration')->where_in('Id', $selectedUsers)->get()->result();
	
			$clientRegId = implode(',', $selectedUsers);
			$clientEmails = array_column($clients, 'Email');
			$mobileNumber = array_column($clients, 'MobileNo');
			// echo "Client Email(s): " . implode(", ", $clientEmails) . "<br>";
			// echo "Client Email(s): ";
			// print_r($clientEmails);
			$companyNames = array_column($clients, 'CompanyName');
			$fullNames = array_column($clients, 'FirstName');
	
			$data = [
				'Date' => date('Y-m-d'),
				'Subject' => $Subject,
				'Notification' => $sendMessage,
				'ClientEmail' => implode(',', $clientEmails),
				'ClientRegId' => $clientRegId,
				'CompanyName' => implode(',', $companyNames),
				'FullName' =>  implode(',', $fullNames),
			];
	
			if ($method == "email") {
				$resData = $this->db->insert('client_notifications', $data);
				// $this->notificationEmail($data);
				$this->notificationEmail((object) $data);
				echo json_encode(array("status" => true, "message" => "Notification sent successfully"));
				// echo "Notification sent to: " . implode(", ", $clientEmails) . "<br>"; 
			} else if ($method == "whatsapp") {
				// echo "Sending notification via WhatsApp";
				$client = $clients[0];
				$whatsappData = [
					'Date' => date('Y-m-d'),
					'Subject' => $Subject,
					'Message' => $sendMessage,
					'ClientId' => $clientRegId,
					'CreatedBy' => '',
					'CreatedOn' => date('Y-m-d H:i:s'),
					
				];
				$insert_result = $this->db->insert('client_whatsapp_messages', $whatsappData);

					if ($insert_result) {
						echo json_encode(array("status" => true, "message" => "Notification sent successfully"));
					} else {
						$error_msg = "Error sending notification: " . json_encode($whatsappData);
						error_log($error_msg);
						echo json_encode(array("status" => false, "message" => $error_msg));
					}
				
			}
			else if ($method == "sms") {
				
				$smsData =[
					'Date' => date('Y-m-d'),
					'Message' => $sendMessage,
					'ClientId' => $clientRegId,
					'MobileNo' => implode(',', $mobileNumber),
					'CreatedOn' => date('Y-m-d H:i:s'),
				];
				$this->db->insert('client_sms_messages', $smsData);
				$this->sendSMS($mobileNumber, $sendMessage,$templateType);

					// echo "Message sent successfully";
				echo json_encode(array("status" => true, "message" => "Notification sent successfully"));
		}
	}
	}		
	
	//========================== Notification function  end ==============================

	//==============Calendar function Start=========Kamarudheen=============
	
	public function calendar()
	{
		$data 					 = array();
		$data["headTitle"] 		 = $this->headTitle;
        $data["adminController"] = $this->adminController;
		$db			 			 = new Database();
		
		$userGroup   = $db->fillCombo("sys_user_group", "UserGroup", "...Choose...", "", "Id", "Status='Active'", "UserGroup");
		$data["userGroup"] 	= $userGroup;
		$db					=null;
		$this->load->view("brq-admin/calendar", $data);
		
	}
	
	//==============End Calendar function ======================
	
	public function quitFromAccounts()
	{
		// this function is for quiting from the accounts module.
		$_SESSION["Account_Login_Verified"]=0;
		
		echo json_encode(array("status"=>true, "message" => "Successfully logout from accounts module!."));
		
	}
	
	// -------------------------- Payroll module start ----------------
	public function salary_components($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$moduleTab="HR";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		$data["subMenuId"]		=	$id;
		$this->load->view("brq-admin/payroll-salary", $data);
	} 
	//==================================== salaryTypeList function to get DataTables of salary component types  - by Sajitha ================================
	public function salaryTypeList($subid="")
	{
        $list 	= $this->PayrollSalaryType_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$row[] = $data->Code;
			$row[] = $data->Name;
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			if($data->ModifiedOn != Null)
				$row[] =  date('d/m/Y h:i:s a', strtotime($data->ModifiedOn));
			else 
				$row[] =  '';
			
			$row[] =  $data->ModifiedBy;
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			$actions = '<div class="btn-group" >'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"  aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{

				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editType('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			 }
			if(in_array($copy,$userGroupPermission)||in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editType('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{

				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteType('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			 }
			 $actions.=' </div>'
	                  .'</div>';
			
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->PayrollSalaryType_model->countAll(),
						"recordsFiltered" => $this->PayrollSalaryType_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}  
 	
	//==================================== saveSalaryType function for Saving Salary Component Type - by Sajitha ================================
	public function saveSalaryType()
	{
		$id				= $this->input->post("hidID");
		$data 			= array();  
		$code  			= $this->input->post('Code');
		$typeName 		= $this->input->post('Name');
		$status 		= $this->input->post('Status');
		
		//if($id == 0) {
			$db  			= new Database();
			$where   		= "( UPPER(Code)='".strtoupper($code)."' or Name='{$typeName}' ) and Id!={$id}";
			$res 			= $db->checkExistance("prl_salary_component_types", $where); // if exists id value will be returned.
		
			if($res)
			{
				echo json_encode(
									array("status" => false, 
										  "message"=>"This salary component type name is already created and exists! Please change the salary component name."
										 )
								);
				exit;
			}
		//}
		if($id==0) // if add
		{    
			$data = array(
						'Code' => $code,
						'Name' => $typeName,
						'Status' => $status,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
				
		}
		else { // if edit
				$data = array(
						'Code' => $code,
						'Name' => $typeName,
						'Status' => $status,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s')						
						);
		}
		$res	= $this->PayrollSalaryType_model->saveData($data, $id);
		
		if($id==0) // if add
		{
			//Incrementing the LastNumber by 1 for SALARY_COMPONENT in sys_setnumber table after inserting Salary Component Type
			$db   	= new Database();
			$data  	= array('SALARY_COMPONENT', '1');  // to increment second parameter should 1
			$db->callProcedure("getNumberPRO", $data, TRUE);  //  last parameter is TRUE for get the output.
		}
		
		$db = new BrqDatabase();
		$resCombo = $db->getSalaryComponentTypeCombo();
		$resData  = array(
							"status" => true,
							'message' => 'Salary component type saved successfully!!',
							'refreshSalaryType' => $resCombo
						 );	
		echo json_encode($resData);
	}
		
	//==================================== getEditSalaryType function for getting details of Salary Component Type by Id- by Sajitha ================================
	public function getEditSalaryType($id) {
		$data = $this->PayrollSalaryType_model->getById($id);
		echo json_encode($data);
	}	
	
	//====================================Function to delete Salary component type by Id ================================
	public function deleteSalaryType($id)
	{
		$res=  $this->PayrollSalaryType_model->deleteData($id);
	    $resData =array();
	   if($res['status'])
	   {
		    $db = new BrqDatabase();
			$resCombo = $db->getSalaryComponentTypeCombo();
			$resData    = array(
								"status" => true,
								'message' => 'Salary component Type deleted successfully!!',
								'refreshSalaryType' => $resCombo
						 );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
	   echo json_encode($resData); 
	}   
	
	//==================================== salaryComponentList function to get DataTables of salary components  - by Sajitha ================================
	public function salaryComponentList($subid="")
	{
        $list 	= $this->PayrollSalary_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();
			$row[] = $data->Name;
			$typeName	= $db->getFieldValueById("prl_salary_component_types", "Name", "Id='{$data->TypeId}'");
			$row[] = $typeName;
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			if($data->ModifiedOn != Null)
				$row[] =  date('d/m/Y h:i:s a', strtotime($data->ModifiedOn));
			else 
				$row[] =  '';
			
			$row[] =  $data->ModifiedBy;
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			$actions = '<div class="btn-group" >'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"  aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
			
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editSalary('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission)||in_array($copy,$userWisePermission))
			{
			
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editSalary('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			 }
			 if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			 {
			 
				 $actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteSalary('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			 }
			 $actions .=' </div>'
	                  .'</div>';
			
		  	$row[] 	= $actions;	 
			$data1[]= $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->PayrollSalary_model->countAll(),
						"recordsFiltered" => $this->PayrollSalary_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}  


	
	//==================================== saveSalaryComponent function for Saving Salary Component - by Sajitha ================================
	public function saveSalaryComponent()
	{
        $id				= $this->input->post("hidID");
		$data 			= array();  
		$name  			= $this->input->post('Name');
		$type	 		= $this->input->post('Type');
		$details	 	= $this->input->post('Details');
		$status 		= $this->input->post('Status');
		
		//if($id == 0) {
			$db  			= new Database();
			$where   		= "( UPPER(Name)='".strtoupper($name)."' ) and Id!={$id}";
			$res 			= $db->checkExistance("prl_salary_components", $where); // if exists id value will be returned.
		
			if($res)
			{
				echo json_encode(
									array("status" => false, 
										  "message"=>"This salary component name is already created and exists! Please change the salary component name."
										 )
								);
				exit;
			}
		//}
		if($id==0) // if add
		{    
			$data = array(
						'Name' => $name,
						'TypeId' => $type,
						'Status' => $status,
						'Details' => $details,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
				
		}
		else { // if edit
				$data = array(
						'Name' => $name,
						'TypeId' => $type,
						'Status' => $status,
						'Details' => $details,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s')						
						);
		}
		$res	= $this->PayrollSalary_model->saveData($data, $id);
	   		
		$db = new BrqDatabase();
		$resCombo = $db->getSalaryComponentCombo();
		$resData  = array(
							"status" => true,
							'message' => 'Salary component saved successfully!!',
							'filterSalaryComponent' => $resCombo
						 );	
		echo json_encode($resData);
	} 
	
	//==================================== getEditSalaryComponent function for getting details of Salary Component by Id- by Sajitha ================================
	public function getEditSalaryComponent($id) {
		$data = $this->PayrollSalary_model->getById($id);
		echo json_encode($data);
	} 
	
	//====================================Function to delete Salary component by Id ================================
	public function deleteSalaryComponent($id)
	{
		$res=  $this->PayrollSalary_model->deleteData($id);
	   $resData =array();
	   if($res['status'])
	   {
		    $db = new BrqDatabase();
			$resCatCombo = $db->getSalaryComponentCombo();
			$resData    = array(
								"status" => true,
								'message' => 'Salary component deleted successfully!!',
								'filterSalaryComponent' => $resCatCombo
						 );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
	   echo json_encode($resData);  
	}  
	
	//==================================== employeeSalaryComponentList function to get DataTables of employee salary components  - by Sajitha ================================
	public function employeeSalaryComponentList($subid="")
	{
        $employeeId  		= $this->input->post('employeeId');
		$salaryComponent 	= $this->input->post('salaryComponent');
		$branch				= $this->input->post('branch');
		$department			= $this->input->post('department');
		$list 				= $this->PayrollEmployeeSalary_model->getDataTables($employeeId,$salaryComponent,$branch,$department);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			
			
			$id 			= $data->Id;
			$row 			= array();
			$db = new Database();
			$employeeFirstName	= $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'");
			$employeeLastName	= $db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");
			$profilePhotoPath	= $db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'");
			$profilePhoto		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$data->EmployeeId}'");
			$sex	= $db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'");
			$profilePath 	= base_url().$profilePhotoPath.'thumb/';
			$mainPhoto		= $profilePhoto;
			if($mainPhoto == '') {
				if($sex == "Male")
					$mainPhoto 	= "male.png";
				else
					$mainPhoto 	= "female.png";
			}
			
			$profilePhotoLarge 	= base_url().$profilePhotoPath.$mainPhoto;
			$profilePhoto 	= $profilePhoto;
			if(!(file_exists($profilePhotoPath.'thumb/'.$profilePhoto)) || $profilePhoto == '') {
				if($sex == "Male")
					$profilePhoto 	= "male.png";
				else
					$profilePhoto 	= "female.png";
			}
			$profilePhoto 	= $profilePath.$profilePhoto;
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$employeeFirstName." ".$employeeLastName.'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';
			$row[] = $db->getFieldValueById("employee_master", "Code", "Id='{$data->EmployeeId}'");;
			$branchId	= $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
			$depId	= $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
			$row[] = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");	
			$row[] = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");	
			
			$row[] 				= $employeeFirstName." ".$employeeLastName;
			
			$salaryName			= $db->getFieldValueById("prl_salary_components", "Name", "Id='{$data->SalaryComponentId}'");
			$row[] = $salaryName;
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			$actions = '<div class="btn-group" >'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"  aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
			
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editEmployeeSalary('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			 }
			 if(in_array($copy,$userGroupPermission)||in_array($copy,$userWisePermission))
			 {
			 
				 $actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editEmployeeSalary('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			 }
			 if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			 {
			 
				 $actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteEmployeeSalary('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			 }
			 	$actions.=' </div>'
	                  .'</div>';
			
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->PayrollEmployeeSalary_model->countAll(),
						"recordsFiltered" => $this->PayrollEmployeeSalary_model->countFiltered($employeeId,$salaryComponent,$branch,$department),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	} 
	//==================================== saveEmployeeSalaryComponent function for Saving Employee Salary Component - by Sajitha ================================
	public function saveEmployeeSalaryComponent()
	{
        $id				= $this->input->post("hidID");
		$data 			= array();  
		$employeeId  	= $this->input->post('EmployeeId');
		$salaryComponent = $this->input->post('SalaryComponent');
		$amount  		= $this->input->post('Amount');
		$details	 	= $this->input->post('Details');
		$status 		= $this->input->post('Status');
		$mode 			= $this->input->post('Mode');
		$effectiveDate 	= '';
		if($this->input->post('EffectiveDate')) {
			$effectiveDate 	= $this->input->post('EffectiveDate');
			$effectiveDate  = str_replace('/', '-', $effectiveDate);
			$effectiveDate 	= date('Y-m-d',(strtotime($effectiveDate)));
		}
		//if($id == 0) {
			$db  			= new Database();
			$where   		= "( UPPER(Name)='".strtoupper($name)."' ) and Id!={$id}";
			$res 			= $db->checkExistance("prl_employee_salary_components", $where); // if exists id value will be returned.
		
			if($res)
			{
				echo json_encode(
									array("status" => false, 
										  "message"=>"This employee salary component name is already created and exists! Please change the salary component name."
										 )
								);
				exit;
			}
		//}
		if($id==0) // if add
		{    
			$data = array(
						'EmployeeId' => $employeeId,
						'SalaryComponentId' => $salaryComponent, 
						'Amount' => $amount,
						'Status' => $status,
						'Details' => $details,
						'Mode' => $mode,
						'EffectiveDate' => $effectiveDate,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
				
		}
		else { // if edit
				$data = array(
						'EmployeeId' => $employeeId,
						'SalaryComponentId' => $salaryComponent, 
						'Amount' => $amount,
						'Status' => $status,
						'Details' => $details,
						'Mode' => $mode,
						'EffectiveDate' => $effectiveDate,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s')						
						);
		}
		$res	= $this->PayrollEmployeeSalary_model->saveData($data, $id);
	   		
		/*$db = new BrqDatabase();
		$resCombo = $db->getServiceNameCombo();*/
		$resData  = array(
							"status" => true,
							'message' => 'Employee Salary component saved successfully!!',
							//'filterService' => $resCombo
						 );	
		echo json_encode($resData);
	}  
	
	//==================================== getEditEmpSalaryComponent function for getting details of Employee Salary Component by Id- by Sajitha ================================
	public function getEditEmpSalaryComponent($id) {
		$data = $this->PayrollEmployeeSalary_model->getById($id);
		$resData = array();
		$db = new Database();			
		$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
		$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
	    $resData = array(
						"BranchId" => $branchId,
						"DepId" => $depId
				 );
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData);
	} 
	
	//====================================Function to delete Employee Salary component by Id ================================
	public function deleteEmpSalaryComponent($id)
	{
		$res=  $this->PayrollEmployeeSalary_model->deleteData($id);
	   
       $resData =array();
	   if($res)
	   {
		   		   
		   $resData=array(
					"status"=>true,
					"message"=>"Employee Salary component deleted successfully!!"
				   );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Employee Salary component!!"
				   );
		   
	   }
	   echo json_encode($resData);  
	}  
	
	// getSalaryComponentCode function is called when adding a Salary Component Type to get the 'code' filled with Last Salary Component Type Code + 1
	// getting salary component type code, by calling the stored proceedure getNumberPRO
	public function getSalaryComponentCode() //calling the stored procedure, to get number.
	{
		$db   	= new Database();
		$data  	= array('SALARY_COMPONENT', '0');  // to increment second parameter should 1
		$salComponent 	= $db->callProcedure("getNumberPRO", $data, TRUE);  //  last parameter is TRUE for get the output.
		if($salComponent)
		{
		   		   
		   $resData=array(
					"status"=>true,
					"message"=>"Success!!",
					"salComponent"=>$salComponent
				   );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, No record for salary component type code!!"
				   );
		   
	   }
	   echo json_encode($resData);  
	}

	
	// getSalaryReimbursementApplicationCode function is called when adding a Salary Reimbursement Application to get the 'code' filled with Last Salary Reimbursement Application Code + 1
	// getting Salary Reimbursement Application code, by calling the stored proceedure getNumberPRO
	public function getSalaryReimbursementApplicationCode() //calling the stored procedure, to get number.
	{
		$db   	= new Database();
		$data  	= array('REIMBURSEMENT_APPLICATION', '0');  // to increment second parameter should 1
		$reimApplication 	= $db->callProcedure("getNumberPRO", $data, TRUE);  //  last parameter is TRUE for get the output.
		if($reimApplication)
		{
		   		   
		   $resData=array(
					"status"=>true,
					"message"=>"Success!!",
					"reimApplication"=>$reimApplication
				   );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, No record for Salary Reimbursement Application code!!"
				   );
		   
	   }
	   echo json_encode($resData);  
	}
	
	// -------------------------- Employee Attendance module start ----------------
	public function employee_attendance($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$moduleTab="monitor_attendance";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]		= $id;
		$data["moduleTab"]		= $moduleTab; // product or product_category
		
		$this->load->view("brq-admin/employee-attendance", $data);
	} 


	//==================================== monitorAttendanceList function to get DataTables of monitor attendance  - by Sajitha ================================
	public function monitorAttendanceList($subid="")
	{
		
        $employeeId  	= $this->input->post('employee');
		$branch			= $this->input->post('branch');
		$department		= $this->input->post('department');
		$atteDate		= $this->input->post('atteDate');
		$list 			= $this->MonitorAttendance_model->getDataTables($employeeId,$atteDate,$branch,$department);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			
			
			$id 			= $data->Id;
			$row 			= array();
			$db = new Database();
			$employeeFirstName	= $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'");
			$employeeLastName	= $db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");
			$profilePhotoPath	= $db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'");
			$profilePhoto	= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$data->EmployeeId}'");
			$sex	= $db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'");
			$profilePath 	= base_url().$profilePhotoPath.'thumb/';
			$mainPhoto		= $profilePhoto;
			if($mainPhoto == '') {
				if($sex == "Male")
					$mainPhoto 	= "male.png";
				else
					$mainPhoto 	= "female.png";
			}
			
			$profilePhotoLarge 	= base_url().$profilePhotoPath.$mainPhoto;
			$profilePhoto 	= $profilePhoto;
			if(!(file_exists($profilePhotoPath.'thumb/'.$profilePhoto)) || $profilePhoto == '') {
				if($sex == "Male")
					$profilePhoto 	= "male.png";
				else
					$profilePhoto 	= "female.png";
			}
			$profilePhoto 	= $profilePath.$profilePhoto;
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$employeeFirstName." ".$employeeLastName.'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';
			$row[] = $db->getFieldValueById("employee_master", "Code", "Id='{$data->EmployeeId}'");;
			$branchId	= $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
			$depId	= $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
			$row[] 				= $employeeFirstName." ".$employeeLastName;
			$row[] = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");	
			$row[] = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");	
			
			$row[] = date('d/m/Y h:i:s a', strtotime($data->TimeIn));
			if($data->TimeOut)
				$row[] = date('d/m/Y h:i:s a', strtotime($data->TimeOut));
			else	
				$row[] = '<span style="color:red;">Not clocked out!</span>';
			
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;

			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);

			$actions = '<div class="btn-group" >'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editMonitorAttendance('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';

					}
			if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editMonitorAttendance('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';

					}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteMonitorAttendance('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			$actions .=' </div>'
	                  .'</div>';
			
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->MonitorAttendance_model->countAll(),
						"recordsFiltered" => $this->MonitorAttendance_model->countFiltered($employeeId,$atteDate,$branch,$department),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	} 

	//==================================== saveEmployeeMonitorAttendance function for Saving Employee Monitor Attendance - by Sajitha ================================
	public function saveMonitorAttendance()
	{
        $id				= $this->input->post("hidID");
		$signOutIP 		= '';
		$clockedInStatus = 'Clocked In';
		$data 			= array();  
		$employeeId  	= $this->input->post('EmployeeId');
		$timeIn 		= strtotime(str_replace('-', ' ', $this->input->post('Time_In')));
		$effectiveDate 	= date('Y-m-d',$timeIn);
		$timeIn 		= date('Y-m-d H:i:s',$timeIn);
		
		if($this->input->post('Time_Out')) {
			$timeOut  		= strtotime(str_replace('-', ' ', $this->input->post('Time_Out')));
			$timeOut 		= date('Y-m-d H:i:s',$timeOut);
			$signOutIP    	= getRequestIPAddress();
			$clockedInStatus = 'Clocked Out';
		}
		
		$notes	 		= $this->input->post('Notes');
		$status 		= $this->input->post('Status');
		$signInIP    	= getRequestIPAddress();
		
		if($this->input->post('Time_Out')) {		
			$timeInStr 		= strtotime($timeIn);
			$timeOutStr		= strtotime($timeOut);
			$diff 			= $timeOutStr - $timeInStr;
			if($diff < 0)
			{
				echo json_encode(
									array("status" => false, 
										  "message"=>"The 'Time-Out' time should be more than the 'Time-In' time."
										 )
								);
				exit;
			}	
		}
		$db  			= new Database();
		$where   		= "EmployeeId='".$employeeId."' and CAST(TimeIn AS DATE)='".date('Y-m-d',strtotime(str_replace('-', ' ', $this->input->post('Time_In'))))."' and Id!={$id}";
		$res 			= $db->checkExistance("prl_employee_attendance", $where); // if exists id value will be returned.
	
		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This employee attendance is already exists for the date - ".$this->input->post('Time_In')."!"
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'EmployeeId' => $employeeId,
						'TimeIn' => $timeIn, 
						'TimeOut' => $timeOut,
						'SignInIP' => $signInIP,
						'SignOutIP' => $signOutIP,
						'Status' => $status,
						'Note' => $notes,
						'EffectiveDate' => $effectiveDate,
						'ClockedInStatus' => $clockedInStatus,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
				
		}
		else { // if edit
				$data = array(
						'EmployeeId' => $employeeId,
						'TimeIn' => $timeIn, 
						'TimeOut' => $timeOut,
						'SignInIP' => $signInIP,
						'SignOutIP' => $signOutIP,
						'Status' => $status,
						'Note' => $notes,
						'EffectiveDate' => $effectiveDate,
						'ClockedInStatus' => $clockedInStatus,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s')					
						);
		}
		
		$res	= $this->MonitorAttendance_model->saveData($data, $id);
	   		
		$resData  = array(
							"status" => true,
							'message' => 'Monitor Attendance saved successfully!!',
							//'filterService' => $resCombo
						 );	
		echo json_encode($resData);
	}  
	
	//=========================== getEditMonitorAttendance function used for getting a Monitor Attendance details by id from prl_employee_attendance table===========================	 
	public function getEditMonitorAttendance($id)
	{
		$data = $this->MonitorAttendance_model->getById($id);
		$resData = array();
		$db = new Database();			
		$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
		$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
	    $resData = array(
						"BranchId" => $branchId,
						"DepId" => $depId
				 );
		$resData = (object) array_merge((array) $resData, (array) $data);
		echo json_encode($resData);
	}
	
	
	//=========================== deleteMonitorAttendance function used for deleting Monitor Attendance details by id from prl_employee_attendance table===========================	 
	public function deleteMonitorAttendance($id)
	{
       $res    =  $this->MonitorAttendance_model->deleteData($id);
       	   
	   $resData =array();
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$moduleTab="monitor_attendance";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		
	   if($res['status'])
	   {
			$resData    = array(
								"status" => true,
								'message' => 'Monitor Attendance deleted successfully!!'
						 );	
		}
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
	   
		echo json_encode($resData); 
    }    
	
	//==================================== clockedInStatusList function to get DataTables of Current Clocked In Status of Employees  - by Sajitha ================================
	public function clockedInStatusList()
	{
        $employeeId  	= $this->input->post('currentemployee');
		$branch			= $this->input->post('currentbranch');
		$department		= $this->input->post('currentdepartment');
		$atteDate		= date('d/m/Y');
		$list 			= $this->MonitorAttendance_model->getDataTables($employeeId,'',$branch,$department,TRUE);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
						
			$id 			= $data->Id;
			$row 			= array();
			$db = new Database();
			$employeeFirstName	= $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'");
			$employeeLastName	= $db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");
			$profilePhotoPath	= $db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'");
			$profilePhoto		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$data->EmployeeId}'");
			$sex			= $db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'");
			$profilePath 	= base_url().$profilePhotoPath.'thumb/';
			$mainPhoto		= $profilePhoto;
			if($mainPhoto == '') {
				if($sex == "Male")
					$mainPhoto 	= "male.png";
				else
					$mainPhoto 	= "female.png";
			}
			
			$profilePhotoLarge 	= base_url().$profilePhotoPath.$mainPhoto;
			$profilePhoto 	= $profilePhoto;
			if(!(file_exists($profilePhotoPath.'thumb/'.$profilePhoto)) || $profilePhoto == '') {
				if($sex == "Male")
					$profilePhoto 	= "male.png";
				else
					$profilePhoto 	= "female.png";
			}
			$profilePhoto 	= $profilePath.$profilePhoto;
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$employeeFirstName." ".$employeeLastName.'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';
			$row[] = $db->getFieldValueById("employee_master", "Code", "Id='{$data->EmployeeId}'");;
			$branchId	= $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
			$depId	= $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
			$row[] = $employeeFirstName." ".$employeeLastName;
			$row[] = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");	
			$row[] = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");
			
			if($data->ClockedInStatus == 'Clocked In' && $atteDate == date('d/m/Y', strtotime($data->EffectiveDate))) {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Clocked In</span>";
			} else if($data->ClockedInStatus == 'Clocked Out' && $atteDate == date('d/m/Y', strtotime($data->EffectiveDate))) {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Clocked Out</span>";
			} else {
				$statusClass = "label label-danger";
				$row[] = "<span class='" . $statusClass . "'>Not Clocked In</span>";	
			}	
			
		  	if($data->ClockedInStatus == 'Clocked In' && $atteDate == date('d/m/Y', strtotime($data->EffectiveDate))) {
				$statusClass = "online-button-green";
				$row[] = "<div class='" . $statusClass . "'></div>";
			} else if($data->ClockedInStatus == 'Clocked Out' && $atteDate == date('d/m/Y', strtotime($data->EffectiveDate))) {
				$statusClass = "online-button-yellow";
				$row[] = "<div class='" . $statusClass . "'></div>";
			} else {
				$statusClass = "online-button-red";
				$row[] = "<div class='" . $statusClass . "'></div>";	
			}		 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->MonitorAttendance_model->countAll(),
						"recordsFiltered" => $this->MonitorAttendance_model->countFiltered($employeeId,'',$branch,$department,TRUE),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}  
	
	// -------------------------- salary_reimbursement function to add/edit/delete all the Salary Reimbursement  details and Salary Reimbursement Application details ----------------
	public function salary_reimbursement($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	"Salary Reimbursement"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data['subMenuId']		= $id;
		$this->load->view("brq-admin/salary-reimbursement", $data);
	}	
	
	//==================================== reimbursementHeadList function to get DataTables of Salary Reimbursement Head  - by Sajitha ================================
	public function reimbursementHeadList($subid="")
	{
        $list 			= $this->SalaryReimbursementHead_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			
			
			$id = $data->Id;
			$row = array();
			$db = new Database();
			$accountType = $db->getFieldValueById("acc_account_type", "Category", "Id='{$data->AccountHeadId}'");
			$row[] = $accountType;
			$row[] = $data->ReimbursementHead;
			
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			if($data->ModifiedOn == null)
				$row[] = '';
			else
				$row[] = date('d/m/Y h:i:s a', strtotime($data->ModifiedOn));
			$row[] =  $data->ModifiedBy;

			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
		
			$actions = '<div class="btn-group" >'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"  aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editReimbursementHead('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';

			}
			if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editReimbursementHead('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteReimbursementHead('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			$actions .=' </div>'
	                  .'</div>';
			
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->SalaryReimbursementHead_model->countAll(),
						"recordsFiltered" => $this->SalaryReimbursementHead_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}  


	//==================================== saveReimbursementHead function for Saving Salary Reimbursement Head details - by Sajitha ================================
	public function saveReimbursementHead()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$accountHead  			= $this->input->post('Account_Head');
		$reimbursementHead  	= $this->input->post('Reimbursement_Head');
		$description  			= $this->input->post('Description');
		$status 				= $this->input->post('Head_Status');
		
		$db  			= new Database();
		$where   		= " UPPER(`ReimbursementHead`)='".strtoupper($reimbursementHead)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("prl_salary_reimbursement_head", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Salary Reimbursement Head Details is already created! Please change the Salary Reimbursement Head."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'AccountHeadId' => $accountHead,
						'ReimbursementHead' => $reimbursementHead,
						'Status' => $status,
						'Description' => $description,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'AccountHeadId' => $accountHead,
						'ReimbursementHead' => $reimbursementHead,
						'Status' => $status,
						'Description' => $description,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		
		$res		 = $this->SalaryReimbursementHead_model->saveData($data, $id);
		$db 		 = new BrqDatabase();
		$resHeadCombo = $db->getSalaryHeadCombo();
		$resData     = array(
								"status" => true,
								'message' => 'Salary Reimbursement Head saved successfully!!',
								'filterHeadName' => $resHeadCombo
						 );	
		
		echo json_encode($resData);
	}	
	
	//=========================== getEditReimbursementHead function used for getting a Salary Reimbursement Head Details by id from prl_salary_reimbursement_head table===========================	 
	public function getEditReimbursementHead($id)
	{
		$data = $this->SalaryReimbursementHead_model->getById($id);
		
		echo json_encode($data);
	} 
	
	//=========================== deleteReimbursementHead function used for deleting Salary Reimbursement Head details by id from prl_salary_reimbursement_head table===========================	 
	public function deleteReimbursementHead($id)
	{
       $res    =  $this->SalaryReimbursementHead_model->deleteData($id);
       	   
	   $resData =array();
	   
	   if($res['status'])
	   {
			$resData    = array(
								"status" => true,
								'message' => 'Salary Reimbursement Head deleted successfully!!'
						 );	
		}
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
	    
		echo json_encode($resData); 
    }   

	//====================================reimbursementApplicationList function to get DataTables of Salary Reimbursement Application  - by Sajitha ================================

	public function reimbursementApplicationList($subid="")
	{
		$employeeId  	= $this->input->post('employeeId');
		$branch			= $this->input->post('branch');
		$department		= $this->input->post('department');
		$headId			= $this->input->post('headId'); 
		$filterStatus	= $this->input->post('filterStatus');
		if($this->input->post('filterClaimDate')) {		
			$claimDate 		= $this->input->post('filterClaimDate');
			$claimDate 		= str_replace('/', '-', $claimDate);
			$filterClaimDate = date('Y-m-d',(strtotime($claimDate)));
		}
		$list 			= $this->SalaryReimbursementApplication_model->getDataTables($employeeId,$branch,$department,$headId,$filterStatus,$filterClaimDate);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start'];
		//$no=1;
		
		foreach ($list as $data) {
		
			$actions	 = "";
			$statusClass 	= "label label-danger";
			$statusText	 	= "Verified";
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$db = new Database();
			$profilePath 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/';
			$mainPhoto		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$data->EmployeeId}'");
			if($mainPhoto == '') {
				if($db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'") == "Male")
					$mainPhoto 	= "male.png";
				else
					$mainPhoto 	= "female.png";
			}
			
			$profilePhotoLarge 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").$mainPhoto;
			$profilePhoto 	= $profilePath.$mainPhoto;
			if(!(file_exists($db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/'.$mainPhoto)) || $mainPhoto == '') {
				if($db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'") == "Male")
					$profilePhoto 	= $profilePath."male.png";
				else
					$profilePhoto 	= $profilePath."female.png";
			}
			$row[] 		= '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'").'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';			
			$row[] 		= $data->AppCode;
			$row[] 		= $db->getFieldValueById("employee_master", "Code", "Id='{$data->EmployeeId}'");
			
			$firstName 	= $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'");
			$lastName 	= $db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");
			$row[] 		= $firstName." ".$lastName;
			$branchId 	= $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
			$branchName = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");
			$row[]		= $branchName;
			$depId 		= $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
			$depName 	= $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");
			$row[] 		= $depName;
			$row[] 		= $db->getFieldValueById("prl_salary_reimbursement_head", "ReimbursementHead", "Id='{$data->SalaryHeadId}'");
			$row[] 		= $data->VoucherNumber;
			$row[] 		= $data->ClaimAmount;
			
			if($data->SanctionedAmount != 0)
				$row[] 	= $data->SanctionedAmount;
			else 
				$row[] 	= '';
			
			if($data->Status=="Verified")
			{
				$statusClass = "label label-info";
				$statusText  = "Verified";
			} else if($data->Status=="Approved") {
				$statusClass = "label label-success";
				$statusText  = "Approved";
			}	
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			
			//add html for action

			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$approve = "Sub_App_".$subid;
			$accept = "Sub_Accept_".$subid;
			$reject = "Sub_Reject_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
				
			$actions = '<div class="btn-group" >'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
					  if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
					  {
				
						$actions .='<div class="dropdown-menu" role="menu" style="">';
						if($data->VerifiedId == 0 && $data->Status != 'Rejected') {		  
							$actions .= '<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editReimbursementApplication('."'".$data->Id."'".',false,false,false,false)"><span class="fa fa-edit"></span> Edit</a>'
								.'<div class="dropdown-divider"></div>';
						}
					}
					if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
					{
						$actions .='<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editReimbursementApplication('."'".$data->Id."'".', true,false,false,false);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
					}
					if(in_array($accept,$userGroupPermission) || in_array($accept,$userWisePermission))
					{
						
						if($data->VerifiedId == 0 && $data->Status != 'Rejected') {			  
						$actions .= '<div class="dropdown-divider"></div>'
					 	 .'<a id="acceptButton"  class="dropdown-item text-info dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Accept Application"  onclick="editReimbursementApplication('."'".$data->Id."'".', false,true,true,false);"><span class="fa fa-check text-fanger"></span> Accept Application</a>';
						}
					}
					if(in_array($reject,$userGroupPermission) || in_array($reject,$userWisePermission))
					{
						
						if((($_SESSION['ADMIN_USER_TYPE'] == 'SUPER ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'ADMIN') || ($data->ApprovedId == 0 and $data->VerifiedId == 0)) and $data->Status != 'Rejected') {
							$actions .= '<div class="dropdown-divider"></div>'
									.'<a id="rejectButton"  class="dropdown-item text-primary dropdown-item-auto-width" href="javascript:void(0)" title="Click to Reject" onclick="rejectReimbursementApplication('."'".$data->Id."'".')"><span class="fa fa-times"></span> Reject</a>';
						}       
					}  
					if(in_array($approve,$userGroupPermission) || in_array($approve,$userWisePermission))
					{
					
						if(($_SESSION['ADMIN_USER_TYPE'] == 'SUPER ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'ADMIN') and $data->ApprovedId == 0 and $data->VerifiedId != 0 and $data->Status == 'Verified' && $data->Status != 'Rejected') {		  
							$actions .= '<div class="dropdown-divider"></div>'
										.'<a id="approveButton"  class="dropdown-item text-info dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Approve Application"  onclick="editReimbursementApplication('."'".$data->Id."'".',false,false,false,true);"><span class="fa fa-thumbs-up text-fanger"></span> Approve Application</a>';
						}
					}
					if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
					{		  
						// if($_SESSION['ADMIN_USER_TYPE'] == 'SUPER ADMIN' || $_SESSION['ADMIN_USER_TYPE'] == 'ADMIN') {		  
							$actions .= '<div class="dropdown-divider"></div>'
								.'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteReimbursementApplication('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
						// }
					}
			
	        $actions .= ' </div>'
	                  .'</div>';
			$row[] = $actions; 
			
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->SalaryReimbursementApplication_model->countAll(),
						"recordsFiltered" => $this->SalaryReimbursementApplication_model->countFiltered($employeeId,$branch,$department,$headId,$filterStatus,$filterClaimDate),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}	
	



	
	//=========================== getEditReimbursementApplication function used for getting a Salary Reimbursement Application Details by id from prl_salary_reimbursement_application table===========================	 
	public function getEditReimbursementApplication($id)
	{
		$data = $this->SalaryReimbursementApplication_model->getById($id);
		
		$this->db->from('prl_salary_reimbursement_documents');
		$this->db->where('DocumentId',$id);
		$query = $this->db->get();
		$rowcount = $query->num_rows();
		
		$db  			= new Database();
		$fileDescr 		= $db->getFieldValueById("prl_salary_reimbursement_documents", "FileDesc", "DocumentId='{$id}'");
		
		$resDataDoc = array(
						"FileDetailsCount" => $rowcount,
						"FileDesc"		   => $fileDescr
					 );
		
		$resData = array();
		$db = new Database();			
		$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
		$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
	    $resData = array(
						"BranchId" => $branchId,
						"DepId" => $depId
				 );
		$resData = (object) array_merge((array) $resData,(array) $resDataDoc, (array) $data);
		echo json_encode($resData);
	} 
	
	//==================================== saveReimbursementApplication function for Saving Salary Reimbursement Application details - by Sajitha ================================
	public function saveReimbursementApplication()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$employeeId  			= $this->input->post('EmployeeId');
		$salaryHead  			= $this->input->post('Salary_Head');
		$appCode  				= $this->input->post('App_Code');
		$claimAmount  			= $this->input->post('Claim_Amount');
		$sanctionedAmount  		= $this->input->post('Sanctioned_Amount');
		$claimDate 				= $this->input->post('Claim_Date');
		$claimDate 				= str_replace('/', '-', $claimDate);
		$claimDate 				= date('Y-m-d',(strtotime($claimDate)));
		$remarks 				= $this->input->post('Remarks');
		$status 				= $this->input->post('Status');
		$voucherNumber 			= $this->input->post('VoucherNumber');
		$verifyFlag 			= $this->input->post('VerifyFlag');
		$approveFlag 			= $this->input->post('ApproveFlag');
		
		$db  			= new Database();
		$where   		= " `VoucherNumber`='".$voucherNumber."' and `EmployeeId`='".$employeeId."' and `SalaryHeadId`='".$salaryHead."' and `Id`!={$id}";
		$res 			= $db->checkExistance("prl_salary_reimbursement_application", $where); // if exists id value will be returned.
		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Salary Reimbursement Application Details is already created! Please change the Salary Application Details."
									 )
							);
			exit;
		}
		
		// Salary Reimbursement Application document uploading starts
		if(isset($_FILES))
		{
			
			$TotalFiles = $_POST["TotalFiles"];
			
			//foreach($_FILES as $file)
			for ($i=0;  $i<=$TotalFiles; $i++)
			{
				if(isset($_FILES["file_".$i]))
				{
					// tmp_name | name | type | size | error
					
					// -- Check here type  size and if any error.
					$fileName 	= $_FILES["file_".$i]['name'];
					$imgSize 	= $_FILES["file_".$i]['size'];
							
							// Check file size '5MB' or from max.image byte upload settings, in site settings module.
							if($imgSize < 5000000){}
							else{
										$msgError = "Document " . $fileName . " file is too large. Only 5 MB allowed!.";
										$errMSG   = "Error : Sorry," .$msgError;
								}
						
					$tempName	= $_FILES["file_".$i]['tmp_name'];
					$uploadDir	= "./uploads/reimbursement_document/"; // this would be the upload file path. Exactly specify here or from the settings.
					 
					// move_uploaded_file( $tempName, "./uploads/" . $fileName); 
					 
					// uploadDocumentOrImage is defined in site_helper (system/helper folder).
					$uploadResult = uploadDocumentOrImage($tempName, $uploadDir, "", $fileName, "", "",  FALSE, TRUE, TRUE,$_POST["Doc_Name"]);
					if($uploadResult['status'] == 'true') {
						
					} else {
						echo json_encode(
								array("status" => false, 
									  "message"=>$uploadResult['message']
									 )
							);
						exit;
					}
					$fileDesc = $_POST["fileDesc"];
				}
			}
		}
		// Salary Reimbursement Application document uploading ends
		
		if($id==0) // if add
		{    
			$data = array(
						'AppCode' => $appCode,
						'EmployeeId' => $employeeId,
						'SalaryHeadId' => $salaryHead,
						'ClaimDate' => $claimDate,
						'ClaimAmount' => $claimAmount,
						'VoucherNumber' => $voucherNumber,
						'Remarks' => $remarks,
						'Status' => 'Not Verified',
						'CreatedId'		=>	$_SESSION['EMPLOYEE_ID'],
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'AppCode' => $appCode,
						'EmployeeId' => $employeeId,
						'SalaryHeadId' => $salaryHead,
						'ClaimDate' => $claimDate,
						'ClaimAmount' => $claimAmount,
						'VoucherNumber' => $voucherNumber,
						'Remarks' => $remarks,
						'SanctionedAmount' => $sanctionedAmount,
						'ModifiedId' =>	$_SESSION['EMPLOYEE_ID'],
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);
			if($status)
				$data['Status'] = $status;
			if($verifyFlag == 1) {
				$data['VerifiedId'] = $_SESSION['EMPLOYEE_ID'];
				$data['VerifiedBy'] = $_SESSION['ADMIN_ID'];
				$data['VerifiedDate'] = date('Y-m-d H:i:s');
			}
			if($approveFlag == 1) {
				$data['ApprovedId'] = $_SESSION['EMPLOYEE_ID'];
				$data['ApprovedBy'] = $_SESSION['ADMIN_ID'];
				$data['ApprovedDate'] = date('Y-m-d H:i:s');
			}			
		}
		
		$res	= $this->SalaryReimbursementApplication_model->saveData($data, $id);
		// Inserting Salary Reimbursement Application document files details in the prl_salary_reimbursement_documents table
		if($id!=0) // if edit
			$res = $id; // assiging the document id 
		
		if($uploadDir) {
			$filedata = array(
							'DocumentId' => $res,
							'Status' => 'Active',
							'DocumentPath' => $uploadDir,
							'FileDesc' => $fileDesc,
							'FileName' => $uploadResult['fileName'],
							'CreatedBy' => $_SESSION['ADMIN_ID'],
							'CreatedOn' => date('Y-m-d H:i:s')
						);
			$this->db->insert('prl_salary_reimbursement_documents',$filedata);		
		}			
		
		if($id==0) // if add
		{
			//Incrementing the LastNumber by 1 for REIMBURSEMENT_APPLICATION in sys_setnumber table after inserting Salary Reimbursement Application Type
			$db   	= new Database();
			$data  	= array('REIMBURSEMENT_APPLICATION', '1');  // to increment second parameter should 1
			$db->callProcedure("getNumberPRO", $data, TRUE);  //  last parameter is TRUE for get the output.
		}
		$resData = array("status" => true,'message' => 'Salary Reimbursement Application saved successfully!!');
		
		echo json_encode($resData);
	}	
	
	//=========================== deleteReimbursementApplication function used for deleting Salary Reimbursement Application details by id from prl_salary_reimbursement_application table===========================	 
	public function deleteReimbursementApplication($id)
	{
       $resDel    =  $this->SalaryReimbursementApplication_model->deleteData($id);
       
	   if($resDel)
	   {
			$this->db->from('prl_salary_reimbursement_documents');
			$this->db->where('DocumentId',$id);
			$query = $this->db->get();
			$list  = $query->result();
			
			//deleting the Salary Reimbursement Application document files from reimbursement_document folder in upload folder when deleting Salary Reimbursement Application document detials from the reimbursement_document table
			foreach ($list as $row) {
				unlink($row->DocumentPath.$row->FileName);				
			}
			//deleting the Salary Reimbursement Application document files records from prl_salary_reimbursement_documents table when deleting Salary Reimbursement Application document detials from the reimbursement_document table
			$res     	= $this->db->delete('prl_salary_reimbursement_documents', array('DocumentId' => $id));
			
	   }
	   
	   $resData =array();
	   
	   if($resDel['status'])
	   {
			$resData    = array(
								"status" => true,
								'message' => 'Salary Reimbursement Application deleted successfully!!'
						 );	
		}
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$resDel['message']
				   );
	   }
	    
		echo json_encode($resData); 
    }   

	//=========================== rejectReimbursementApplication function used for rejecting Salary Reimbursement Application by id from prl_salary_reimbursement_application table===========================	 
	public function rejectReimbursementApplication($id)
	{
        $data = array('Status' => 'Rejected');
	    $res    =  $this->SalaryReimbursementApplication_model->saveData($data, $id);
       	   
	    $resData    = array(
								"status" => true,
								'message' => 'Salary Reimbursement Application rejected successfully!!'
						 );	
		echo json_encode($resData); 
    }   

	//================================= getReimbursementDocFile function to get Salary Reimbursement Application Document Files ===========================
	public function getReimbursementDocFile($id=0)
	{
        $resData = array();		
		$this->db->from('prl_salary_reimbursement_documents');
		$this->db->where('DocumentId',$id);
		$query = $this->db->get();
		$list  = $query->result();
		
		$tr 	= '';
		$i	= 0;
		//Salary Reimbursement Application Document files details to be loaded in the Edit Reimbursement Application Document's Existing file section		
		foreach ($list as $row) {
			$i++;
			$tr .= '<tr><td><span><a style="font-size: 1rem !important;" href="'.base_url().$row->DocumentPath.$row->FileName.'" target="_blank"><i class="fa fa-eye" aria-hidden="true"></i> '.$row->FileDesc.'</a></span></td>';
			$tr .= '<td><input class="optional toggle" type="checkbox" id="ReimbursementDoc_Remove'.$i.'" name="ReimbursementDoc_Remove'.$i.'" value="'.$row->Id.'"><label  id="ReimbursementDoc_Remove_Label'.$i.'" name="ReimbursementDoc_Remove_Label'.$i.'" for="ReimbursementDoc_Remove"> &nbsp;Remove '.$row->FileDesc.' file</label></td></tr>';
		}
		
		if($tr == '')
			$tr .= '';
		//output as html format
		
		echo $tr;
	}
	
	//================================= deleteSalaryReimbursementDocFile function to delete Salary Reimbursement Application Document file/s ===========================
	public function deleteSalaryReimbursementDocFile($id=0)
	{
			$db  			= new Database();
			$filePath 		= $db->getFieldValueById("prl_salary_reimbursement_documents", "DocumentPath", "Id='{$id}'");
			$fileName 		= $db->getFieldValueById("prl_salary_reimbursement_documents", "FileName", "Id='{$id}'");
			
			//deleting the Salary Reimbursement Application document files from reimbursement_document folder in upload folder 
			unlink($filePath.$fileName);
			
			//deleting the Salary Reimbursement Application document files record from prl_salary_reimbursement_documents table
			$res    =  $this->db->delete('prl_salary_reimbursement_documents', array('Id' => $id));
			$resData =array();
		    if($res)
		    {
				$resData    = array(
									"status" => true,
									'message' => 'Salary Reimbursement Application document file deleted successfully!!'
							 );
			   
		    }
		    else
		    {
				$resData=array(
						"status"=>false,
						"message"=>"Oops! Error, Can't delete Salary Reimbursement Application document file!!"
					   );
		    }
		    echo json_encode($resData); 	
	}
	
	// -------------------------- payment_banks function to add/edit/delete all the Online Payment Banks ----------------
	public function payment_banks($id="",$moduleTab="payment_banks")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["subMenuId"]			= $id;
		$this->load->view("brq-admin/payment-banks", $data);
	} 
	
	//==================================== paymentBanksList function to get DataTables of Payment Banks  - by Sajitha ================================
	public function paymentBanksList($subid="")
	{
        $branch					= $this->input->post("branch");
		$bank					= $this->input->post("bank");
		$list 					= $this->PaymentBanks_model->getDataTables($bank,$branch);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = $data->Bank;			
			$row[] = $data->Branch;
			$row[] = $data->IFSC;
			$row[] = $data->MICR;
			if($data->Status == "Active") {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == "Inactive") {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			
			$actions= $this->useractionpermission($subid,$data->Id);
			$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->PaymentBanks_model->countAll(),
						"recordsFiltered" => $this->PaymentBanks_model->countFiltered($bank,$branch),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
	
	// private function to upload images
	private function uploadImageFile($inputFileName, $saveFileName, $uploadPath, $allowedTypes='jpg|jpeg|png', $allowedSize='3000', $overWrite=FALSE )
	{
			$this->load->library('upload');//loading the library
			$responseData =array();
			$_FILES['userfile']['name']     = $_FILES[$inputFileName]['name'];
			$_FILES['userfile']['type']     = $_FILES[$inputFileName]['type'];
			$_FILES['userfile']['tmp_name'] = $_FILES[$inputFileName]['tmp_name'];
			$_FILES['userfile']['error']    = $_FILES[$inputFileName]['error'];
			$_FILES['userfile']['size']     = $_FILES[$inputFileName]['size'];
			//configuration for upload images
			$config = array(
			'file_name'     => $saveFileName,
			'allowed_types' => $allowedTypes,
			'max_size'      => $allowedSize,
			'overwrite'     => $overWrite,
			'upload_path'   => $uploadPath
			);
			$this->upload->initialize($config);
			if (!$this->upload->do_upload())
			{
			$error = array('error' => $this->upload->display_errors());
			$responseData[] = array(
			'errors'=> $error
			);//saving arrors in the array
			}
			return $responseData;
	}// uploadImageFile end


	//==================================== savePaymentBank function for Saving Payment Banks details - by Sajitha ================================
	public function savePaymentBank()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$bank  					= $this->input->post('Bank');
		$branch  				= $this->input->post('Branch');
		$db 					= new Database();			
		$sysBankId 				= $db->getFieldValueById("sys_all_bank_ifsc", "Id", "`Bank`='{$bank}' and `Branch`='{$branch}'");
		$ifsc  					= $this->input->post('IFSC');
		$micr  					= $this->input->post('MICR');
		$status 				= $this->input->post('Status');
		$link 					= $this->input->post('Link');
		
		$db  			= new Database();
		$where   		= " UPPER(`Bank`)='".strtoupper($bank)."' and UPPER(`Branch`)='".strtoupper($branch)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("brq_online_payment_banks", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Bank Details is already created and exists for the specified branch! Please change the Bank / Branch name."
									 )
							);
			exit;
		}
		$inputFileName   = "File1"; // profile_image

		$profilePhoto	 = date('dmYisu');

		$fileExtension					= pathinfo($_FILES[$inputFileName]['name'], PATHINFO_EXTENSION);

		$profilePhoto1				   =  $profilePhoto . "." . $fileExtension;
		
		$uploadDir		= "uploads/bank_image/";
		$tempName	= "uploads/bank_image/thumb";
		$uploadResult = uploadImage($tempName, $uploadDir, "", $inputFileName, "", "",  TRUE, FALSE, FALSE,$profilePhoto1);
		// function uploadImage($tmpName, $uploadDir, $uploadFileName="", $fileName="", $maxWidth="", $maxHeight="",  $makeThump=FALSE, $isBorder=FALSE, $isWatermark=FALSE,$picName,$isTextWatermark=FALSE)

		// 	echo "uploadResult :".$uploadResult['status'];
		$res1 = $this->uploadImageFile($inputFileName, $profilePhoto1, $uploadDir);

		// $res2 = $this->uploadImageFile($inputFileName, $profilePhoto1, $tempName,'',1000);
		//  uploadImageFile($inputFileName, $saveFileName, $uploadPath, $allowedTypes='jpg|jpeg|png', $allowedSize='3000', $overWrite=FALSE )

		// News Photo uploading ends

		if($id==0) // if add
		{    
			$data = array(
						'Bank' => $bank,
						'SysBankId' => $sysBankId,
						'Status' => $status,
						'IFSC' => $ifsc,
						'MICR' => $micr,
						'Branch' => $branch,
						'NetbankUrl' => $link,
						'IconImage' => $uploadDir.$profilePhoto1,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'Bank' => $bank,
						'SysBankId' => $sysBankId,
						'Status' => $status,
						'NetbankUrl' => $link,
						'IFSC' => $ifsc,
						'MICR' => $micr,
						'Branch' => $branch,
						'IconImage' => $uploadDir.$profilePhoto1,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		
		$res	= $this->PaymentBanks_model->saveData($data, $id);
		
		$resData = array("status" => true,'message' => 'Bank Details saved successfully!!');
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$moduleTab="payment_banks";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		
		$db = new BrqDatabase();
		$resCombo = $db->getPaymentBankCombo();
		$resData    = array(
								"status" => true,
								'message' => 'Bank details saved successfully!!',
								'filterBank' => $resCombo
						 );	
		
		$resData = (object) array_merge((array) $resData, (array) $data);
		
		echo json_encode($resData);
	}	
	
	//=========================== getEditPaymentBank function used for getting a Bank Details by id from brq_online_payment_banks table===========================	 
	public function getEditPaymentBank($id)
	{
		$data = $this->PaymentBanks_model->getById($id);
		echo json_encode($data);
	}
	
	//=========================== deletePaymentBank function used for deleting Payment Bank details by id from brq_online_payment_banks table===========================	 
	public function deletePaymentBank($id)
	{
       $res    =  $this->PaymentBanks_model->deleteData($id);
       	   
	   $resData =array();
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$moduleTab="payment_banks";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		$db = new BrqDatabase();
		$resCombo = $db->getPaymentBankCombo();
		
	   if($res['status'])
	   {
			$resData    = array(
								"status" => true,
								'message' => 'Payment Bank deleted successfully!!',
								'filterBank' => $resCombo
						 );	
		}
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
	   
		echo json_encode($resData); 
    }    
	
	// -------------------------- site_captions function to add/edit/delete all the Site Captions ----------------
	public function site_captions($id="",$moduleTab="site_captions")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["subMenuId"]			= $id;
		$this->load->view("brq-admin/site-captions", $data);
	} 
	
	
	//==================================== siteCaptionsList function to get DataTables of Site Captions  - by Sajitha ================================
	public function siteCaptionsList($subid="")
	{
        $list 					= $this->SiteCaptions_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = $data->Caption;			
			$row[] = $data->CaptionSmall;
			$row[] = $data->HighLightCaptionWord;
			if($data->Status == "Active") {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == "Inactive") {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			$actions= $this->useractionpermission($subid,$data->Id);
						$row[] = $actions;	 
						$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->SiteCaptions_model->countAll(),
						"recordsFiltered" => $this->SiteCaptions_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}

	
	//==================================== saveSiteCaption function for Saving Site Caption details - by Sajitha ================================
	public function saveSiteCaption()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$caption  				= $this->input->post('Caption');
		$smallCaption  			= $this->input->post('SmallCaption');
		$smallCaptionColor  	= $this->input->post('SmallCaptionColor');
		$highlightCaption  		= $this->input->post('HighlightCaption');
		$highlightCaptionColor  = $this->input->post('HighlightCaptionColor');
		$description  			= $this->input->post('Description');
		$descriptionColor  		= $this->input->post('DescriptionColor');
		$runningText  			= $this->input->post('RunningText');
		$runningTextColor  		= $this->input->post('RunningTextColor');
		$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " UPPER(`Caption`)='".strtoupper($caption)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("sys_site_caption", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Site Caption is already created and exists! Please change the Caption."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'Caption' => $caption,
						'CaptionSmall' => $smallCaption,
						'Status' => $status,
						'SmallCaptionColor' => $smallCaptionColor,
						'HighLightCaptionWord' => $highlightCaption,
						'HighLightCaptionColor' => $highlightCaptionColor,
						'Description' => $description,
						'DescriptionColor' => $descriptionColor,
						'RunningText' => $runningText,
						'RunningTextColor' => $runningTextColor,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'Caption' => $caption,
						'CaptionSmall' => $smallCaption,
						'Status' => $status,
						'SmallCaptionColor' => $smallCaptionColor,
						'HighLightCaptionWord' => $highlightCaption,
						'HighLightCaptionColor' => $highlightCaptionColor,
						'Description' => $description,
						'DescriptionColor' => $descriptionColor,
						'RunningText' => $runningText,
						'RunningTextColor' => $runningTextColor,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		
		$res	= $this->SiteCaptions_model->saveData($data, $id);
		
		$resData = array("status" => true,'message' => 'Site Caption saved successfully!!');
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$moduleTab="site_captions";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		
		$resData    = array(
								"status" => true,
								'message' => 'Site Caption saved successfully!!',
						 );	
		
		$resData = (object) array_merge((array) $resData, (array) $data);
		
		echo json_encode($resData);
	}	
	
	//=========================== getEditSiteCaption function used for getting a Site Caption Details by id from sys_site_caption table===========================	 
	public function getEditSiteCaption($id)
	{
		$data = $this->SiteCaptions_model->getById($id);
		echo json_encode($data);
	}
	
	//=========================== deleteSiteCaption function used for deleting Site Caption details by id from sys_site_caption table===========================	 
	public function deleteSiteCaption($id)
	{
       $res    =  $this->SiteCaptions_model->deleteData($id);
       	   
	   $resData =array();
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$moduleTab="site_captions";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		
	   if($res['status'])
	   {
			$resData    = array(
								"status" => true,
								'message' => 'Site Caption deleted successfully!!',
						 );	
		}
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
	   
		echo json_encode($resData); 
    }    
	
	// -------------------------- sms_templates_settings function to add/edit/delete all the SMS Templates Settings ----------------
	public function sms_templates_settings($id="",$moduleTab="sms_templates_settings")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data['subMenuId']		= $id;
		$this->load->view("brq-admin/sms-templates-settings", $data);
	} 
	
	//==================================== smsTemplatesSettingsList function to get DataTables of SMS Templates Settings  - by Sajitha ================================
	public function smsTemplatesSettingsList($subid="")
	{
        $smsCategory	= $this->input->post('category');
		$templateId	= $this->input->post('templateId');
		
		$list 	= $this->SMSTemplatesSettings_model->getDataTables($smsCategory,$templateId);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = $data->SmsCategory;			
			$row[] = $data->SmsType;
			$row[] = $data->TemplateId;
			if($data->Status == "1") {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == "0") {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			// $actions = '<div class="btn-group" >'
	        //           .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	        //           .'Action<span class="sr-only">Toggle Dropdown</span>'
	        //           .'</button>'
	        //           .'<div class="dropdown-menu" role="menu" style="">'
	        //           .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="popUpPasswordRecheck('."'".$data->Id."'".',\'edit\');"><span class="fa fa-edit"></span> Edit</a>'
	        //           .'<div class="dropdown-divider"></div>'
	        //           .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="popUpPasswordRecheck('."'".$data->Id."'".' ,\'copy\');"><span class="fa fa-files-o text-fanger"></span> Copy</a>'
			// 		  .'<div class="dropdown-divider"></div>'
	        //           .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="popUpPasswordRecheck('."'".$data->Id."'".',\'delete\');"><span class="fa fa-trash text-fanger"></span> Delete</a>'
	        //           .' </div>'
	        //           .'</div>';
			$actions =$this->useractionpermission($subid,$data->Id);
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->SMSTemplatesSettings_model->countAll(),
						"recordsFiltered" => $this->SMSTemplatesSettings_model->countFiltered($smsCategory,$templateId),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	} 
	
	//==================================== saveSMSTemplates function for Saving SMS Templates Settings details - by Sajitha ================================
	public function saveSMSTemplates()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$SMSCategory  			= $this->input->post('SMSCategory');
		$SMSType  				= $this->input->post('SMSType');
		$MessageTemplate  		= $this->input->post('MessageTemplate');
		$TemplateID  			= $this->input->post('TemplateID');
		$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " UPPER(`SMSType`)='".strtoupper($SMSType)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("sys_sms_templates", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This SMS Type is already created and exists! Please change the SMS Type."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'SmsCategory' => $SMSCategory,
						'SmsType' => $SMSType,
						'Status' => $status,
						'MessageTemplate' => $MessageTemplate,
						'TemplateId' => $TemplateID,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'SmsCategory' => $SMSCategory,
						'SmsType' => $SMSType,
						'Status' => $status,
						'MessageTemplate' => $MessageTemplate,
						'TemplateId' => $TemplateID,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		
		$res	= $this->SMSTemplatesSettings_model->saveData($data, $id);
		
		$resData = array("status" => true,'message' => 'SMS Templates Settings saved successfully!!');
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$moduleTab="site_captions";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		
		$resData    = array(
								"status" => true,
								'message' => 'SMS Templates Settings saved successfully!!',
						 );	
		
		$resData = (object) array_merge((array) $resData, (array) $data);
		
		echo json_encode($resData);
	}	 
	
	//=========================== getEditSMSTemplates function used for getting a SMS Templates Settings details by id from sys_sms_templates table===========================	 
	public function getEditSMSTemplates($id)
	{
		$data = $this->SMSTemplatesSettings_model->getById($id);
		echo json_encode($data);
	} 
	
	//=========================== deleteSMSTemplates function used for deleting SMS Templates Settings details by id from sys_sms_templates table===========================	 
	public function deleteSMSTemplates($id)
	{
       $res    =  $this->SMSTemplatesSettings_model->deleteData($id);
       	   
	   $resData =array();
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$moduleTab = "sms_templates_settings";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		
	   if($res['status'])
	   {
			$resData    = array(
								"status" => true,
								'message' => 'SMS Templates Settings deleted successfully!!',
						 );	
		}
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);
	   
		echo json_encode($resData); 
    }  	
	
	// -------------------------- payment_api_settings function to add/edit/delete all the Payment API Settings ----------------
	public function payment_api_settings($id="",$moduleTab="payment_api_settings")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["subMenuId"]			= $id;
		$this->load->view("brq-admin/payment-api-settings", $data);
	} 
		
	//==================================== paymentAPISettingsList function to get DataTables of Payment API Settings  - by Sajitha ================================
	public function paymentAPISettingsList($subid="")
	{
        $list 	= $this->PaymentAPISettings_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = $data->TestURL;
			$row[] = $data->ProductionURL;
			$row[] = $data->PaymentGateway;
			if($data->Status == "1") {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == "0") {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			// $actions = '<div class="btn-group" >'
	        //           .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	        //           .'Action<span class="sr-only">Toggle Dropdown</span>'
	        //           .'</button>'
	        //           .'<div class="dropdown-menu" role="menu" style="">'
	        //           .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="popUpPasswordRecheck('."'".$data->Id."'".',\'edit\');"><span class="fa fa-edit"></span> Edit</a>'
	        //           .'<div class="dropdown-divider"></div>'
	        //           .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="popUpPasswordRecheck('."'".$data->Id."'".' ,\'copy\');"><span class="fa fa-files-o text-fanger"></span> Copy</a>'
			// 		  .'<div class="dropdown-divider"></div>'
	        //           .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="popUpPasswordRecheck('."'".$data->Id."'".',\'delete\');"><span class="fa fa-trash text-fanger"></span> Delete</a>'
	        //           .' </div>'
	        //           .'</div>';
			$actions = $this->useractionpermission($subid,$data->Id);
		  	$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->PaymentAPISettings_model->countAll(),
						"recordsFiltered" => $this->PaymentAPISettings_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	} 
	


	
	
	//==================================== savePaymentAPI function for Saving Payment API Settings details - by Sajitha ================================
	public function savePaymentAPI()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$merchantId  			= encrypt_decrypt('E',$this->input->post('MerchantId'));
		$accessCode  			= encrypt_decrypt('E',$this->input->post('AccessCode'));
		$workingKey  			= encrypt_decrypt('E',$this->input->post('WorkingKey'));
		$testURL  				= $this->input->post('TestURL');
		$productionURL  		= $this->input->post('ProductionURL');
		$paymentGateway  		= $this->input->post('PaymentGateway');
		$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " UPPER(`PaymentGateway`)='".strtoupper($paymentGateway)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("sys_pg_templates", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Payment API Setting is already created and exists! Please change the Payment Gateway."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'MerchantId' => $merchantId,
						'AccessCode' => $accessCode,
						'WorkingKey' => $workingKey,
						'TestURL' => $testURL,
						'ProductionURL' => $productionURL,
						'PaymentGateway' => $paymentGateway,
						'Status' => $status
					);
		}
		else { // if edit
			$data = array(
						'MerchantId' => $merchantId,
						'AccessCode' => $accessCode,
						'WorkingKey' => $workingKey,
						'TestURL' => $testURL,
						'ProductionURL' => $productionURL,
						'PaymentGateway' => $paymentGateway,
						'Status' => $status			
					);						
		}
		
		$res	= $this->PaymentAPISettings_model->saveData($data, $id);
		
		$resData    = array(
								"status" => true,
								'message' => 'Payment API Settings saved successfully!!',
						 );	
		
		echo json_encode($resData);
	}	  
		
	//=========================== getEditPaymentAPI function used for getting a Payment API Settings details by id from sys_pg_settings table===========================	 
	public function getEditPaymentAPI($id)
	{
		$data = $this->PaymentAPISettings_model->getById($id);
		$resData = array();
		
		$db = new Database();			
		$merchantIdDecrypt = encrypt_decrypt('D',$data->MerchantId);
		$accessCodeDecrypt = encrypt_decrypt('D',$data->AccessCode);
		$workingKeyDecrypt = encrypt_decrypt('D',$data->WorkingKey);
	    $resData = array(
						"MerchantIdDecrypt" => $merchantIdDecrypt,
						"AccessCodeDecrypt" => $accessCodeDecrypt,
						"WorkingKeyDecrypt" => $workingKeyDecrypt,
				 );
		$resData = (object) array_merge((array) $resData,(array) $resData, (array) $data);
		echo json_encode($resData);
	}  
	
	//=========================== deletePaymentAPI function used for deleting Payment API Settings details by id from sys_pg_settings table===========================	 
	public function deletePaymentAPI($id)
	{
       $res    =  $this->PaymentAPISettings_model->deleteData($id);
       	   
	   $resData =array();
	   if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$moduleTab = "sys_pg_settings";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; 
		
	   if($res['status'])
	   {
			$resData    = array(
								"status" => true,
								'message' => 'Payment API Settings deleted successfully!!',
						 );	
		}
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
	    
		$resData = (object) array_merge((array) $resData, (array) $data);	   
		echo json_encode($resData); 
    }

	// -------------------------- upi_scan_images function to add/edit/delete all the UPI scan images ----------------

	public function upi_scan_images($id="",$moduleTab="upi_scan_images")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["subMenuId"]			= $id;
		$this->load->view("brq-admin/upi-scan-images", $data);
	} 

	//==================================== paymentBanksList function to get DataTables of Payment Banks  - by Sajitha ================================
	public function upiScanImageList($subid="")
	{
        
		$upiType					= $this->input->post("upiType");
		$list 					= $this->UpiImage_model->getDataTables($upiType);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = $data->Id;			
			$row[] = $data->UpiType;
			
			if($data->Status == "Active") {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == "Inactive") {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} else {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
			}	
			
			$row[] =  $data->CreatedBy;
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			
			$actions= $this->useractionpermission($subid,$data->Id);
			$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->UpiImage_model->countAll(),
						"recordsFiltered" => $this->UpiImage_model->countFiltered($bank,$branch),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
		

//==================================== saveUpiScanImage function for Saving Payment Banks details - by Sajitha ================================
public function saveUpiScanImage()
{
	$id						= $this->input->post("hidID");
	$data 					= array();  
	$UpiType  					= $this->input->post('UPI');
	
	$db 					= new Database();			
	// $sysBankId 				= $db->getFieldValueById("sys_upi_scan_images", "Id", "`UpiType`='{$UpiType}' ");
	
	$status 				= $this->input->post('Status');
	
	// $db  			= new Database();
	// $where   		= " UPPER(`UpiType`)='".strtoupper($UpiType)."'  and `Id`!={$id}";
	// $res 			= $db->checkExistance("sys_upi_scan_images", $where); // if exists id value will be returned.

	// if($res)
	// {
	// 	echo json_encode(
	// 						array("status" => false, 
	// 							  "message"=>"This Bank Details is already created and exists for the specified branch! Please change the Bank / Branch name."
	// 							 )
	// 					);
	// 	exit;
	// }
	$inputFileName   = "File1"; // profile_image

	$profilePhoto	 = date('dmYisu');

	$fileExtension					= pathinfo($_FILES[$inputFileName]['name'], PATHINFO_EXTENSION);

	$profilePhoto1				   =  $profilePhoto . "." . $fileExtension;

	$uploadDir		= "uploads/upi_scan_image/";
	$tempName	= "uploads/upi_scan_image/thumb";
	// $uploadResult = uploadImage($tempName, $uploadDir, "", $inputFileName, "", "",  TRUE, FALSE, FALSE,$profilePhoto1);
	// function uploadImage($tmpName, $uploadDir, $uploadFileName="", $fileName="", $maxWidth="", $maxHeight="",  $makeThump=FALSE, $isBorder=FALSE, $isWatermark=FALSE,$picName,$isTextWatermark=FALSE)

	// 	echo "uploadResult :".$uploadResult['status'];
	$res1 = $this->uploadImageFile($inputFileName, $profilePhoto1, $uploadDir);
	
	// $res2 = $this->uploadImageFile($inputFileName, $profilePhoto1, $tempName,'',1000);
	//  uploadImageFile($inputFileName, $saveFileName, $uploadPath, $allowedTypes='jpg|jpeg|png', $allowedSize='3000', $overWrite=FALSE )

	// News Photo uploading ends

	if($id==0) // if add
	{    
		$data = array(
					
					'Status' => $status,
					'UpiType' => $UpiType,
					'ScanImage' => $uploadDir.$profilePhoto1,
					'CreatedBy' => $_SESSION['ADMIN_ID'],
					'CreatedOn' => date('Y-m-d H:i:s')
				);
	}
	else { // if edit
		$data = array(
					
					'Status' => $status,
					'UpiType' => $UpiType,
					'ScanImage' => $uploadDir.$profilePhoto1,
					'ModifiedBy' => $_SESSION['ADMIN_ID'],
					'ModifiedOn' => date('Y-m-d H:i:s'),			
				);						
	}
	
	$res	= $this->UpiImage_model->saveData($data, $id);
	
	$resData = array("status" => true,'message' => 'Upi scan details saved successfully!!');
	
	if(!$this->isSessionSet())
	{
		$this->index();
		return;
	}

	// $moduleTab="moduleTab";
	// $_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
	// $this->isScreenLocked(); // screen locked checking. redirect to unlock screen
	
	// $data 					= array();
	// $headTitleAddText		= " - Products : Login as ";
	// $headTitleAddId			= $_SESSION['ADMIN_ID'];
	// $data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
	
	// $data["moduleTab"]		= $moduleTab; // product or product_category
	
	// $db = new BrqDatabase();
	// $resCombo = $db->getPaymentBankCombo();
	// $resData    = array(
	// 						"status" => true,
	// 						'message' => 'Bank details saved successfully!!',
	// 						'filterBank' => $resCombo
	// 				 );	
	
	$resData = (object) array_merge((array) $resData, (array) $data);
	
	echo json_encode($resData);
}

//=========================== geteditUpiImage function used for getting a Upi Scan Details by id from sys_upi_scan_images table===========================	 
public function geteditUpiImage($id)
{
	$data = $this->UpiImage_model->getById($id);
	echo json_encode($data);
}

// -------------------------- Banner Image module start ----------------
public function banner_image($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$moduleTab="banner-image";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		$data["subMenuId"]		= $id;
		$this->load->view("brq-admin/banner-image", $data);
		
	}
	
	//====================================Function to get DataTables of Banner Image ================================
	public function bannerImageList($subid="")
	{
        $list 	= $this->BannerImage_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		//$no=1;
		
		foreach ($list as $data) {
		
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->Id;
			$row 			= array();
			
			$imagePath 	= base_url().$data->BannerImagePath.'thumb/';
			$bannerImageLarge 	= base_url().$data->BannerImagePath.$data->BannerImageName;
			$bannerPhoto 		= $imagePath.$data->BannerImageName;
			
			if(!(file_exists($bannerImageLarge))) {
				$bannerImageLarge 	= base_url().$data->BannerImagePath."banner.png";
			}
			if(!(file_exists($data->BannerImagePath.'thumb/'.$data->BannerImageName))) {
				$bannerPhoto 	= $imagePath."banner.png";
			}
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$bannerImageLarge.'\',\''.$data->Title.'\');" ><img   class="rounded-circle" src="'.$bannerPhoto.'" height="40" width="40" alt=""></a>';
			$row[] = $data->Title.$bannerImgName;
			
		    if($data->Status=="Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			 
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
		    $row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
            $row[] = $data->CreatedBy;
           
			//add html for action
			// $row[] = '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="editImgData('."'".$data->Id."'".');"><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>
			// 	  <a  id="deleteButton_'. $data->Id.'" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="ajaxImgDelete('."'".$data->Id."'".')"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</a>';
		  	$row[]= $this->useractionpermission($subid,$data->Id);
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->BannerImage_model->countAll(),
						"recordsFiltered" => $this->BannerImage_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
		
	}
	
	//==================================== saveBannerImage function for Saving Banner Image details - by Sajitha ================================
	public function saveBannerImage()
	{
		$id				= $this->input->post("hidID");
		$uploadDir		= '';
		
		$data 			= array();  
		$imgTitle  	= $this->input->post('Img_Name');
		$db  			= new Database();
		$where   		= " UPPER(Title)='".strtoupper($imgTitle)."' and Id!={$id}";
		$res 			= $db->checkExistance("banner_image", $where); // if exists id value will be returned.
	
		if($res)
		{
			echo json_encode(
				array("status" => false, 
					  "message"=>"This banner image title is already created and exists! Please change the banner image title."
					 )
			);
			exit;
		}
		$bannerImage   = '';
		
		// Gallery Image uploading starts
		if(isset($_FILES))
		{
			$TotalFiles = $_POST["TotalFiles"];
			if($TotalFiles != 0) {
				//foreach($_FILES as $file)
				for ($i=0;  $i<=$TotalFiles; $i++)
				{
					if(isset($_FILES["file_".$i]))
					{
						// tmp_name | name | type | size | error
						
						// -- Check here type  size and if any error.
						$fileName 	= $_FILES["file_".$i]['name'];
						$imgSize 	= $_FILES["file_".$i]['size'];
								
								// Check file size '5MB' or from max.image byte upload settings, in site settings module.
								if($imgSize < 5000000){}
								else{
											$msgError = "Banner image " . $fileName . " file is too large. Only 5 MB allowed!.";
											$errMSG   = "Error : Sorry," .$msgError;
									}
							
						$tempName	= $_FILES["file_".$i]['tmp_name'];
						$uploadDir	= "./uploads/banner_image/"; // this would be the upload file path. Exactly specify here or from the settings.
						
						// uploadImage is defined in site_helper (system/helper folder).
						$uploadResult = uploadImage($tempName, $uploadDir, "", $fileName, "", "",  TRUE, FALSE, FALSE,$_POST["Pic_Name"]);
						if($uploadResult['status'] == 'true') {
							$bannerImage = $uploadResult['fileName'];
							
						} else {
							echo json_encode(
									array("status" => false, 
										  "message"=>$uploadResult['message']
										 )
								);
							exit;
						}
					}
				}
			} else { 
				if($id==0) {
					$uploadDir	= "./uploads/banner_image/";
					$bannerImage = "banner.png";
				}
			}
		} 
		
		// Gallery Image uploading ends
		
		if($id==0) // if add
		{    
			$data = array(
						'Title' => $imgTitle,
						'Status' => $this->input->post('Status'),						
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedId'		=>	$_SESSION['EMPLOYEE_ID'],
						'CreatedOn' => date('Y-m-d H:i:s'),	
						'BannerImagePath' => $uploadDir,
						'BannerImageName' => $bannerImage,
					);
				
		}
		else { // if edit
				$data = array(
						'Title'=> $imgTitle,
						'Status' 	 => $this->input->post('Status'),
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),	
						'ModifiedId' => $_SESSION['EMPLOYEE_ID'],						
						);
				
					if($bannerImage !='' && $uploadDir != '') {
						 $data += [ "BannerImageName" => $bannerImage, "BannerImagePath" => $uploadDir ];
							
						//deleting existing employee profile picture and thumbnail		
						$db  				= new Database();
						$imageName 			= $db->getFieldValueById("sys_site_banner_image", "BannerImageName", "Id='{$id}'");	
						$imagePath 			= $db->getFieldValueById("sys_site_banner_image", "BannerImagePath", "Id='{$id}'");	
						if($imageName != 'male.png' && (file_exists($imagePath.$imageName))) {
							unlink($imagePath.$imageName);
							if(file_exists($imagePath."thumb/".$imageName))
								unlink($imagePath."thumb/".$imageName);
						}
					}		
		}
		
		$res	= $this->BannerImage_model->saveData($data, $id);
	   
		$resData    = array(
								"status" => true,
								'message' => 'Banner Image details saved successfully!!'
						 );
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$moduleTab="banner_image";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // product or product_category
		
		$resData = (object) array_merge((array) $resData, (array) $data);
	    echo json_encode($resData);
	}

	//==================================== Function to get details of Gallery Image by Id - by Sajitha ================================
	public function getEditBannerImage($id)
	{
		$data 		= $this->BannerImage_model->getById($id);
		
		echo json_encode($data);
	}
	
	//==================================== Function to get details of Gallery Image details by Id - by Sajitha ================================
	public function getBannerPic($id)
	{
		$db  				= new Database();
		$imageName 	= $db->getFieldValueById("sys_site_banner_image", "BannerImageName", "Id='{$id}'");	
		$imagePath 	= $db->getFieldValueById("sys_site_banner_image", "BannerImagePath", "Id='{$id}'");	
		if(file_exists($imagePath."thumb/".$imageName)) 
			echo 1;
		else
			echo 0;
	}
		
	//====================================Function to delete Banner Image by Id ================================
	public function deleteBannerImage($id)
	{
        //deleting gallery image and thumbnail
		$db  				= new Database();
		$imageName 	= $db->getFieldValueById("sys_site_banner_image", "BannerImageName", "Id='{$id}'");	
		$imagePath 	= $db->getFieldValueById("sys_site_banner_image", "BannerImagePath", "Id='{$id}'");	
		if($imageName != 'banner.png' && (file_exists($imagePath.$imageName))) {
			unlink($imagePath.$imageName);
			if(file_exists($imagePath."thumb/".$imageName))
				unlink($imagePath."thumb/".$imageName);
		}			
			
		$res=  $this->BannerImage_model->deleteData($id);
	    if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	
		$moduleTab="banner_image";
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["moduleTab"]		= $moduleTab; // image_gallery
		
       $resData =array();
	   if($res)
	   {
		   		   
		   $resData=array(
					"status"=>true,
					"message"=>"Banner Image deleted successfully!!"
				   );
		   
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete banner image!!"
				   );
		   
	   }
	   $resData = (object) array_merge((array) $resData, (array) $data);
	   echo json_encode($resData);  
	} 
	
	//========================== Super Admin(Developer) Report Admin Menu Modules - By Sajitha====================
	//Function to view Report Main Menu view page
	public function adminReportMainMenu($id="")
	{
       if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$data 						= array();
		$data 						= $this->Common_model->common_sidebar_counts();
		$data["subMenuId"]			= $id;
		$this->load->view('brq-admin/admin-report-main-menu',$data);
	}
	
	//====================================Function to get DataTables of Report Main Menu ================================
	public function reportMenuList($subid="")
	{
		$list = $this->adminReportMainMenu->getDataTables();
		
		$data = array();
		$no = $_POST['start']; // commented for working
		//$no=1;
		
		foreach ($list as $menu) {
		
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Showing";
			$countText	 = "Yes";
			  
			$no++;
			$row = array();
			$row[] = $menu->MenuItem;
			$row[] = $menu->FaIcon;
						
		
			if($menu->showCount=="No")
				{
					$showClass = "label label-danger";
					//$countText	 = "No";
				}	
			
			$row[] = "<span class='" . $showClass . "'>" . $menu->showCount . "</span>";
			$row[] = $menu->countTitle; 
		
			if($menu->Status=="Hided")
			 {
				$statusClass = "label label-danger";
				$statusText  = "Hided";
			  }
			  
			$row[] =$menu->MenuOrder; 
			if($menu->Status == 'Showing')		
				$checked = "checked";
			else
				$checked = "";
			$row[] = '<label class="switch"><input onClick="showHide('."'".$menu->Id."'".');" id="Show_Hide'.$menu->Id.'" '.$checked.' class="switch-input" type="checkbox" /><span class="switch-label" data-on="Show" data-off="Hide"></span><span class="switch-handle"></span></label>';			
			$row[] = "<span class='" . $statusClass . "'>" . $menu->Status . "</span>";
			
			//add html for action
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .= '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="rememberEntryCheck('."'".$menu->Id."'".',\'edit\')"><i class="glyphicon glyphicon-pencil"></i> Edit</a>';
				
			}
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{
				$actions .=' <a  id="deleteButton" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="rememberEntryCheck('."'".$menu->Id."'".',\'delete\')"><i class="glyphicon glyphicon-trash"></i> Delete</a>';
			}
				  
			$row[] = $actions;
			$data[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->adminReportMainMenu->countAll(),
						"recordsFiltered" => $this->adminReportMainMenu->countFiltered(),
						"data" => $data,
				);
		//output to json format
		echo json_encode($output);
	}
	
	// -------------------- for getting the report main menu details for editing ---
	public function getEditAdminReportMenu($id)
	{
		$data = $this->adminReportMainMenu->getById($id);
		echo json_encode($data);
	}
	
	//==================================== saveAdminReportMenu function for Saving Report Main Menu details - by Sajitha ================================
	public function saveAdminReportMenu()
	{
		$id		= $this->input->post("hidID");
        $db     = new Database();
                
        // --- checking the existance start;
		$item	 =  trim(urldecode($this->input->post('MenuItem')));
		$where   = "MenuItem='{$item}' AND Id!='{$id}'";
		$res 	 = $db->checkExistance("sys_admin_report_menu", $where); //  if exists id value will be returned.
		
		if($res)
			{
				echo json_encode(
									array(	
											"status"  => false,
											"message" => "This item alreay added and exists!.",
										 )
								);
				exit;
			}
		// --- checking the existance ends;
                $data = array(
								'MenuItem' 	=> trim(urldecode($this->input->post('MenuItem'))),
								'FaIcon' 	=> trim(urldecode($this->input->post('FaIcon'))),
								'showCount' => trim(urldecode($this->input->post('ShowCount'))),
								'countTitle'=> trim(urldecode($this->input->post('CountTitle'))),
								'countSubMenuReportTable'=> trim(urldecode($this->input->post('CountTable'))),
								'MenuOrder' => trim(urldecode($this->input->post('MenuOrder'))),
								'Status' 	=> trim(urldecode($this->input->post('Status'))),
								'countWhereClause'=>trim(urldecode($this->input->post('CountWhereClause'))),
								'VisibleStatus' =>trim(urldecode($this->input->post('VisibleStatus'))),
							);
           	
		$res= $this->adminReportMainMenu->saveData($data, $id);
		echo json_encode(array(
								'status'  =>  true,	
								'message' => 'Item saved successfully!.'
							  )
						);
	}
	
	//====================================Function to delete Report Menu by Id ================================
	public function deleteReportMainMenu($id)
	{
		
	   $res = $this->adminReportMainMenu->deleteData($id);
	   if(!$res)
	   {
		   echo json_encode(
							 array(
									'status'  =>  false,	
									'message' => 'Oops! Can\'t delete this item, detail exists!.'
								  )
						   );	 
		   exit;
	   }
	   echo json_encode(
	   
							 array(
									'status'  =>  true,	
									'message' => 'Item has been removed successfully!.'
								 )
						);	
	}
	
	//==================================== updateShowHideReportMainMenu function for Updating Showing/Hide Status in admin report main menu to show / hide a main report menu - by Sajitha ================================
	public function updateShowHideReportMainMenu() {
		$showHideStatus = $this->input->post("show");
		$id = $this->input->post("id");
		
		if($showHideStatus == 1) {
			$this->db->set('Status', 'Showing');
		} else {
			$this->db->set('Status', 'Hided');
		}			
		$where = array('Id' =>$id);
		$this->db->where($where);
		$this->db->update('sys_admin_report_menu');	
	}
	
	//-------- Get Report Main Menu for MenuItem combo filling :  for Admin Sub Menu Module
	public function getReportMainMenuComboList() 
	{
		$db			= new Database();
		$mainMenu   = $db->fillCombo("sys_admin_report_menu", "MenuItem", "...Choose...", "", "Id", "", "MenuItem");
		
		echo $mainMenu;
		
	} 

	//-------- Get Report Main Menu Order from Main MenuId
	public function getReportMainMenuOrder($id) 
	{
		$db  = new Database();
        echo $menuOrder = $db->getFieldValueById("sys_admin_report_menu", "MenuOrder", "Id='{$id}'");
	}
	
	//========================== Super Admin(Developer) Report Admin Menu Modules - By Sajitha====================
	//Function to view Report Main Menu view page
	public function adminReportSubMenu($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$data 						= array();
		$data 						= $this->Common_model->common_sidebar_counts();
		$db			= new Database();
		$mainMenu   = $db->fillCombo("sys_admin_sub_report_menu", "MenuItem", "Choose..", "", "Id", "", "MenuItem", "");
		$data["subMenuId"]	= $id;
		$this->load->view('brq-admin/admin-report-sub-menu',$data);
        
	}
	
	//====================================Function to get DataTables of Report Sub Menu ================================
	public function reportSubMenuList($subid="")
	{
		$list = $this->adminReportSubMenu->getDataTables();
		
		$data = array();
		$no = $_POST['start']; // commented for working
		//$no=1;
		
		foreach ($list as $menu) {
		
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Showing";
			$countText	 = "Yes";
			  
			$no++;
			$row = array();
			$row[] = $menu->SubMenuItem;
			$row[] = $menu->MenuItem;
			$row[] = $menu->FaIcon;
			$row[] = $menu->pageLink;
			$row[] = $menu->MenuOrder;
			$row[] = $menu->SubMenuOrder;
			 if($menu->Status=="0")
			{
				$statusClass = "label label-danger";
				$statusText  = "Hided";
			}
			
			$row[] = "<span class='" . $statusClass . "'>" . $statusText . "</span>";
			
			//add html for action
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="rememberEntryCheck('."'".$menu->Id."'".',\'edit\')"><i class="glyphicon glyphicon-pencil"></i> Edit</a>';
			}
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{
				$actions .='<a  id="deleteButton" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="rememberEntryCheck('."'".$menu->Id."'".',\'delete\')"><i class="glyphicon glyphicon-trash"></i> Delete</a>';
			}	  
			//<a id="viewButton" class="btn btn-small btn-info" href="javascript:void(0)" title="Click to edit" onclick="edit_menu('."'". $menu->Id ."'".')"><i class="fa fa-sticky-note-o"></i> View</a>';	  
		 
			$row[] = $actions; 
			$data[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->adminReportSubMenu->countAll(),
						"recordsFiltered" => $this->adminReportSubMenu->countFiltered(),
						"data" => $data,
				);
		//output to json format
		echo json_encode($output);
	}

	//==================================== saveAdminReportSubMenu function for Saving Report Sub Menu details - by Sajitha ================================
	public function saveAdminReportSubMenu()
	{
		$id		= $this->input->post("hidID");
		$menuid	= $this->input->post('MenuItem');
        $db     = new Database();
		  
        // --- checking the existance start;
		$item	 =  trim(urldecode($this->input->post('SubMenuItem')));
		$where   = "SubMenuItem='{$item}' AND Id!='{$id}'";
		$res 	 = $db->checkExistance("sys_admin_sub_report_menu", $where); //  if exists id value will be returned.
		
		if($res)
			{
				echo json_encode(
									array(	
											"status"  => false,
											"message" => "This item alreay added and exists!.",
										 )
								);
				exit;
			}
		// --- checking the existance ends;
                $data = array(
								'MenuItemId' => $this->input->post('MenuItem'),
								'MenuItem' => $db->getFieldValueById("sys_admin_report_menu", "MenuItem", "Id='{$menuid}'"),
								'SubMenuItem' => trim(urldecode($this->input->post('SubMenuItem'))),
								'FaIcon' => trim(urldecode($this->input->post('FaIcon'))),
								'MenuOrder' => trim(urldecode($this->input->post('MenuOrder'))),
								'SubMenuOrder' => trim(urldecode($this->input->post('SubMenuOrder'))),
								'ToolTip' => trim(urldecode($this->input->post('ToolTip'))),
								'pageLink' => trim(urldecode($this->input->post('LinkPage'))),
								'Status' => trim(urldecode($this->input->post('Status'))),
								'ImagePath' => trim(urldecode($this->input->post('ImageLink'))),
							);
           	
		$res= $this->adminReportSubMenu->saveData($data, $id);
		echo json_encode(array(
								'status'  =>  true,	
								'message' => 'Item saved successfully!.'
							  )
						);
	}
	
	//====================================Function to delete Report Sub Menu by Id ================================
	public function deleteReportSubMenu($id)
	{
		
	   $res = $this->adminReportSubMenu->deleteData($id);
	   if(!$res)
	   {
		   echo json_encode(
							 array(
									'status'  =>  false,	
									'message' => 'Oops! Can\'t delete this item, detail exists!.'
								  )
						   );	 
		   exit;
	   }
	   echo json_encode(
	   
							 array(
									'status'  =>  true,	
									'message' => 'Item has been removed successfully!.'
								 )
						);	
	}
		
	//Function to view Query manager subjects view page
	
	public function query_manager_subjects($id="",$moduleTab="query_manager_subjects")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]		= $id;
		$this->load->view('brq-admin/query-manager-subjects',$data);
        
	}
	
	//==================================== querySubjectsList function to get DataTables of Query Manager Subjects  - by Sajitha ================================
	public function querySubjectsList($subid="")
	{
		$list = $this->QuerySubject_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = $data->QuerySubject;
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} 
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			// $actions = '<div class="btn-group">'
	        //           .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	        //           .'Action<span class="sr-only">Toggle Dropdown</span>'
	        //           .'</button>'
	        //           .'<div class="dropdown-menu" role="menu" style="">'
	        //           .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editSubject('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>'
	        //           .'<div class="dropdown-divider"></div>'
	        //           .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editSubject('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>'
			// 		  .'<div class="dropdown-divider"></div>'
	        //           .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteSubject('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>'
	        //           .' </div>'
	        //           .'</div>';
			
		  	$actions= $this->useractionpermission($subid,$data->Id);
				  $row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->QuerySubject_model->countAll(),
						"recordsFiltered" => $this->QuerySubject_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
	
	//==================================== saveQuerySubject function for Saving Query Subject details - by Sajitha ================================
	public function saveQuerySubject()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$subject  				= $this->input->post('Subject_Name');
		$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " UPPER(`QuerySubject`)='".strtoupper($subject)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("sys_query_manager_subject", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This query subject is already created and exists! Please change the query subject."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'QuerySubject' => $subject,
						'Status' => $status,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'QuerySubject' => $subject,
						'Status' => $status,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		
		$res	= $this->QuerySubject_model->saveData($data, $id);
		$resData = array("status" => true,'message' => 'Query Subject details saved successfully!!');
		
		echo json_encode($resData);
	}
	
	//=========================== deleteQuerySubject function used for deleting Query Subject details by id from sys_query_manager_subject table===========================	 
	public function deleteQuerySubject($id)
	{
       $res    =  $this->QuerySubject_model->deleteData($id);
       $resData =array();
	  
	   if($res['status'])
	   {
			$resData=array(
					"status"=>true,
					"message"=>$res['message']
				   );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
		echo json_encode($resData); 
    }    
		
	//=========================== getEditQuerySubject function used for getting a Query Subject details by id in sys_query_manager_subject table ===========================	 
	public function getEditQuerySubject($id)
	{
		$data = $this->QuerySubject_model->getById($id);
		echo json_encode($data);
	}
	
	//Function to view client profession view page
	
	public function client_profession($id="",$moduleTab="client_profession")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $fuctionName =  $this->uri->segment(2);
		// $db = new Database();
		// $Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		// $this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " - Products : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["subMenuId"]			= $id;
		$this->load->view('brq-admin/client-profession',$data);
        
	}
	
	//==================================== clientProfessionList function to get DataTables of client professions - by Sajitha ================================
	public function clientProfessionList($subid="")
	{
		$list = $this->ClientProfession_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = $data->Profession;
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} 
			$row[] = $data->OrderValue;
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
		
			$actions= $this->useractionpermission($subid,$data->Id);
						$row[] = $actions;	 
						$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->ClientProfession_model->countAll(),
						"recordsFiltered" => $this->ClientProfession_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}

	
	//==================================== saveClientProfession function for Client Profession details - by Sajitha ================================
	public function saveClientProfession()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$clientProfession  		= $this->input->post('ClientProfession_Name');
		$orderValue  			= $this->input->post('Order_Value');
		$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " UPPER(`Profession`)='".strtoupper($clientProfession)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("sys_client_profession", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This client profession is already created and exists! Please change the client profession."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'Profession' => $clientProfession,
						'OrderValue' => $orderValue,
						'Status' => $status,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'Profession' => $clientProfession,
						'OrderValue' => $orderValue,
						'Status' => $status,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		
		$res	= $this->ClientProfession_model->saveData($data, $id);
		$resData = array("status" => true,'message' => 'Client Profession details saved successfully!!');
		
		echo json_encode($resData);
	}
	
	//=========================== deleteClientProfession function used for deleting Client Profession details by id from sys_client_profession table===========================	 
	public function deleteClientProfession($id)
	{
       $res    =  $this->ClientProfession_model->deleteData($id);
       $resData =array();
	  
	   if($res['status'])
	   {
			$resData=array(
					"status"=>true,
					"message"=>$res['message']
				   );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
		echo json_encode($resData); 
    }    
		
	//=========================== getEditClientProfession function used for getting a Client Profession details by id in sys_client_profession table ===========================	 
	public function getEditClientProfession($id)
	{
		$data = $this->ClientProfession_model->getById($id);
		echo json_encode($data);
	}
	
	//Function to view company type view page
	public function company_type($id="",$moduleTab="company_type")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $fuctionName =  $this->uri->segment(2);
		// $db = new Database();
		// $Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		// $this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["subMenuId"]			= $id;
		$this->load->view('brq-admin/company-type',$data);
        
	}
	
	//==================================== companyTypeList function to get DataTables of company type - by Sajitha ================================
	public function companyTypeList($subid="")
	{
		$list = $this->CompanyType_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = $data->Type;
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} 
			$row[] = $data->OrderValue;
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			$actions= $this->useractionpermission($subid,$data->Id);
			$row[] = $actions;	 
			$data1[] = $row;
		
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->CompanyType_model->countAll(),
						"recordsFiltered" => $this->CompanyType_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}
	
	//==================================== saveCompanyType function for company type details - by Sajitha ================================
	public function saveCompanyType()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$companyType  			= $this->input->post('CompanyType_Name');
		$professionType  		= $this->input->post('Profession_Type');
		$orderValue  			= $this->input->post('Order_Value');
		$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " UPPER(`Type`)='".strtoupper($companyType)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("sys_company_type", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This company type is already created and exists! Please change the company type."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'Type' => $companyType,
						'ProfessionId' => $professionType,
						'Status' => $status,
						'OrderValue' => $orderValue,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'Type' => $companyType,
						'ProfessionId' => $professionType,
						'Status' => $status,
						'OrderValue' => $orderValue,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		
		$res	= $this->CompanyType_model->saveData($data, $id);
		$resData = array("status" => true,'message' => 'Company Type details saved successfully!!');
		
		echo json_encode($resData);
	}
	
	//=========================== deleteCompanyType function used for deleting Company Type details by id from sys_company_type table===========================	 
	public function deleteCompanyType($id)
	{
       $res    =  $this->CompanyType_model->deleteData($id);
       $resData =array();
	  
	   if($res['status'])
	   {
			$resData=array(
					"status"=>true,
					"message"=>$res['message']
				   );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
		echo json_encode($resData); 
    }    
		
	//=========================== getEditCompanyType function used for getting a Company Type details by id in sys_company_type table ===========================	 
	public function getEditCompanyType($id)
	{
		$data = $this->CompanyType_model->getById($id);
		echo json_encode($data);
	}
	
	//Function to view social media url view page
	public function social_media_url($id="",$moduleTab="social_media_url")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		$data["subMenuId"]			= $id;
		$this->load->view('brq-admin/social-media-url',$data);
        
	}
	
	//==================================== socialMediaURLList function to get DataTables of Social Media URL List - by Sajitha ================================
	public function socialMediaURLList($subid="")
	{
		$list = $this->SocialMediaURL_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = $data->Type;
			$row[] = '<a href="'.$data->URL.'" target="_blank">'.$data->URL.'</a>';
			if($data->Status == 'Active') {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == 'Inactive') {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} 
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			$actions= $this->useractionpermission($subid,$data->Id);
			$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->SocialMediaURL_model->countAll(),
						"recordsFiltered" => $this->SocialMediaURL_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}  
	
	//==================================== saveSocialMediaURL function for Social Media URL details - by Sajitha ================================
	public function saveSocialMediaURL()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$socialMediaTypeName  	= $this->input->post('SocialMediaType_Name');
		$socialMediaURL  		= $this->input->post('Social_Media_URL');
		$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " UPPER(`Type`)='".strtoupper($socialMediaTypeName)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("sys_social_media_url", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Social Media URL is already created and exists! Please change the Social Media URL."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'Type' => $socialMediaTypeName,
						'URL' => $socialMediaURL,
						'Status' => $status,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'Type' => $socialMediaTypeName,
						'URL' => $socialMediaURL,
						'Status' => $status,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		
		$res	= $this->SocialMediaURL_model->saveData($data, $id);
		$resData = array("status" => true,'message' => 'Social Media URL details saved successfully!!');
		
		echo json_encode($resData);
	}
	
		
	//=========================== getEditSocialMediaURL function used for getting a Social Media URL details by id in sys_social_media_url table ===========================	 
	public function getEditSocialMediaURL($id)
	{
		$data = $this->SocialMediaURL_model->getById($id);
		echo json_encode($data);
	}
	
	//=========================== deleteSocialMediaURL function used for deleting Social Media URL details by id from sys_social_media_url table===========================	 
	public function deleteSocialMediaURL($id)
	{
       $res    =  $this->SocialMediaURL_model->deleteData($id);
       $resData =array();
	  
	   if($res['status'])
	   {
			$resData=array(
					"status"=>true,
					"message"=>$res['message']
				   );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
		echo json_encode($resData); 
    }    
	
	//Function to view languages view page
	
	public function languages($id= "",$moduleTab="languages")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["subMenuId"]		= $id;
		$this->load->view('brq-admin/languages',$data);
        
	}
	
	//==================================== languageList function to get DataTables of Languages - by Sajitha ================================
	public function languageList($subid="")
	{
		$list = $this->Language_model->getDataTables();
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		
		foreach ($list as $data) {
			$actions	 = "";
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Active";
			$no++;
			$id = $data->Id;
			$row = array();
			$db = new Database();			
			$row[] = $data->Language;
			if($data->Status == 1) {
				$statusClass = "label label-success";
				$row[] = "<span class='" . $statusClass . "'>Active</span>";
			} else if($data->Status == 0) {
				$statusClass = "label label-warning";
				$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
			} 
			$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] =  $data->CreatedBy;
			$actions= $this->useractionpermission($subid,$data->Id);
			$row[] = $actions;	 
			$data1[] = $row;
		}
		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Language_model->countAll(),
						"recordsFiltered" => $this->Language_model->countFiltered(),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
	}

	
	//==================================== saveLanguage function for saving Language details - by Sajitha ================================
	public function saveLanguage()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$language  				= $this->input->post('Language_Name');
		$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " UPPER(`language`)='".strtoupper($language)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("sys_languages", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This language is already created and exists! Please change the language name."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'language' => $language,
						'Status' => $status,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'language' => $language,
						'Status' => $status,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		
		$res	= $this->Language_model->saveData($data, $id);
		$resData = array("status" => true,'message' => 'Language details saved successfully!!');
		
		echo json_encode($resData);
	}
	
	//=========================== deleteLanguage function used for deleting Language details by id from sys_languages table===========================	 
	public function deleteLanguage($id)
	{
       $res    =  $this->Language_model->deleteData($id);
       $resData =array();
	  
	   if($res['status'])
	   {
			$resData=array(
					"status"=>true,
					"message"=>$res['message']
				   );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
		echo json_encode($resData); 
    }    
		
	//=========================== getEditLanguage function used for getting a Language details by id in sys_languages table ===========================	 
	public function getEditLanguage($id)
	{
		$data = $this->Language_model->getById($id);
		echo json_encode($data);
	}
	
	
	//====================================Function to get DataTables of Employee's Language details List ================================
	public function employeeLangList($subId="")
	{
		$employeeId = $this->input->post('employeeId');
		$language 	= $this->input->post('language');
		$branch		= $this->input->post('branch');
		$department	= $this->input->post('department');
		$list 	= 	$this->EmployeeLanguage_model->getDataTables($employeeId,$branch,$department,$language);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		$db  	= new Database();
		
		foreach ($list as $data) {
		
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->EmployeeId;
			$row 			= array();
			
			$profilePath 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/';
			$mainPhoto		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$data->EmployeeId}'");
			if($mainPhoto == '') {
				if($db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'") == "Male")
					$mainPhoto 	= "male.png";
				else
					$mainPhoto 	= "female.png";
			}
			
			$profilePhotoLarge 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").$mainPhoto;
			$profilePhoto 	= $profilePath.$mainPhoto;
			if(!(file_exists($db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/'.$mainPhoto)) || $mainPhoto == '') {
				if($data->Sex == "Male")
					$profilePhoto 	= $profilePath."male.png";
				else
					$profilePhoto 	= $profilePath."female.png";
			}
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'").'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';
			$row[] = $db->getFieldValueById("employee_master", "Code", "Id='{$data->EmployeeId}'");
			$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
			$row[] = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");
			$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");			
			$row[] = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");	
			$row[] = $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");
			$row[] = $db->getFieldValueById("sys_languages", "Language", "Id='{$data->LanguageId}'");
			$row[] = $data->Read."/ ".$data->Speak."/ ".$data->Write;
			$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] = $data->CreatedBy;
			if($data->Status=="Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			 
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			
			$actions ="";
			$edit 	="Sub_Edit_".$subId;
			$copy 	="Sub_Copy_".$subId;
			$delete ="Sub_Del_".$subId;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			//add html for action
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .= '<div class="dropdown-menu" role="menu" style="">'
	                     .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editEmpLangData('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}   
			if(in_array($copy,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .= '<div class="dropdown-divider"></div>'
	                     .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editEmpLangData('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .= '<div class="dropdown-divider"></div>'
	                  	 .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteEmpLangData('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			} 
			 	$actions .=' </div>'
	                  	 .'</div>';
			
			//add html for action
			$row[] = $actions;
		  	
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->EmployeeLanguage_model->countAll(),
						"recordsFiltered" => $this->EmployeeLanguage_model->countFiltered($employeeId,$branch,$department,$language),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
		
	}

	
	//==================================== saveEmployeeLang function for Saving Employee Language details - by Sajitha ================================
	public function saveEmployeeLang()
	{
		$id						= $this->input->post("id");
		$data 					= array(); 
		$employeeId 			= $this->input->post('EmployeeId');	
		$language  				= $this->input->post('Language');
		$read 					= $this->input->post('Read');	
		$reading_proficiency 	= $this->input->post('Read_Proficiency');	
		$write 					= $this->input->post('Write');	
		$writing_proficiency 	= $this->input->post('Write_Proficiency');	
		$speak 					= $this->input->post('Speak');	
		$speaking_proficiency 	= $this->input->post('Speak_Proficiency');	
		$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " `LanguageId`={$language} and `EmployeeId`={$employeeId} and Id!={$id}";
		$res 			= $db->checkExistance("employee_language", $where); // if exists id value will be returned.
		
		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This employee language is already created and exists!"
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'LanguageId' => $language,
						'Status' => $status,
						'EmployeeId' => $employeeId,
						'Read' => $read,
						'ReadProficiency' => $reading_proficiency,
						'Write' => $write,
						'WriteProficiency' => $writing_proficiency,
						'Speak' => $speak,
						'SpeakProficiency' => $speaking_proficiency,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'LanguageId' => $language,
						'Status' => $status,
						'EmployeeId' => $employeeId,
						'Read' => $read,
						'ReadProficiency' => $reading_proficiency,
						'Write' => $write,
						'WriteProficiency' => $writing_proficiency,
						'Speak' => $speak,
						'SpeakProficiency' => $speaking_proficiency,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		$res	= $this->EmployeeLanguage_model->saveData($data, $id);
		
		$resData = array('status' => true,'message' => 'Employee Language details saved successfully!!');
		
		echo json_encode($resData);
	}	
	
	//=========================== getEditEmployeeLanguage function used for getting a Employee Language details by id from employee_language table===========================	 
	public function getEditEmployeeLanguage($id)
	{
		$data = $this->EmployeeLanguage_model->getById($id);
		$resData = array();
		
		$db = new Database();			
		$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
		$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
	    $resData = array(
						"BranchId" => $branchId,
						"DepId" => $depId
				 );
		$resData = (object) array_merge((array) $resData,(array) $resData1, (array) $data);
		echo json_encode($resData);
	}
	
	//=========================== deleteEmpLangData function used for deleting Employee Language details by id from employee_language table===========================	 
	public function deleteEmpLangData($id)
	{
		
       $res    =  $this->EmployeeLanguage_model->deleteData($id);
       
	   $resData =array();
	   if($res)
	   {	    			
			$resData    = array(
								"status" => true,
								'message' => 'Employee language deleted successfully!!'
						 );
		   
	   }
	   else
	   {
		    $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Employee language!!"
				   );
	   }
	   echo json_encode($resData);
    } 
	
	
	//====================================Function to get DataTables of Employee's Dependent details List ================================
	public function employeeDepeList($subId="")
	{
		$employeeId = $this->input->post('employeeId');
		$relationship 	= $this->input->post('relationship');
		$branch		= $this->input->post('branch');
		$department	= $this->input->post('department');
		$list 	= 	$this->EmployeeDependent_model->getDataTables($employeeId,$branch,$department,$relationship);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		$db  	= new Database();
		//$no=1;
		
		foreach ($list as $data) {
		
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->EmployeeId;
			$row 			= array();
			
			$profilePath 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/';
			$mainPhoto		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$data->EmployeeId}'");
			if($mainPhoto == '') {
				if($db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'") == "Male")
					$mainPhoto 	= "male.png";
				else
					$mainPhoto 	= "female.png";
			}
			
			$profilePhotoLarge 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").$mainPhoto;
			$profilePhoto 	= $profilePath.$mainPhoto;
			if(!(file_exists($db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/'.$mainPhoto)) || $mainPhoto == '') {
				if($data->Sex == "Male")
					$profilePhoto 	= $profilePath."male.png";
				else
					$profilePhoto 	= $profilePath."female.png";
			}
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'").'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';
			$row[] = $db->getFieldValueById("employee_master", "Code", "Id='{$data->EmployeeId}'");
			$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
			$row[] = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");
			$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");			
			$row[] = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");	
			$row[] = $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");
			$row[] = $data->DependentName;
			$row[] = $data->Relationship;
			$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] = $data->CreatedBy;
			if($data->Status=="Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			 
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			
			$actions ="";
			$edit ="Sub_Edit_".$subId;
			$copy ="Sub_Copy_".$subId;
			$delete ="Sub_Del_".$subId;
			
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			

			//add html for action
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                 	 .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editEmpDepeData('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}   
			if(in_array($copy,$userGroupPermission)||in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                 	 .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editEmpDepeData('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                 	 .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteEmpDepeData('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			} 
			$actions .=' </div>'
	                  .'</div>';
			
			//add html for action
			$row[] = $actions;
		  	
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->EmployeeDependent_model->countAll(),
						"recordsFiltered" => $this->EmployeeDependent_model->countFiltered($employeeId,$branch,$department,$relationship),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
		
	}
		
	//==================================== saveEmployeeDepe function for Saving Employee Dependent details - by Sajitha ================================
	public function saveEmployeeDepe()
	{
		$id						= $this->input->post("id");
		$data 					= array(); 
		$employeeId 			= $this->input->post('EmployeeId');	
		$dependent  			= $this->input->post('DependentName');
		$gender  				= $this->input->post('DependentGender');
		$relationship 			= $this->input->post('Relationship');
		$dob_str 				= $this->input->post('Depe_DOB');
		$dob_str 				= str_replace('/', '-', $dob_str);
		$depe_DOB 				= date('Y-m-d',(strtotime($dob_str)));		
		$aadhar_number 			= $this->input->post('Aadhar_Number');	
		$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " `DependentName`='{$dependent}' and `Relationship`={$relationship} and `EmployeeId`={$employeeId} and Id!={$id}";
		$res 			= $db->checkExistance("employee_dependent", $where); // if exists id value will be returned.
		
		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This employee's dependent is already created and exists!"
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'DependentName' => $dependent,
						'DependentGender' => $gender,
						'Status' => $status,
						'EmployeeId' => $employeeId,
						'Relationship' => $relationship,
						'DOB' => $depe_DOB,
						'AadhaarNumber' => $aadhar_number,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'DependentName' => $dependent,
						'DependentGender' => $gender,
						'Status' => $status,
						'EmployeeId' => $employeeId,
						'Relationship' => $relationship,
						'DOB' => $depe_DOB,
						'AadhaarNumber' => $aadhar_number,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		$res	= $this->EmployeeDependent_model->saveData($data, $id);
		
		$resData = array('status' => true,'message' => "Employee's Dependent details saved successfully!!");
		
		echo json_encode($resData);
	}	
	
	//=========================== getEditEmployeeDependent function used for getting a Employee's Dependent details by id from employee_dependent table===========================	 
	public function getEditEmployeeDependent($id)
	{
		$data = $this->EmployeeDependent_model->getById($id);
		$resData = array();
		
		$db = new Database();			
		$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
		$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
	    $resData = array(
						"BranchId" => $branchId,
						"DepId" => $depId
				 );
		$resData = (object) array_merge((array) $resData,(array) $resData1, (array) $data);
		echo json_encode($resData);
	}
	
	//=========================== deleteEmpDepeData function used for deleting Employee's Dependent details by id from employee_language table===========================	 
	public function deleteEmpDepeData($id)
	{
		
       $res    =  $this->EmployeeDependent_model->deleteData($id);
       
	   $resData =array();
	   if($res)
	   {	    			
			$resData    = array(
								"status" => true,
								'message' => "Employee's Dependent deleted successfully!!"
						 );
		   
	   }
	   else
	   {
		    $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Employee's Dependent!!"
				   );
	   }
	   echo json_encode($resData);
    } 
	
	//====================================Function to get DataTables of Employee's Emergency Contacts details List ================================
	public function employeeContactList($subId="")
	{
		$employeeId = $this->input->post('employeeId');
		$relationship 	= $this->input->post('relationship');
		$branch		= $this->input->post('branch');
		$department	= $this->input->post('department');
		$list 	= 	$this->EmployeeContact_model->getDataTables($employeeId,$branch,$department,$relationship);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		$db  	= new Database();
		//$no=1;
		
		foreach ($list as $data) {
		
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->EmployeeId;
			$row 			= array();
			
			$profilePath 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/';
			$mainPhoto		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$data->EmployeeId}'");
			if($mainPhoto == '') {
				if($db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'") == "Male")
					$mainPhoto 	= "male.png";
				else
					$mainPhoto 	= "female.png";
			}
			
			$profilePhotoLarge 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").$mainPhoto;
			$profilePhoto 	= $profilePath.$mainPhoto;
			if(!(file_exists($db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/'.$mainPhoto)) || $mainPhoto == '') {
				if($data->Sex == "Male")
					$profilePhoto 	= $profilePath."male.png";
				else
					$profilePhoto 	= $profilePath."female.png";
			}
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'").'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';
			$row[] = $db->getFieldValueById("employee_master", "Code", "Id='{$data->EmployeeId}'");
			$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
			$row[] = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");
			$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");			
			$row[] = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");	
			$row[] = $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");
			$row[] = $data->ContactName;
			$row[] = $data->Relationship;
			$row[] = $data->Mobile;
			$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			if($data->Status=="Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			 
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			
			$actions ="";
			$edit ="Sub_Edit_".$subId;
			$copy ="Sub_Copy_".$subId;
			$delete ="Sub_Del_".$subId;
			
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			//add html for action
				$actions = '<div class="btn-group">'
						.' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
						.'Action<span class="sr-only">Toggle Dropdown</span>'
						.'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                 	 .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editEmpContactData('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}   
			if(in_array($copy,$userGroupPermission)||in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  	 .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Copy"  onclick="editEmpContactData('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  	 .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteEmpContactData('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			} 
			$actions .=' </div>'
	                  .'</div>';
			
			//add html for action
			$row[] = $actions;
		  	
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->EmployeeContact_model->countAll(),
						"recordsFiltered" => $this->EmployeeContact_model->countFiltered($employeeId,$branch,$department,$relationship),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
		
	}
	
	//==================================== saveEmployeeContact function for Saving Employee's Emergency Contacts details - by Sajitha ================================
	public function saveEmployeeContact()
	{
		$id						= $this->input->post("id");
		$data 					= array(); 
		$employeeId 			= $this->input->post('EmployeeId');	
		$contactName  			= $this->input->post('ContactName');
		$relationship 			= $this->input->post('Relationship');
		$email 					= $this->input->post('Email');
		$mobile 				= $this->input->post('Mobile');
		$home_phone 			= $this->input->post('Home_Phone');	
		$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " `ContactName`='{$contactName}' and `Relationship`={$relationship} and `EmployeeId`={$employeeId} and Id!={$id}";
		$res 			= $db->checkExistance("employee_emergency_contacts", $where); // if exists id value will be returned.
		
		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This employee's emergency contact is already created and exists!"
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'ContactName' => $contactName,
						'Status' => $status,
						'EmployeeId' => $employeeId,
						'Relationship' => $relationship,
						'Mobile' => $mobile,
						'Email' => $email,
						'HomePhone' => $home_phone,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'ContactName' => $contactName,
						'Status' => $status,
						'EmployeeId' => $employeeId,
						'Relationship' => $relationship,
						'Mobile' => $mobile,
						'Email' => $email,
						'HomePhone' => $home_phone,
						'ModifiedBy' => $_SESSION['ADMIN_ID'],
						'ModifiedOn' => date('Y-m-d H:i:s'),			
					);						
		}
		$res	= $this->EmployeeContact_model->saveData($data, $id);
		$db = new BrqDatabase();
		$resCombo = $db->getContactRelationCombo();
		
		$resData = array('status' => true,'message' => "Employee's Emergency Contact details saved successfully!!",'filterRelationships' => $resCombo);
		
		echo json_encode($resData);
	}	
	
	//=========================== getEditEmployeeContact function used for getting a Employee's Emergency Contact details by id from employee_dependent table===========================	 
	public function getEditEmployeeContact($id)
	{
		$data = $this->EmployeeContact_model->getById($id);
		$resData = array();
		
		$db = new Database();			
		$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
		$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
	    $resData = array(
						"BranchId" => $branchId,
						"DepId" => $depId
				 );
		$resData = (object) array_merge((array) $resData,(array) $resData1, (array) $data);
		echo json_encode($resData);
	}
	
	//=========================== deleteEmpDepeData function used for deleting Employee's Emergency Contact details by id from employee_language table===========================	 
	public function deleteEmpContactData($id)
	{
		
       $res    =  $this->EmployeeContact_model->deleteData($id);
       
	   $resData =array();
	   if($res)
	   {	    			
			$db = new BrqDatabase();
			$resCombo = $db->getContactRelationCombo();
		
			$resData    = array(
								"status" => true,
								'message' => "Employee's Emergency Contact deleted successfully!!",
								'filterRelationships' => $resCombo
						 );
		   
	   }
	   else
	   {
		    $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Employee's Emergency Contact!!"
				   );
	   }
	   echo json_encode($resData);
    } 
	
	
	//====================================Function to get DataTables of Employee's Beneficiary Information List ================================
	public function employeeBeneficiaryList($subId="")
	{
		$employeeId = $this->input->post('employeeId');
		$branch		= $this->input->post('branch');
		$department	= $this->input->post('department');
		$list 	= 	$this->EmployeeBeneficiary_model->getDataTables($employeeId,$branch,$department);
		
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		$db  	= new Database();
		//$no=1;
		
		foreach ($list as $data) {
		
			$statusClass 	= "label label-success";
			$showClass	 	= "label label-success";
			$statusText	 	= "Active";
			$no++;
			$id 			= $data->EmployeeId;
			$row 			= array();
			
			$profilePath 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/';
			$mainPhoto		= $db->getFieldValueById("employee_master", "ProfilePhoto", "Id='{$data->EmployeeId}'");
			if($mainPhoto == '') {
				if($db->getFieldValueById("employee_master", "Sex", "Id='{$data->EmployeeId}'") == "Male")
					$mainPhoto 	= "male.png";
				else
					$mainPhoto 	= "female.png";
			}
			
			$profilePhotoLarge 	= base_url().$db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").$mainPhoto;
			$profilePhoto 	= $profilePath.$mainPhoto;
			if(!(file_exists($db->getFieldValueById("employee_master", "ProfilePhotoPath", "Id='{$data->EmployeeId}'").'thumb/'.$mainPhoto)) || $mainPhoto == '') {
				if($data->Sex == "Male")
					$profilePhoto 	= $profilePath."male.png";
				else
					$profilePhoto 	= $profilePath."female.png";
			}
			$row[] = '<a href="javascript:void(0)" onclick="popUpImage(\''.$profilePhotoLarge.'\',\''.$db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'").'\');" ><img   class="rounded-circle" src="'.$profilePhoto.'" height="40" width="40" alt=""></a>';
			$row[] = $db->getFieldValueById("employee_master", "Code", "Id='{$data->EmployeeId}'");
			$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
			$row[] = $db->getFieldValueById("branches", "BranchName", "Id='{$branchId}'");
			$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");			
			$row[] = $db->getFieldValueById("department", "DepartmentName", "Id='{$depId}'");	
			$row[] = $db->getFieldValueById("employee_master", "FirstName", "Id='{$data->EmployeeId}'")." ".$db->getFieldValueById("employee_master", "LastName", "Id='{$data->EmployeeId}'");
			$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] = $data->CreatedBy;
			if($data->Status=="Inactive")
			{
				$statusClass = "label label-danger";
				$statusText  = "Inactive";
			}
			 
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			
			$actions ="";
			$edit ="Sub_Edit_".$subId;
			$delete ="Sub_Del_".$subId;
			
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			//add html for action
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  	 .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editEmpBeneficiaryData('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}   
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  	 .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteEmpBeneficiaryData('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			} 
			$actions .=' </div>'
	                  .'</div>';
			
			//add html for action
			$row[] = $actions;
		  	
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->EmployeeBeneficiary_model->countAll(),
						"recordsFiltered" => $this->EmployeeBeneficiary_model->countFiltered($employeeId,$branch,$department),
						"data" => $data1,
				);
		//output as json format
		echo json_encode($output);
		
	}
		
	//==================================== saveEmployeeBeneficiary function for Saving Employee Beneficiary details - by Sajitha ================================
	public function saveEmployeeBeneficiary()
	{
		$data 					= array(); 
		$employeeId 			= $this->input->post('EmployeeId');	
		$details  				= json_decode($this->input->post('DetailsArray')); // JSON decode of JSON array
		$allIds 				= '';
		
		for($i = 0; $i < count($details); $i++) {
			
			//Creating $updatedArray for each sub array of input fields of Beneficiary Information for insert/update sql query
			$updatedArray = [];
			$updatedArray = array_merge($updatedArray, ['EmployeeId' => $employeeId]);
			$updatedArray = array_merge($updatedArray, ['CreatedBy' => $_SESSION['ADMIN_ID']]);
			foreach ($details[$i] as $key => $value) {
				if (!is_array($value) && $key == 0) { // Changing Key value of array from 0 to 'BeneficiaryName' for insert/update sql query
					$updatedArray = array_merge($updatedArray, ['BeneficiaryName' => $value]);
					continue;
				}
				else if (!is_array($value) && $key == 1) { // Changing Key value of array from 1 to 'Gender' for insert/update sql query
					$updatedArray = array_merge($updatedArray, ['Gender' => $value]);
					continue;
				}
				else if (!is_array($value) && $key == 2) { // Changing Key value of array from 2 to 'Relationship' for insert/update sql query
					$updatedArray = array_merge($updatedArray, ['Relationship' => $value]);
					continue;
				}
				else if (!is_array($value) && $key == 3) { // Changing Key value of array from 3 to 'DOB' for insert/update sql query
					$dob_str 	  = $value;
					$dob_str      = str_replace('/', '-', $dob_str);
					$bene_DOB 	  = date('Y-m-d',(strtotime($dob_str)));
					$updatedArray = array_merge($updatedArray, ['DOB' => $bene_DOB]);
					continue;
				}
				else if (!is_array($value) && $key == 4) { // Changing Key value of array from 4 to 'AadhaarNumber' for insert/update sql query
					$updatedArray = array_merge($updatedArray, ['AadhaarNumber' => $value]);
					continue;
				}
				else if (!is_array($value) && $key == 5) { // Changing Key value of array from 5 to 'Status' for insert/update sql query
					$updatedArray = array_merge($updatedArray, ['Status' => $value]);
					continue;
				}
				else if (!is_array($value) && $key == 6) { // Changing Key value of array from 6 to 'Allocation' for insert/update sql query
					$updatedArray = array_merge($updatedArray, ['Allocation' => $value]);
					continue;
				}
				else if (!is_array($value) && $key == 7) { 
					$id = $value; // Ids from each row to be inserted/updateed
					
					continue;
				}
				else {
					continue;
				}
			}
			// Saving each row of Table of Beneficiary Information
			$allIds .= $this->EmployeeBeneficiary_model->saveData($updatedArray, $id); // $allIds will be having Id s of all inserted/updated rows. separated by ,
			$allIds .= ",";
		}
		
		// all Ids of Rows from table to find out if any Rows are removed from html Table of Beneficiary Information that will be deleted from the database table in below codes
		$allIds = substr($allIds, 0, -1);
		
		// If any row Id is missing for EmployeeId that Id will be delete by assuming it is removed from the html Table of Beneficiary Information
		$SQL 		="SELECT Id ";
		$SQL 		.=" FROM employee_beneficiary where EmployeeId={$employeeId} and Id NOT IN ({$allIds})";
		$list		=  $this->db->query($SQL);
		if($list->num_rows()>0)
		{
			foreach($list->result()  as $row)
			 {
				$res    =  $this->EmployeeBeneficiary_model->deleteData($row->Id);
			 }
		}
		$resData = array('status' => true,'message' => "Employee's Beneficiary Information saved successfully!!");
		
		echo json_encode($resData);
	}	
	
	//=========================== getEditEmployeeBeneficiary function used for getting a Employee's Beneficiary Information by id from employee_beneficiary table===========================	 
	public function getEditEmployeeBeneficiary($id)
	{
		$data = $this->EmployeeBeneficiary_model->getById($id); // Details of selected Id (may be any Id) of employee_beneficiary table details of Employeed id
		$dataOther = $this->EmployeeBeneficiary_model->getOthersById($data->EmployeeId,$id); // Details of other Ids (other than the first Id) of employee_beneficiary table details of Employeed id will be saved to $dataOther array
		$resData = array();
		
		$db = new Database();			
		$branchId = $db->getFieldValueById("employee_master", "BranchId", "Id='{$data->EmployeeId}'");
		$depId = $db->getFieldValueById("employee_master", "DepId", "Id='{$data->EmployeeId}'");
	    $resData = array(
						"BranchId" => $branchId,
						"DepId" => $depId,
						"CountDataOther" => count($dataOther), // count of other Ids (other than the first Id) of employee_beneficiary table details of Employeed id 
				 );
		$resData = (object) array_merge((array) $resData,(array) $resData1,(array) $dataOther, (array) $data);
		echo json_encode($resData);
	}
	
	//=========================== deleteEmpBeneficiaryData function used for deleting Employee's Beneficiary Information by id from employee_language table===========================	 
	public function deleteEmpBeneficiaryData($id)
	{
	   $data = $this->EmployeeBeneficiary_model->getById($id); 
	   $dataOther = $this->EmployeeBeneficiary_model->getOthersById($data->EmployeeId,$id); // Details of other Ids (other than the first Id) to be deleted from employee_beneficiary table details of Employeed id will be saved to $dataOther array
	   foreach ($dataOther as $value) {
		  $res    =  $this->EmployeeBeneficiary_model->deleteData($value->Id);
	   }
		$res    =  $this->EmployeeBeneficiary_model->deleteData($id); // Details of Id (may be any Id) to be deleted from employee_beneficiary table details of Employeed id
       
	   $resData =array();
	   if($res)
	   {	    			
			$resData    = array(
								"status" => true,
								'message' => "Employee's Beneficiary Information deleted successfully!!"
						 );
		   
	   }
	   else
	   {
		    $resData=array(
					"status"=>false,
					"message"=>"Oops! Error, Can't delete Employee's Beneficiary Information!!"
				   );
	   }
	   echo json_encode($resData);
    } 
	
	public function instant_quotation()
	{
		$data 					 = array();
		$data["headTitle"] 		 = $this->headTitle .": instant-quotation";
        $data["adminController"] = $this->adminController;
		$data["clientController"] =$this->clientController;
		
		// private function for getting all services and details.
		$data["serviceMenu"]	 = $this->getAllServiceRecords(); // here for loading service menu in header_menu view.
		
		
		// private function for getting all products and details.
		$data["productMenu"]	 = $this->getAllProductsRecords(); // here for loading product menu in header_menu view.
		
		// private function for getting contact information.
		$data["ContactDetail"]		 = $this->getAllContactDetails(); // for loading contact information in contact view.
		
		// private function for getting all images at the bottom.
		$data["galleryImage"]	 = $this->galleryImages(); // here for loading images.
		
		// for footer links left side after logo description, taking some words from about us.
		$data["footerLeftSideDescription"] = $this->getFooterLeftSideDescription();
		
		$data["currentPage"]		 ="pricing";
		
		$this->load->view("public/instant-quotation", $data);
	}


	// function for load Terms & Condition Privacy Policy [ Author:Kamarudheen ]

	public function privacy_policy()
	{
		$data 					 = array();
		
		$data["headTitle"] 		 = $this->headTitle.": Privacy Policy";
       
 	    $data["adminController"] = $this->adminController;
		$data["clientController"] =$this->clientController;

		// private function for getting all services and details.
		$data["serviceMenu"]	 = $this->getAllServiceRecords(); // here for loading service menu in header_menu view.
		
		
		// private function for getting all products and details.
		$data["productMenu"]	 = $this->getAllProductsRecords(); // here for loading product menu in header_menu view.
		
		// private function for getting contact information.
		$data["ContactDetail"]		 = $this->getAllContactDetails(); // for loading contact information in contact view.
		
		// private function for getting all images at the bottom.
		$data["galleryImage"]	 = $this->galleryImages(); // here for loading images.
		
		// for footer links left side after logo description, taking some words from about us.
		$data["footerLeftSideDescription"] = $this->getFooterLeftSideDescription();
		
		$data["currentPage"]		 ="Privacy Policy";
		
		$this->load->view("public/privacy-policy", $data);
		
	}
	
	
	// function to load settings home [ Author:Akhila ]
	public function siteManager($id)
	{
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$_SESSION["USER_MODULE_PAGE"]	="site_manager"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["Id"]				= $id;
		
		$this->load->view("brq-admin/siteManager-home", $data);
		
	}
	
	// function to check whether EMail and Mobile are verified in add / edit customer and show error messages accordingly.
	public function checkAvailabilityRegisterAdd()
	{
		$field 		= $this->input->post('check'); // Email / MobileNo (Table field name)
		$value 		= $this->input->post('value'); // Entered value
		$action 	= $this->input->post('action'); // add / edit
		
		$where 		= $field . "='{$value}'";
		
		$db 		= new Database();
		$res 		= $db->getFieldValueById("client_registration", "Id", $where ); // getting Id according to the Email / MobileNo
	    
		$email      = $db->getFieldValueById("client_registration", "isEmailVerified",  $where);// getting isEmailVerified according to the Email / MobileNo
		$mob        = $db->getFieldValueById("client_registration", "isMobileVerified",  $where);// getting isMobileVerified according to the Email / MobileNo
		
		//If action = 'add' setting the different messages accordingly
		if($action == 'add') {
			$msgOK 	      = "{$field} is not yet registered and available.";
	
			$msgError 	  =	"<span id= 'link' ><i class='fa fa-meh-o' style='color:#f00;'> Sorry! This $field has already registered! Email and mobile are  not verified. Please use edit option.</i> </span>";
		
			$mobileMsg     = "<span><i class='fa fa-meh-o' style='color:#f00;'> This $field has already registered & email is verified! Please verify mobile.</a></li> </span>";
			
			$emailMsg     = "<span><i class='fa fa-meh-o' style='color:#f00;'> This $field has already registered & mobile is verified! Please verify email.</a></li> </span>";
			
			$emailMobMsg  = "<span><i class='fa fa-meh-o' style='color:#f00;'> Sorry! This $field has already registered! Please change the $field field. </li> </span>";
		} else if($action == 'edit') { //If action = 'edit' setting the different messages accordingly
			$msgOK 	      = "{$field} is not yet registered and available.";
		
			$msgError 	  =	"<span id= 'link' ><i class='fa fa-meh-o' style='color:#f00;'> Email and mobile are  not verified. Please verify both.</i> </span>";
			
			$mobileMsg     = "<span><i class='fa fa-meh-o' style='color:#f00;'> Mobile is not verified! Please verify mobile.</a></li> </span>";
			
			$emailMsg     = "<span><i class='fa fa-meh-o' style='color:#f00;'> Email is not verified! Please verify email.</a></li> </span>";
			
			$emailMobMsg  = "<span><i class='fa fa-meh-o' style='color:#f00;'> Sorry! This $field has already registered! Please change the $field field. </li> </span>";
		}
		
		
		if($res!=NULL and $res > 0 and $mob!= 1 and $email!= 1  ) //If both Mobile and Email are not verified	 
			{
				echo json_encode(array("status"=>false, "message"=>$msgError,'em'=>true));
				exit;
			}
		
		if($res!=NULL and $res > 0 and $mob != 1 and $email == 1 ) //If Mobile is not verified and EMail is verified
			{
				echo json_encode(array("status"=>false, "message"=>$mobileMsg, 'notemob'=>true));
				exit;
			}
		
		if($res!=NULL and $res > 0 and $mob == 1 and $email != 1 ) //If EMail is not verified and Mobile is verified
			{
				echo json_encode(array("status"=>false, "message"=>$emailMsg, 'notemail'=>true));
				exit;
			}
		
		if($res!=NULL and $res > 0 && $mob == 1 and $email == 1 ) //If EMail and Mobile are verified
			{
				echo json_encode( array("status"=>false, "message"=>$emailMobMsg ,'emob'=>true));
				exit;
			}

		$resData = array("status"=>true, "message"=>$msgOK); //If EMail and Mobile are not yet registered and available in case of add
		echo json_encode($resData);	
	}
	
	// function to check whether EMail and Mobile are verified in edit customer and generate OTP accordingly.
	public function checkAvailabilityRegisterEdit()
	{
		$field 		= $this->input->post('check');// Email / MobileNo (Table field name)
		$value 		= $this->input->post('value');// Entered value
		
		$where 		= $field . "='{$value}'";
		
		$db 		= new Database();
		$res 		= $db->getFieldValueById("client_registration", "Id", $where );// getting Id according to the Email / MobileNo
	    
		$email      = $db->getFieldValueById("client_registration", "isEmailVerified",  $where);// getting isEmailVerified according to the Email / MobileNo
		$mob        = $db->getFieldValueById("client_registration", "isMobileVerified",  $where);// getting isMobileVerified according to the Email / MobileNo
		
		if($res!=NULL and $res > 0 and $field == 'MobileNo' and $mob!= 1)	// Generating OTP for Mobile verification 
		 {
			
			$otpcode 				            = $this->Common_model->generateOTP(5);
			// insert new row into sys_otp table starts
			$otp 					                = encriptPassword($otpcode);
			$data['OTP'] 			                = $otp;
			$data['ModuleId'] 		                = $res;
			$data['ModuleName'] 	                = "Client_Mobile_OTP";
			$data['CreatedBy'] 		            	= $_SESSION['ADMIN_ID'];
			$data['CreatedOn'] 		                = date('Y-m-d H:i:s');
			$data['OTPExpireOn'] 	                = date("Y-m-d H:i:s", strtotime("+15 minutes"));
			$data['Status'] 		                = 1;
			
			//$moduleName				            =str_replace("_","",$moduleName);
			$data['Description'] 	                = 'OTP generated for mobile verification in Client Registration.';
			
			// --- checking the existance in sys_otp table to delete starts
			$this->db->delete('sys_otp', array('ModuleId' => $res,'ModuleName' => "Client_Mobile_OTP"));
			// --- checking the existance in sys_otp table to delete ends
			$this->db->insert('sys_otp',$data);
			// --- insert new row into sys_otp table ends
			
			echo json_encode(array("status"=>false, "otpMobile"=>$otpcode));
			exit;
		 }
		
		 if($res!=NULL and $res > 0  and $field == 'Email' and $email != 1 ) // Generating OTP for EMail verification 
			{
				
				$otpcode 				                = $this->Common_model->generateOTP(5);
				// insert new row into sys_otp table starts
				$otp 					                = encriptPassword($otpcode);
				$data['OTP'] 			                = $otp;
				$data['ModuleId'] 		                = $res;
				$data['ModuleName'] 	                = "Client_Email_OTP";
				$data['CreatedBy'] 		            	= $_SESSION['ADMIN_ID'];
				$data['CreatedOn'] 		                = date('Y-m-d H:i:s');
				$data['OTPExpireOn'] 	                = date("Y-m-d H:i:s", strtotime("+5 minutes"));
				$data['Status'] 		                = 1;
				
				//$moduleName				            =str_replace("_","",$moduleName);
				$data['Description'] 	                = 'OTP generated for email verification in Client Registration.';
				
				// --- checking the existance in sys_otp table to delete starts
				$this->db->delete('sys_otp', array('ModuleId' => $res,'ModuleName' => "Client_Mobile_OTP"));
				// --- checking the existance in sys_otp table to delete ends
				$this->db->insert('sys_otp',$data);
				// --- insert new row into sys_otp table ends
				echo json_encode(array("status"=>false,"otpEmail"=>$otpcode));
				exit;
			}
		
		$resData = array("status"=>true);
		echo json_encode($resData);	
	}
	
//--------------------------------------------------Email OTP Verification for client registration---------sivanya/23/09/21------------------------------------------------------------------
public function clientCheckOTPForRegistrationEmail()
{
	$otp			 = $this->input->post('firstOneTimePassword');
	$otp             = encriptPassword($otp);
	$moduleName		 = $this->input->post("ModuleName");
	$otpregId		 = $this->input->post("ClientId"); 
	$clientId		 = '';
	$db     		 = new Database();

	$otpId           = $db->getFieldValueById("sys_otp", "Id", "OTP='{$otp}'");
	// --- checking the existance start;
	$where   	     = "OTP='{$otp}' and ModuleId='{$otpregId}' and ModuleName='{$moduleName}' ";
	$res             = $db->checkExistance("sys_otp", $where); //  if exists id value will be returned.

	if(!$res)
		{
			echo json_encode(array("status" => false,'message' => 'Invalid OTP!!'));	
			exit;
			
		}
        
	$data1['isEmailVerified']   = 1;
	$data1['EmailVerificationCode']   = $otp;
    $this->db->where('Id', $otpregId);
    $this->db->update('client_registration', $data1); // Updating isEmailVerified=1 after otp verifiation
	$db     		 			= new Database();
	$data['Status'] 		    = 0;
    $this->db->where('Id', $otpId);
	$this->db->update('sys_otp', $data);
	$isemailVerified            = $db->getFieldValueById("client_registration", "isEmailVerified", "Id='{$otpregId}'");
    
	// Generating Client code and updating in the table if isMobileVerified=1 after email verification
	$isMobileVerified           = $db->getFieldValueById("client_registration", "isMobileVerified", "Id='{$otpregId}'");
	if($isMobileVerified == 1) { 
		 $db     	= new Database();
		 $data  	= array('CLIENT', '1');  // to increment, second parameter should 1
		 $clientId 	= $db->callProcedure("getNumberPRO", $data, TRUE);  //  last parameter is TRUE for get the output.
		 $db     	= new Database();
		 $data1['Code'] = $clientId;
		 $this->db->where('Id', $otpregId);
         $this->db->update('client_registration', $data1);
	}	 	
	
	echo json_encode(array("status" => true,"message"=>"Client details have been saved successfully","userId"=>"{$clientId}"));		
}


//--------------------------------------------Mob OTP Verification for client registration-----sivanya/23/09/21---------------------------------------------------------------------------------------

public function clientCheckOTPForRegistrationMob()
{
	$otp			           = $this->input->post('OneTimePassword');
	$otp                       = encriptPassword($otp);
	$moduleName			       = $this->input->post("ModuleName");
	$otpregId			       = $this->input->post("ClientId"); 
	$clientId		 		   = '';
	
	$db     		           = new Database();
    $otpId                     = $db->getFieldValueById("sys_otp", "Id", "OTP='{$otp}'");
	
	// --- checking the existance start;
	$where   	               = "OTP='{$otp}' and ModuleId='{$otpregId}' and ModuleName='{$moduleName}' ";
	$res                       = $db->checkExistance("sys_otp", $where); //  if exists id value will be returned.

	if(!$res)
		{
			echo json_encode(array("status" => false,'message' => 'Invalid OTP!!'));					
			
		}
	else
	{
	     $data['Status'] 		      = 0;
		 $this->db->where('Id', $otpId);
         $this->db->update('sys_otp', $data);//for updating status value
		 
		 
		 $isEmailVerified            =$db->getFieldValueById("client_registration", "isEmailVerified", "Id='{$otpregId}'");
		 if($isEmailVerified == 1) { 
			 $db     	= new Database();
			 $data  	= array('CLIENT', '1');  // to increment, second parameter should 1
			 $clientId 	= $db->callProcedure("getNumberPRO", $data, TRUE);  //  last parameter is TRUE for get the output.
			 $db     	= new Database();
			 $data1['isMobileVerified'] = 1;
			 $data1['MobileVerificationCode']   = $otp;
			 $data1['Code'] = $clientId; // Generating Client code and updating in the table if isEmailVerified=1 after mobile verification
			 $this->db->where('Id', $otpregId);
			 $this->db->update('client_registration', $data1); // Updating Code and isMobileVerified after otp verifiation
		 } else {
			 $db     	= new Database();
			 $data1['isMobileVerified'] = 1;
			 $data1['MobileVerificationCode']   = $otp;
			 $this->db->where('Id', $otpregId);
			 $this->db->update('client_registration', $data1); // Updating isMobileVerified=1 after otp verifiation
		 }
		 echo json_encode(array("status" => true,'message' => "Client details have been saved successfully","userId"=>"{$clientId}"));
	}	 	
}

//----------------------------------------Resend Mobile and Email OTP for client registration---sivanya/23/09/21--------------------------------------------------------------------------------------------

public function resendOTPPermanent()
{ 
	$Id				        = $this->input->post("ClientId");
	$ModuleName		        = ($this->input->post('ModuleName'));
	$db     		        = new Database();
	$createdBY		        = $_SESSION['ADMIN_ID'];
	$otpcode                = $this->Common_model->generateOTP(5);
	// insert new row into sys_otp table starts
	$otp 					= encriptPassword($otpcode);
	$data['OTP'] 			= $otp;
	$data['ModuleId'] 		= $Id;
	$data['ModuleName'] 	= $ModuleName;
	$data['CreatedBy']      = $createdBY;
	$data['CreatedOn'] 		= date('Y-m-d H:i:s');
	$data['OTPExpireOn']  	= date("Y-m-d H:i:s", strtotime("+5 minutes"));
	
	$data['Status'] 		= 1;
	
	if($ModuleName == 'Client_Email_OTP')	
		$data['Description'] 	= "OTP generated for email verification in Client Registration.";
	if($ModuleName == 'Client_Mobile_OTP')	
		$data['Description'] 	= "OTP generated for mobile verification in Client Registration.";
	
	// --- checking the existance in sys_otp table to delete starts
	$this->db->delete('sys_otp', array('ModuleId' => $Id,'ModuleName' => $ModuleName));
	// --- checking the existance in sys_otp table to delete ends
	$this->db->insert('sys_otp',$data);
	// --- insert new row into sys_otp table ends		
	echo json_encode(array("status" => true,"message"=>"success","otp"=>$otpcode));			
}




//========================== Super Admin(Developer) Admin Menu categories ====================
	//14-01-22-sivanya
	
	
	public function adminMainMenuCategory($id="")
	{
       if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$fuctionName =  $this->uri->segment(2);
		$db = new Database();
		$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
		$this->isAccessDenied($Id);
		$data 						= array();
		$data 						= $this->Common_model->common_sidebar_counts();
		$data["subMenuId"]			= $id;
		$this->load->view('brq-admin/admin-main-menu-category',$data);
        
	}
	// -------------------- for getting the admin main menu category details for editing ---
	 
	public function getEditAdminMenuCategory($id)
	{
		$data = $this->adminMainMenuCategory->getById($id);
		echo json_encode($data);
	}
	
	//==================================== save AdminMainMenuCategory function for Saving Main Menu details ================================
	public function saveAdminMenuCategory()
	
	{  
		$id		= $this->input->post("hidID");
        $db     = new Database();
		
		/*echo json_encode(
									array(	
											"status"  => true,
											"message" => $id,
										 )
								);
				exit;
		*/
                
        // --- checking the existance start;
		$item	 =  trim(urldecode($this->input->post('MenuItem')));
		$where   = "Category='{$item}' AND Id!='{$id}'";
		$res 	 = $db->checkExistance("sys_admin_menu_category", $where); //  if exists id value will be returned.
		/*
		echo json_encode(
									array(	
											"status"  => true,
											"message" => $where,
										 )
								);
		exit;
		*/
		if($res)
			{
				echo json_encode(
									array(	
											"status"  => false,
											"message" => "This item alreay added and exists!.",
										 )
								);
				exit;
			}
		// --- checking the existance ends;
                $data = array(
								'Category' 	=> trim(urldecode($this->input->post('MenuItem'))),
								'FaIcon' 	=> trim(urldecode($this->input->post('FaIcon'))),
								//'showCount' => trim(urldecode($this->input->post('ShowCount'))),
								//'countTitle'=> trim(urldecode($this->input->post('CountTitle'))),
								//'countTable'=> trim(urldecode($this->input->post('CountTable'))),
								'MenuOrder' 	=> trim(urldecode($this->input->post('MenuOrder'))),
								//'linkPage'  => trim(urldecode($this->input->post('LinkPage'))),
								'Status' 	=> trim(urldecode($this->input->post('Status'))),
								//'countWhereClause'=>trim(urldecode($this->input->post('CountWhereClause'))),
								//'VisibleStatus' =>trim(urldecode($this->input->post('VisibleStatus'))),
							);
           	
		$res= $this->adminMainMenuCategory->saveData($data, $id);
		echo json_encode(array(
								'status'  =>  true,	
								'message' => 'Item saved successfully!.'
							  )
						);
	}
	
	//====================================Function to delete Main Menu category by Id ================================
	public function deleteMainMenuCategory($id)
	{
		$db     = new Database();
		$where 			= "CategoryId='{$id}'";
		$result 			= $db->checkExistance("sys_admin_menu", $where); // if exists id value will be returned.
		if($result)
		{
			echo json_encode(
				array("status" => false, 
					  "message"=>"Can't Delete Category. Some Menus are created under this Category ."
					 )
			);
			exit;
		}
	   $res = $this->adminMainMenuCategory->deleteData($id);
	   if(!$res)
	   {
		   echo json_encode(
							 array(
									'status'  =>  false,	
									'message' => 'Oops! Can\'t delete this item, detail exists!.'
								  )
						   );	 
		   exit;
	   }
	   echo json_encode(
	   
							 array(
									'status'  =>  true,	
									'message' => 'Item has been removed successfully!.'
								 )
						);	
	}
	
		//==================================== updateShowHide function for Updating Showing/Hide Status in admin main menu category to show / hide a main menu - by Sajitha ================================
	public function updateShowHideCategory() {
		$showHideStatus = $this->input->post("show");
		$id = $this->input->post("id");
		
		if($showHideStatus == 1) {
			$this->db->set('Status', 'Showing');
		} else {
			$this->db->set('Status', 'Hided');
		}			
		$where = array('Id' =>$id);
		$this->db->where($where);
		$this->db->update('sys_admin_menu_category');	
	}	
	
	//====================================Function to get DataTables of Admin Main  menu category ================================
	public function menuCategoryList($subId="")
	{
		$list = $this->adminMainMenuCategory->getDataTables();
		
		$data = array();
		$no = $_POST['start']; 
		//$no=1;
		
		foreach ($list as $menu) {
		
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$statusText	 = "Showing";
			$countText	 = "Yes";
			  
			$no++;
			$row = array();
			$row[] = $menu->Category;
			$row[] = $menu->FaIcon;
								
			/*if($menu->showCount=="No")
				{
					$showClass = "label label-danger";
					//$countText	 = "No";
				}	
			
			$row[] = "<span class='" . $showClass . "'>" . $menu->showCount . "</span>";
			$row[] = $menu->countTitle; 
		
                        $row[] = $menu->linkPage;*/
			
			if($menu->Status=="Hided")
			 {
				$statusClass = "label label-danger";
				$statusText  = "Hided";
			  }
			  
			$row[] =$menu->MenuOrder;  
			if($menu->Status == 'Showing')		
				$checked = "checked";
			else
				$checked = "";
			$row[] = '<label class="switch"><input onClick="showHide('."'".$menu->Id."'".');" id="Show_Hide'.$menu->Id.'" '.$checked.' class="switch-input" type="checkbox" /><span class="switch-label" data-on="Show" data-off="Hide"></span><span class="switch-handle"></span></label>';
			$row[] = "<span class='" . $statusClass . "'>" . $menu->Status . "</span>";
			
			//add html for action
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .= '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="rememberEntryCheck('."'".$menu->Id."'".',\'edit\')"><i class="glyphicon glyphicon-pencil"></i> Edit</a>';
			
			}
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{
				$actions .='<a  id="deleteButton" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="rememberEntryCheck('."'".$menu->Id."'".',\'delete\')"><i class="glyphicon glyphicon-trash"></i> Delete</a>';

			
			}
			$row[]	=$actions;
				// $row[] = '<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="rememberEntryCheck('."'".$menu->Id."'".',\'edit\')"><i class="glyphicon glyphicon-pencil"></i> Edit</a>
			// 	  <a  id="deleteButton" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="rememberEntryCheck('."'".$menu->Id."'".',\'delete\')"><i class="glyphicon glyphicon-trash"></i> Delete</a>';
		  	
			$data[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->adminMainMenuCategory->countAll(),
						"recordsFiltered" => $this->adminMainMenuCategory->countFiltered(),
						"data" => $data,
				);
		//output to json format
		echo json_encode($output);
	}
// -------------------------- job_application function to add/edit/delete all the job application  By Sivanya 05/04/2022 ----------------
public function job_application($id,$moduleTab="job_application")
{
	if(!$this->isSessionSet())
	{
		$this->index();
		return;
	}
	// $fuctionName =  $this->uri->segment(2);
	// $db = new Database();
	// $Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
	// $this->isAccessDenied($Id);
	$_SESSION["USER_MODULE_PAGE"]	=	$moduleTab; // for lock screen management;
	$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
	
	$data 					= array();
	$headTitleAddText		= " - Products : Login as ";
	$headTitleAddId			= $_SESSION['ADMIN_ID'];
	$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
	$data["subMenuId"]		= $id;

	$this->load->view("brq-admin/job-application", $data);
}
		
//==================================== jobApplicationList function to get DataTables of job application  - by Sivanya================================
public function jobApplicationList($subid="")
{
	$list 	= $this->JobApplication_model->getDataTables();
	
	$data 	= array();
	$data1 	= array();
	$no 	= $_POST['start']; 
	
	foreach ($list as $data) {
		$actions	 = "";
		$statusClass = "label label-success";
		$showClass	 = "label label-success";
		$statusText	 = "Active";
		$no++;
		$id = $data->Id;
		$row = array();
		$db = new Database();
		
		$row[] = $data->FullName;
		$row[] = $data->Email;
		$row[] = $data->MobileNumber;
		$row[] = $data->Subject;
		
		$CVpdf	= base_url().$data->CVPath.$data->CVName;
		$row[]='<a class="btn theme-2 effect radius" style="width:200px;" target="blank" href='.$CVpdf.'  data-backdrop="static" data-keyboard="false"><span></span>DOWNLOAD<i class="fas fa-download"></i></a>';
		
		if($data->Status == 1) {
			$statusClass = "label label-success";
			$row[] = "<span class='" . $statusClass . "'>Active</span>";
		} else if($data->Status == 0) {
			$statusClass = "label label-warning";
			$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
		} else {
			$statusClass = "label label-success";
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
		}	
		$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
		$row[] =  $data->CreatedBy;
		$permission = $_SESSION['GROUP_PERMISSION'];
	
		$userGroupPermission =array();
		$userGroupPermission = explode(",",$permission);
	
		$actions ="";
		$view ="Under_Visible_".$subid;
		$edit ="Under_Edit_".$subid;
		$edit ="Under_Copy_".$subid;
		$delete = "Under_Del_".$subid;
		$userPermission = $_SESSION['USER_PERMISSION'];
		$userWisePermission =array();
		$userWisePermission = explode(",",$userPermission);

		$actions = '<div class="btn-group" >'
				  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" aria-expanded="false">'
				  .'Action<span class="sr-only">Toggle Dropdown</span>'
				  .'</button>';
		if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
		{
			$actions .='<div class="dropdown-menu" role="menu" style="">'
				  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editApplication('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
		}
		if(in_array($copy,$userGroupPermission) || in_array($delete,$userWisePermission))
		{
			$actions .='<div class="dropdown-divider"></div>'
				  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to View"  onclick="showProfile('."'".$data->Id."'".', true);"><span class=" fa fa-eye text-fanger"></span> View</a>';
		}
		if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
		{
			$actions .='<div class="dropdown-divider"></div>'
				  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete" onclick="deleteExperience('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
		}
		$actions .=' </div>'
				  .'</div>';
		
		  $row[] = $actions;	 
		$data1[] = $row;
	}
	$output = array(
					"draw" => $_POST['draw'],
					"recordsTotal" => $this->JobApplication_model->countAll(),
					"recordsFiltered" => $this->JobApplication_model->countFiltered(),
					"data" => $data1,
			);
	//output as json format
	echo json_encode($output);
}
 	
	
	//==================================== saveJobApplication function for Saving Job Application details - by Sivanya ================================
	public function saveJobApplication()
	{
		$id						= $this->input->post("hidID");
		$data 					= array();  
		$fullName  			    = $this->input->post('fullname');
		$email  			    = $this->input->post('email');
		$mobNumber  			= $this->input->post('mobilenumber');
		$subject  			    = $this->input->post('subject');
		//$status 				= $this->input->post('Status');
		
		$db  			= new Database();
		$where   		= " UPPER(`Experience`)='".strtoupper($experience)."' and `Id`!={$id}";
		$res 			= $db->checkExistance("job_application", $where); // if exists id value will be returned.

		if($res)
		{
			echo json_encode(
								array("status" => false, 
									  "message"=>"This Experience is already created and exists! Please change the Experience name."
									 )
							);
			exit;
		}
		
		if($id==0) // if add
		{    
			$data = array(
						'FullName' => $fullName,
						'Email' => $email,
						'MobileNumber' => $mobNumber,
						'Subject' => $subject,
						//'Experience' => $experience,
						//'Status' => $status,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')
					);
		}
		else { // if edit
			$data = array(
						'FullName' => $fullName,
						'Email' => $email,
						'MobileNumber' => $mobNumber,
						'Subject' => $subject,
						//'Experience' => $experience,
						//'Status' => $status,
						'CreatedBy' => $_SESSION['ADMIN_ID'],
						'CreatedOn' => date('Y-m-d H:i:s')			
					);						
		}
		
		$res	= $this->JobApplication_model->saveData($data, $id);
		
		$resData = array("status" => true,'message' => 'Job Experience details saved successfully!!');
		
		echo json_encode($resData);
	}	
	
	//=========================== getEditApplication function used for getting a Job Application details by id from job_application table===========================	 
	public function getEditApplication($id)
	{
		$data = $this->JobApplication_model->getById($id);
		echo json_encode($data);
	}
	
	//=========================== deleteApplication function used for deleting Job application details by id from job_application table===========================	 
	public function deleteApplication($id)
	{
       $res    =  $this->JobApplication_model->deleteData($id);
       $resData =array();
	   if($res['status'])
	   {
			$resData=array(
					"status"=>true,
					"message"=>"Job Application deleted successfully!!"
				   );
	   }
	   else
	   {
		   $resData=array(
					"status"=>false,
					"message"=>$res['message']
				   );
	   }
		echo json_encode($resData); 
    }    
	
	
	
	
// New function -09-04-2022, Sivanya
//=========================== getView function used for getting a Job Application details by id from job_application table -by Sivanya=================	
	public function getView($id)
	{
		$db        = new Database();			
		$firstName = $db->getFieldValueById("job_application", "FullName", "Id='{$id}'");
		$email     = $db->getFieldValueById("job_application", "Email", "Id='{$id}'");
		$mobNumber = $db->getFieldValueById("job_application", "MobileNumber", "Id='{$id}'");
		$subject   = $db->getFieldValueById("job_application", "Subject", "Id='{$id}'");
		$msg       = $db->getFieldValueById("job_application", "Message", "Id='{$id}'");
		$cvPath    = $db->getFieldValueById("job_application", "CVPath", "Id='{$id}'");
		$cvName    = $db->getFieldValueById("job_application", "CVName", "Id='{$id}'");
		$exp       = $db->getFieldValueById("job_application", "Experience", "Id='{$id}'");
		$clientCV  = base_url().$cvPath.$cvName;
		//echo $clientCV;
		
		$data=array("status" => true,'message' => 'Job Experience details saved successfully!!','fullname'=>$firstName,'email'=>$email,'mob'=>$mobNumber ,'subject'=>$subject,'msg'=>$msg,"clientCV"=>$clientCV,'cliExp'=>$exp);
		echo json_encode($data);
	}




//==================== Calendar Functions Sandeep 08-03-22=======================

public function insertToCalendar()
{
	$this->load->model ("Fullcalendar_model");
	
	if($this->input->post("title"))
	{
		
		$data = array(
						"Title" 		=> $this->input->post("title"),
						"StartEvent"	=> $this->input->post("start"),
						"EndEvent"		=> $this->input->post("end")
					  );
	  $this->Fullcalendar_model->insertEvent($data);				  
					  
	}
}

public function updateCalendar()
{
	$this->load->model ("Fullcalendar_model");
	if($this->input->post("id"))
	{
		$data = array(
						"Title" 		=> $this->input->post("title"),
						"StartEvent"	=> $this->input->post("start"),
						"EndEvent"		=> $this->input->post("end")
					 );
		
		$this->Fullcalendar_model->updateEvent($data, $this->input->post("id") );
	
	}
	
}

//================================= brq_erp_projects function to view project details-Sivanya ===========================
public function brq_erp_projects($id="")
{
	if(!$this->isSessionSet())
	{
		$this->index();
		return;
	}
	$fuctionName =  $this->uri->segment(2);
	$db = new Database();
	$Id = $db->getFieldValueById("sys_admin_sub_menu", "Id", "pageLink='{$fuctionName}'");
	$this->isAccessDenied($Id);
	$_SESSION["USER_MODULE_PAGE"]="user_group"; // for lock screen management;
	//$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
	
	$data 					= array();
	$headTitleAddText		= " : Login as ";
	$headTitleAddId			= $_SESSION['ADMIN_ID'];
	$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
	$data["subMenuId"]		= $id;
	$this->load->view("brq-admin/brq-erp-projects", $data);
	
}

 
 
 
//==================================== saveProjects function for Saving project details - by Sivanya================================
public function saveProjects()
{
	$id						= $this->input->post("hidID");
	$data 					= array();  
	$project_Name  			= $this->input->post('Project_Name');
	$project_Des 			= $this->input->post('Project_Description');
	$project_Url  			= $this->input->post('Project_Url');
	$project_For 			= $this->input->post('Project_For');
	$technologies 			= $this->input->post('technologies');
	$localvirtualhost 	    = $this->input->post('Local_virtualhost');
	//$group 				= $this->input->post('Group');
	//$new_group 			= $this->input->post('New_Group');
	$status 				= $this->input->post('Status');
	
	$db  			= new Database();
	$where   		= " UPPER(`ProjectName`)='".strtoupper($project_Name)."'  and `Id`!={$id}";
	$res 			= $db->checkExistance("sys_erp_projects", $where); // if exists id value will be returned.

	if($res)
	{
		echo json_encode(
							array("status" => false, 
								  "message"=>"This Project is already created and exists! Please change the Project name."
								 )
						);
		exit;
	}
	
	
	if($id==0) // if add
	{    
		$data = array(
					'ProjectName' => $project_Name,
					'Description' => $project_Des,
					'Url'         => $project_Url,
					'ProjectFor'  => $project_For,
					'Technologies'  => $technologies,
					'LocalVirtualHost'  => $localvirtualhost,
					'Status'      => $status,
					'CreatedBy'   => $_SESSION['ADMIN_ID'],
					'CreatedOn'   => date('Y-m-d H:i:s')
				);
	}
	else { // if edit
		$data = array(
					'ProjectName' => $project_Name,
					'Description' => $project_Des,
					'Url'         => $project_Url,
					'ProjectFor'  => $project_For,
					'LocalVirtualHost'  => $localvirtualhost,
					'Status'      => $status,
					'ModifiedBy'  => $_SESSION['ADMIN_ID'],
					'ModifiedOn'  => date('Y-m-d H:i:s'),			
				);						
	}
	
	$res	= $this->ERPProjects_model->saveData($data, $id);
	$db = new BrqDatabase();
	$resData = array("status" => true,'message' => 'Project details saved successfully!!');
	
	echo json_encode($resData);
}


//==================================== projectList function to get DataTables of sys_erp_projects - by Sivanya ================================
public function projectList($subid="")
{
	$list 	= $this->ERPProjects_model->getDataTables();
	
	$data 	= array();
	$data1 	= array();
	$no 	= $_POST['start']; 
	
	
	foreach ($list as $data) {
		$actions	 = "";
		$statusClass = "label label-success";
		$showClass	 = "label label-success";
		$statusText	 = "Active";
		$no++;
		$id = $data->Id;
		$row = array();
		$db = new Database();			
		$row[] = $data->ProjectName;
		$row[] = $data->Description;
		$row[] = $data->Url;
		$row[] = $data->ProjectFor;
		$row[] = $data->LocalVirtualHost;
		$row[] = $data->Technologies;
		if($data->Status == "Active") {
			$statusClass = "label label-success";
			$row[] = "<span class='" . $statusClass . "'>Active</span>";
		} else if($data->Status == "Inactive") {
			$statusClass = "label label-warning";
			$row[] = "<span class='" . $statusClass . "'>Inactive</span>";
		} else {
			$statusClass = "label label-success";
			$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";	
		}	
		$row[] =  date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
		$row[] =  $data->CreatedBy;
		$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Sub_Visible_".$subid;
			$edit ="Sub_Edit_".$subid;
			$copy ="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
				$actions .=  '<div class="btn-group">'
				  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window"  aria-expanded="false">'
				  .'Action<span class="sr-only">Toggle Dropdown</span>'
				  .'</button>';
			
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
				  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="editProject('."'".$data->Id."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			 if(in_array($copy,$userGroupPermission)||in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
				.'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="editProject('."'".$data->Id."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission)||in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
				  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Delete"  onclick="deleteProject('."'".$data->Id."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			$actions .=' </div>'
				  	.'</div>';
		
		  $row[] = $actions;	 
		$data1[] = $row;
	}
	$output = array(
					"draw" => $_POST['draw'],
					"recordsTotal" => $this->ERPProjects_model->countAll(),
					"recordsFiltered" => $this->ERPProjects_model->countFiltered(),
					"data" => $data1,
			);
	//output as json format
	
	echo json_encode($output);
}
//=========================== getEditProjects function used for getting a project details by id from sys_erp_projects table-By Sivanya===========================	 
public function getEditProjects($id)
{
	$data = $this->ERPProjects_model->getById($id);
	echo json_encode($data);
}


//=========================== deleteProject function used for deleting project details by id from sys_erp_projects table-By Sivanya===========================	 
public function deleteERPProject($id)
{
   $res    =  $this->ERPProjects_model->deleteData($id);
   $resData =array();
   if($res['status'])
   {
		$db = new BrqDatabase();
		//$resCombo = $db->getJobSkillGroupCombo();
		$resData=array(
				"status"=>true,
				"message"=>"Project details deleted successfully!!",
				"jobSkillsGroup" => $resCombo
			   );
   }
   else
   {
	   $resData=array(
				"status"=>false,
				"message"=>$res['message']
			   );
   }
	echo json_encode($resData); 
}    
// view  for card-checker-api-settings

public function cardCheckerApiSettings(){
	
	if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	="site_settings"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock sc
		$data1 					= array();
		$headTitleAddText		= " - Settings : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		
		
		
		$apikey			=	"";	
		$apiUrl			=	"";
		$checkType		=	"";
		$dataType 		=	"";
		$status			=	"";
		
		$db = new Database();
		$apikey		=	$db->getFieldValueById("sys_card_checker_api_settings", "ApiKey", "Id='1' AND Status='1'");
		//  echo "<script>alert($apikey);</script>";
		$apiUrl		=	$db->getFieldValueById("sys_card_checker_api_settings", "ApiURL", "Id='1' AND Status='1'");
		$checkType	=	$db->getFieldValueById("sys_card_checker_api_settings", "CheckType", "Id='1' AND Status='1'");
		$dataType	=	$db->getFieldValueById("sys_card_checker_api_settings", "DataType", "Id='1' AND Status='1'");
		$status		=	$db->getFieldValueById("sys_card_checker_api_settings", "Status", "Id='1' AND Status='1'");
	
		$data1["apikey"]	 		=$apikey; // from table.
		$data1["apiUrl"]	 		=$apiUrl; // from table.
		$data1["checkType"]	 		=$checkType; // from table.
		$data1["dataType"]	 		=$dataType; // from table.
		$data1["status"]	 		=$status; // from table.
		// print_r($data1);
		

		$this->load->view("brq-admin/card-checker-api-setting",$data1);
}

// ========================= saveApiSettings() for saving card-checker-api-settings ================================
	public function saveApiSettings()
	{
		$ApiKey				=	trim($_POST["ApiKey"]);
		$ApiUrl				=	trim($_POST["ApiUrl"]);
		$CheckType 			=	trim($_POST["CheckType"]);
		$DataType			=	trim($_POST["DataType"]);
		$Status 			=	trim($_POST["Status"]);
		// echo "<script>alert($Status);</script>";
	
		$resData = array();
		
		if(empty($ApiKey))
			{
				echo "Error! ApiKey should not be blank.";
				exit;
			}
		if(empty($ApiUrl))
			{
				echo "Error! Api Url should not be blank.";
				exit;
			}
		if(empty($CheckType))
			{
				echo "Error! Check Type should not be blank.";
				exit;
			}	
		if(empty($DataType))
			{
				echo "Error! Data Type should not be blank.";
				exit;
			}	
		// if(empty($Status))
		// 	{
		// 		echo "Error! Status should not be blank.";
		// 		exit;
		// 	}
		

		$data = array(
						'ApiKey'		=> $ApiKey,
						'ApiURL'		=> $ApiUrl,
						'CheckType' 	=> $CheckType,
						'DataType'		=> $DataType,
						'Status'		=> $Status,
						
					);
					
		$this->db->update('sys_card_checker_api_settings', $data, array('Id' =>1));
		echo "success";
	}


	


	

	//    Getting all complaints  from client_complaint table*/
	public function getclientComplaints($id,$complaintId)
	{
		$where = "ClientRegId={$id} and `Id`='".$complaintId."'";
		$this->db->select('Id,ComDate,ClientUserId,ClientRegId,Description,CreatedOn');
		$this->db->order_by("ComDate", "desc");
		$this->db->where($where);
		// $this->db->limit(3, $offset);
		$res = $this->db->get('client_complaint');
		//  print_r($res);
		// echo $where;
		if ($res->num_rows() > 0) {
			return ($res->result());
		}
		return array();
	}

	

		//function to save client complaints
		// public function saveComplaint()
		// {
		// 	// --- checking the existance start;
		// 	// $email	= $this->input->post("Email");
		// 	$db     	= new Database();
		// 	/* $where   	="Email='{$email}'";				
		// 			$res = $db->checkExistance("register", $where); //  if exists id value will be returnd.
		// 			if($res)
		// 			{
		// 				echo "Exists";
		// 				exit;
		// 			}*/
		// 	$now = date("Y-m-d H:i:s");
		// 	//$ComplaintEmail=$_SESSION['CLIENT_ID'];
		// 	$db 		= new Database();
		// 	$id = $_SESSION['CLIENT_REG_ID'];
		// 	$f_name		=	$db->getFieldValueById("client_registration", "FirstName", "Id='{$id}'");
		// 	$l_name		=	$db->getFieldValueById("client_registration", "FirstName", "Id='{$id}'");
		// 	$full_name 	=	$f_name . " " . $l_name;
		// 	$message = ($this->input->post('complaint'));
		// 	$data = array(
		// 		'ComDate'		 =>  $now,
		// 		'Description' 	 => $message,
		// 		//$ComplaintEmail,
		// 		'ClientUserId'	 => $_SESSION['CLIENT_NAME'],              //$_SESSION['CLIENT_REGISTER_ID'],
		// 		//'ClientProfilePath'=>$_SESSION['PROFILE_PHOTO_PATH'],
		// 		//'ClientProfilePic'=>$_SESSION['USER_PHOTO'],
		// 		// 'CompanyName'	 => 'BRQ',           //$_SESSION['CLIENT_COMPANYNAME'],
		// 		'FullName'		 => $full_name,           //$_SESSION['CLIENT_FIRSTNAME']." ".$_SESSION['CLIENT_LASTNAME'],
		// 		'CreatedBy' 	 => 'client',       //$_SESSION['CLIENT_FIRSTNAME']." ".$_SESSION['CLIENT_LASTNAME'],
		// 		'CreatedOn'		 => date('Y-m-d H:i:s'),
		// 		'ModifiedBy'	 => 'client',
		// 		'ModifiedOn'	 => date('Y-m-d H:i:s'),
		// 		'ClientRegId'	 => $_SESSION['CLIENT_REG_ID'],
		// 	);
		// 	// $db		= 	new Database();
		// 	$this->db->insert('client_complaint', $data);
	
		// 	$resData    = array(
		// 		"status" => true,
		// 		'message' => 'saved successfully...'
		// 	);
		// 	echo json_encode($resData);
		// }
		

	// public function salesQuery()
	// {
	// 	if(!$this->isSessionSet())
	// 	{
	// 		$this->index();
	// 		return;
	// 	}
	// 	$_SESSION["USER_MODULE_PAGE"]	="salesQuery"; // for lock screen management;
	// 	$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
	// 	$data 					 = array();
	// 	$data["headTitle"] 		 = $this->headTitle ." :Login as ". $_SESSION['ADMIN_ID'];
    //     $data["adminController"] = $this->adminController;
	// 	$headTitleAddText		= " : Login as ";
	// 	$headTitleAddId			= $_SESSION['ADMIN_ID'];
	// 	$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
	// 	$db						 = new Database();
	

	// 	$this->load->view("brq-admin/sales-query", $data);
		
	// }

		//=============================Function to load Client Query Table Starts======================
	// public function salesQueryList()	
	// {
	// 		$this->load->model('SalesQuery_model');
			
	// 		$list 	= $this->SalesQuery_model->getDataTables();
	// 		$data 	= array();
	// 		$data1 	= array();
	// 		$no 	= $_POST['start']; 
			
	// 		//$no=1;
	// 		foreach ($list as $data) {
			
	// 			$statusClass = "label label-success";
	// 			$showClass	 = "label label-success";
	// 			//$statusText	 = "Active";
	// 			$no++;
				
	// 			$row = array();
	// 			$row[] = "<span style='color:#A50707; font-weight:bold;'>" . $data->Id . "</span>";
	// 			$row[] = $data->ClientId;
	// 			$row[] = $data->QueryDate;
	// 			$row[] = $data->Message;
	// 			$row[] = $data->CreatedBy;
	// 			// if($data->Status=="Inactive")
	// 			//  {
	// 			// 	$statusClass = "label label-danger";
	// 			// 	$statusText  = "Inactive";
	// 			// 	$rightsButton= "";
	// 			//  }
	// 			// $row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
				
	// 			$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
	// 			//$row[] = $data->CreatedBy;
				
				
	// 			//add html for action
	// 			$row[] = '<a id="viewButton" class="btn btn-sm btn-info" href="javascript:void(0)"  title="Click to View Detail" onclick="viewData('."'". $data->Id ."'".')"><i class="fa fa-sticky-note-o"></i> View</a>';
						  
	// 					 // <a  id="deleteButton" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="deleteData('."'".$data->Id."'".')"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</a>';
						
	// 					 //'<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="editData('."'".$data->Id."'".')"><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>;
					  
			
	// 			$data1[] = $row;
	// 		}
	
	// 		$output = array(
	// 						"draw" => $_POST['draw'],
	// 						"recordsTotal" => $this->SalesQuery_model->countAll(),
	// 						"recordsFiltered" => $this->SalesQuery_model->countFiltered(),
	// 						"data" => $data1,
	// 				);                                                                                                                                                      
	// 		//output to json format
	// 		echo json_encode($output);
	// 	}

	// 	public function salesQueryView($id)
	// {
	// 	if(!$this->isSessionSet())
	// 	{
	// 		$this->index();
	// 		return;
	// 	}
	// 	$_SESSION["USER_MODULE_PAGE"]	="investorQueryView"; // for lock screen management;
	// 	$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
	// 	$data 					 = array();
	// 	$data["headTitle"] 		 = $this->headTitle ." :Login as ". $_SESSION['ADMIN_ID'];
    //     $data["adminController"] = $this->adminController;
	// 	$headTitleAddText		= " : Login as ";
	// 	$headTitleAddId			= $_SESSION['ADMIN_ID'];
	// 	$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
	// 	$db						 = new Database();
	// 	//	$data["categoryCount"]	 = $db->totalCount("Id", 'product_category',"Status='Active'");
		
	// 	$data["Id"]	 	 		 = $id;
	// 	$db						 = new Database();
	// 	$regId					 = $db->getFieldValueById("client_query","ClientId", "Id='{$id}'");
	// 	$data["profilePhotoPath"]= $db->getFieldValueById("client_registration","ProfilePhotoPath", "Id='{$regId}'");
	// 	$data["profilePhoto"]	 = $db->getFieldValueById("client_registration","ProfilePhoto", "Id='{$regId}'");
	// 	$data["message"]		 = $db->getFieldValueById("client_query","Message", "Id='{$id}'");
	// 	$data["date"]	 		 = $db->getFieldValueById("client_query","CreatedOn", "Id='{$id}'");
	// 	$firstName= $db->getFieldValueById("client_registration","FirstName", "Id='{$regId}'");
	// 	$lastName= $db->getFieldValueById("client_registration","LastName", "Id='{$regId}'");

	// 	$data["name"]	 	 	 = $firstName." ".$lastName;
	// 	$message		= $db->getFieldValueById("client_query_reply","Reply", "QueryId='{$id}'");
	// 	if($message!="")
	// 		$data["queryReply"] =$message;
	// 	else
	// 		$data["queryReply"] ="Reply Message";
	// 	$this->load->view("brq-admin/sales-query-view", $data);	
	// }

	public function sendReplyQuery()
	{
		$replyMessage 	= $this->input->post("ReplyMessage");
		$id 			= $this->input->post("id");
		$employeeName	=	$_SESSION['ADMIN_ID'];
		$name = explode(" ",$employeeName);
		$firstName=$name[0];
		$db			= new Database();
		$employeeId 	= $db->getFieldValueById("employee_master","Id", "FirstName ='{$firstName}'");	

		$ClientId	 	 	 = $db->getFieldValueById("client_query","ClientId", "Id='{$id}'");
		//$QueryId	 	 	 = $db->getFieldValueById("client_complaint","ClientUseId", "Id='{$id}'");
		$ClientRepalyId	 	 	 = $db->getFieldValueById("client_query_reply","Id", "QueryId='{$id}'");
		if($ClientRepalyId)
		{
			$data 				= array
			(
			  'QueryId'		=>  $id,
			  'Reply' 	=> trim(urldecode($replyMessage)),
			  'ClientId'	=>  $ClientId,
			  // 'ClientUserId'	=>  $ClientUserId,
			  //'EmployeeName'	=> $_SESSION['ADMIN_ID'],
			  'EmployeeId'	=>  $employeeId ,
			  'ReplyDate'		=>	date('Y-m-d H:i:s'),
			  'ModifiedOn' 	=> date('Y-m-d H:i:s'),
			  'ModifiedBy' 	=> $_SESSION['ADMIN_ID']	
		   );
		   $res = $this->db->update("client_query_reply",$data);	
		}
		else
		{
			$data 				= array
			(
			  'QueryId'		=>  $id,
			  'Reply' 	=> trim(urldecode($replyMessage)),
			  'ClientId'	=>  $ClientId,
			  // 'ClientUserId'	=>  $ClientUserId,
			  //'EmployeeName'	=> $_SESSION['ADMIN_ID'],
			  'EmployeeId'	=>  $employeeId ,
			  'ReplyDate'		=>	date('Y-m-d H:i:s'),
			  'CreatedOn' 	=> date('Y-m-d H:i:s'),
			  'CreatedBy' 	=> $_SESSION['ADMIN_ID']	
		   );
			$res = $this->db->insert("client_query_reply",$data);		
		}
		 
		//$this->contactUsEmail($id,$replyMessage);
	
		$resData	= array();

		if($res)
		{	
					
			$resData["status"] 	= true;
			$resData["message"] = "Message have been succesfully saved!";
					
		}
				
		else if(!$res)
		{
			$resData["status"] 	= false;
			$resData["message"] = "OOps! Some error occured while saving informations!";
					
		}
		echo json_encode($resData);
	}

// Client Review
public function salesReview($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	="investorReview"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					 = array();
		$data["headTitle"] 		 = $this->headTitle ." :Login as ". $_SESSION['ADMIN_ID'];
        $data["adminController"] = $this->adminController;
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["menuId"]			= $id;
		$db						 = new Database();
	
		$this->load->view("brq-admin/sales-review", $data);
		
	}
		//=============================Function to load Client Review Table Starts - Sruthi ======================
	
		public function salesReviewList($menuid="")	
		{
			$this->load->model("SalesReview_model");
			
			$list 	= $this->SalesReview_model->getDataTables();
			$data 	= array();
			$data1 	= array();
			$no 	= $_POST['start']; 
			
			foreach ($list as $data) {
			
				$statusClass = "label label-success";
				$showClass	 = "label label-success";
				$no++;
				
				$row = array();
				$row[] = "<span style='color:#A50707; font-weight:bold;'>" . $data->Id . "</span>";
				$row[] = $data->CustomerRegId;
				$row[] = $data->CustomerName;
				$row[] = $data->Description;
				$row[] = $data->CreatedBy;
				if($data->Status=="Inactive")
				 {
					$statusClass = "label label-danger";
					$statusText  = "Inactive";
					$rightsButton= "";
				 }
				$row[] = "<span class='" . $statusClass . "'>" . $data->Status . "</span>";
				$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
				$permission = $_SESSION['GROUP_PERMISSION'];
				$userGroupPermission =array();
				$userGroupPermission = explode(",",$permission);

				$actions ="";
				$update ="Main_Update_".$menuid;
				$userPermission = $_SESSION['USER_PERMISSION'];
				$userWisePermission =array();
				$userWisePermission = explode(",",$userPermission);
				if(in_array($update,$userGroupPermission)||in_array($update,$userWisePermission))
				{
					$actions .= '<a  id="updateButton"  class="dropdown-item text-info update_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Update Status"  onclick="updateStatus('."'".$data->Id."'".','."'".$data->Status."'".')"><i class="fa fa-pencil" aria-hidden="true"></i> Update Status</a>';
				}
				$row[] =$actions;
				$data1[] = $row;
			}
	
			$output = array(
							"draw" => $_POST['draw'],
							"recordsTotal" => $this->SalesReview_model->countAll(),
							"recordsFiltered" => $this->SalesReview_model->countFiltered(),
							"data" => $data1,
					);                                                                                                                                                      
			//output to json format
			echo json_encode($output);
		}

		//=========================== updateReviewStatus function used for updating Depositor Registration status by id in depositor_registration table===========================	 
		public function updateReviewStatus()
		{
			$id				= $this->input->post("hidID");
			$status			= $this->input->post("status");	
		
			$data = array(
							'Status' =>$status,
							'ModifiedBy' => $_SESSION['ADMIN_ID'],
							'ModifiedOn' => date('Y-m-d H:i:s')
						);
			
			$this->db->update('customer_testimonials_detail',$data, array('Id' =>$id)); // 3rd argument is where
	
			$resData=array(
						"status"=>true,
						"message"=>"Investor Status updated!"
						);
			echo json_encode($resData);	   
}

///complaint and Reply
public function salesComplaint($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	="salesComplaint"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					 = array();
		$data["headTitle"] 		 = $this->headTitle ." :Login as ". $_SESSION['ADMIN_ID'];
        $data["adminController"] = $this->adminController;
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$dat["menuId"]			= $id;
		$db						 = new Database();
	

		$this->load->view("brq-admin/sales-complaints", $data);
		
	}

	public function salesComplaintList($menuid="")	
	{
		$this->load->model('salesComplaint_model');
		
		$list 	= $this->salesComplaint_model->getDataTables();
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		//$no=1;
		foreach ($list as $data) {
		
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			//$statusText	 = "Active";
			$no++;
			
			$row = array();
			$row[] = "<span style='color:#A50707; font-weight:bold;'>" . $data->Id . "</span>";
			$row[] = $data->ClientId;
			$row[] = $data->QueryDate;
			$row[] = $data->Message;
			$row[] = $data->CreatedBy;
			
			$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
         
			
			//add html for action
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Main_Visible_".$menuid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			if(in_array($view,$userGroupPermission)||in_array($view,$userWisePermission))
			{
				$actions .= '<a id="viewButton" class="btn btn-sm btn-info" href="javascript:void(0)"  title="Click to View Detail" onclick="viewData('."'". $data->Id ."'".')"><i class="fa fa-sticky-note-o"></i> View</a>';
			}	      
					 // <a  id="deleteButton" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="deleteData('."'".$data->Id."'".')"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</a>';
		  		  
			         //'<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="editData('."'".$data->Id."'".')"><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>;
				  
		
			$row[] =$actions;
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->salesComplaint_model->countAll(),
						"recordsFiltered" => $this->salesComplaint_model->countFiltered(),
						"data" => $data1,
				);                                                                                                                                                      
		//output to json format
		echo json_encode($output);
	}	

	public function salesComplaintView($id)
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	="salesComplaint"; // for lock screen management;
		// echo '<script>alert($_SESSION["USER_MODULE_PAGE"]")</script>';
		echo $_SESSION["USER_MODULE_PAGE"];
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					 = array();
		$data["headTitle"] 		 = $this->headTitle ." :Login as ". $_SESSION['ADMIN_ID'];
        $data["adminController"] = $this->adminController;
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$db						 = new Database();
		//	$data["categoryCount"]	 = $db->totalCount("Id", 'product_category',"Status='Active'");
		
		$data["Id"]	 	 		 = $id;
		$db						 = new Database();
		$regId					 = $db->getFieldValueById("client_complaint_reply","ClientId", "Id='{$id}'");
		$data["profilePhotoPath"]= $db->getFieldValueById("client_registration","ProfilePhotoPath", "Id='{$regId}'");
		$data["profilePhoto"]	 = $db->getFieldValueById("client_registration","ProfilePhoto", "Id='{$regId}'");
		$data["message"]		 = $db->getFieldValueById("client_complaint_reply","Message", "Id='{$id}'");
		$data["date"]	 		 = $db->getFieldValueById("client_complaint_reply","CreatedOn", "Id='{$id}'");
		$firstName= $db->getFieldValueById("client_registration","FirstName", "Id='{$regId}'");
		$lastName= $db->getFieldValueById("client_registration","LastName", "Id='{$regId}'");

		$data["name"]	 	 	 = $firstName." ".$lastName;
		$message		= $db->getFieldValueById("client_complaint_reply_comment","Reply", "QueryId='{$id}'");
		if($message!="")
			$data["queryReply"] =$message;
		else
			$data["queryReply"] ="Reply Message";
		$this->load->view("brq-admin/sales-complaint-view", $data);	
	}
	
	
	public function sendReplyComplaint()
	{
		
		$this->load->model('Complaint_model');
		
		$replyMessage = $this->input->post("ReplyMessage");
		$clientcomplaintId = $this->input->post("clientComplaintId");
	
		$file_name = $_FILES['file']['name'];
		
		
		if ($file_name != NULL) {
			$temp = $_FILES['file']['tmp_name']; //default storage path for file store
			$new_file_name = time() . $file_name;
			move_uploaded_file($temp, 'uploads/news_photo/' . $new_file_name);
		}
	
		$data = array(
			'clientComplaintId' =>  $clientcomplaintId,
			'QueryDate' => date('Y-m-d H:i:s'),
			'Message' => $replyMessage,
			'ProfilePhotoPath' => 'uploads/news_photo/' . $new_file_name,
			'ProfilePhoto' => $file_name,
		);
	
		// $this->db->insert('client_complaint_reply', $data);
		$res = $this->Complaint_model->insert($data);

		  // Update complaint status to "replied"
		  $this->db->set('Status', 'Replied');
		  $this->db->where('Id', $clientcomplaintId);
		  $this->db->update('client_complaint');
	
		$resData = array();
	
		$resData["status"] = true;
		$resData["message"] = "Message have been successfully delivered!";
		$resData["upload_path"] = $uploadPath;
	
		echo json_encode($resData);
		
	}


///////////////////////////// CONTACT ///////////////////////
public function contact_us_main()
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	="Contact_Us"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					 = array();
		$data["headTitle"] 		 = $this->headTitle ." :Login as ". $_SESSION['ADMIN_ID'];
        $data["adminController"] = $this->adminController;
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$db						 = new Database();
	 //	$data["categoryCount"]	 = $db->totalCount("Id", 'product_category',"Status='Active'");
		$data["contactUsHead"]	 = $db->getFieldValueById("sys_contact_us","ContactUsTittle", "Status='Active'");
		$data["contactUsDescription"]	 = $db->getFieldValueById("sys_contact_us","ContactSideDescription", "Status='Active'");
		$data["Address"]	 = $db->getFieldValueById("sys_contact_us","ContactUs", "Status='Active'");
		$data["PhoneNo"]	 = $db->getFieldValueById("sys_contact_us","LandPhoneNo", "Status='Active'");
		$data["CustomerCareNo"]	 = $db->getFieldValueById("sys_contact_us","CustomerCareNo", "Status='Active'");
		$data["SiteUrl"]	 = $db->getFieldValueById("sys_contact_us","SiteUrl", "Status='Active'");
		$data["Email"]	 = $db->getFieldValueById("sys_contact_us","ContactSentEmailId", "Status='Active'");
		$data["ContactSideDescription"]	 = $db->getFieldValueById("sys_contact_us","ContactSideDescription", "Status='Active'");
		$data["WhatsAppNo"]	 = $db->getFieldValueById("sys_contact_us","WhatsAppNo", "Status='Active'");
		$data["LandPhoneNo"]	 = $db->getFieldValueById("sys_contact_us","LandPhoneNo", "Status='Active'");
		$data["MapIframe"]	 = $db->getFieldValueById("sys_contact_us","MapIframe", "Status='Active'");
		$data["MapLatitude"]	 = $db->getFieldValueById("sys_contact_us","MapLatitude", "Status='Active'");
		$data["MapLongitude"]	 = $db->getFieldValueById("sys_contact_us","MapLongitude", "Status='Active'");

		

		$this->load->view("brq-admin/contact-us-main", $data);
		
		
		
	}


	public function contact_us($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}

		$data 					 = array();
		$data["headTitle"] 		 = $this->headTitle ." :Login as ". $_SESSION['ADMIN_ID'];
        $data["adminController"] = $this->adminController;
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["menuId"]			= $id;
		$db						 = new Database();
	

		$this->load->view("brq-admin/contact_us", $data);
		
	}


	public function ContactList($menuid="")	
	{

		$list 	= $this->ContactModel->getDataTables();
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		//$no=1;
		foreach ($list as $data) {
		
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			//$statusText	 = "Active";
			$no++;
			
			$row = array();
			
			$row[] = $data->FullName;
			$row[] = $data->Email;
			$row[] = $data->Contact;
			$row[] = $data->CompanyName;
			$row[] = $data->Status;
		
			
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Main_Visible_".$menuid;
			//add html for action
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			if(in_array($view,$userGroupPermission)||in_array($view,$userWisePermission))
			{
				$actions .= '<a id="viewButton" class="btn btn-sm btn-info" href="javascript:void(0)"  title="Click to View Detail" onclick="viewData('."'". $data->Id ."'".')"><i class="fa fa-sticky-note-o"></i>View</a>';
			}	      
					 // <a  id="deleteButton" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="deleteData('."'".$data->Id."'".')"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</a>';
		  		  
			         //'<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="editData('."'".$data->Id."'".')"><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>;
				
			$row[] =$actions;
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->ContactModel->countAll(),
						"recordsFiltered" => $this->ContactModel->countFiltered(),
						"data" => $data1,
				);                                                                                                                                                      
		//output to json format
		echo json_encode($output);
	}	



	public function contact_usDetailedView()
	{
		$this->load->model("ContactModel");
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}

		$data 					 = array();
		$data["headTitle"] 		 = $this->headTitle ." :Login as ". $_SESSION['ADMIN_ID'];
        $data["adminController"] = $this->adminController;
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$db						 = new Database();
		$id = $this->uri->segment(3); // Get the id from the URL

		 // Update the status of the complaint to "Seen" only if it is currently set to "New"
		 $enquiry = $this->ContactModel->getEnquiryList($id);
		 if ($enquiry['Status'] == 'New') {
			 $this->db->where('Id', $id);
			 $this->db->update('contact_us', array('Status' => 'Seen'));
		 }
	
		$data['enquiry'] =  $enquiry;

		// $enquirylist = $this->SalesEnquiryModel->getAllEnquiries();
    
		$this->load->view("brq-admin/contact_usDetailedView", $data);
		
	}

	public function sendContactReply() {
		$this->load->model("Email_model");
		$this->load->model("ContactModel");
		// Get the data from the AJAX request
		$reply_msg = $this->input->post('reply_msg');
		$enquiry_id = $this->input->post('enquiry_id');
		// echo $enquiry_id;
	
		// Validate the input data
		if(empty($reply_msg)) {
			$response = array('success' => false, 'message' => 'Please enter a valid reply message');
			echo json_encode($response);
			return;
		}
	
		// Update the enquiry with the reply message
		$data = array('Reply' => $reply_msg,'Status' =>'Replied');
		$this->db->where('Id', $enquiry_id);
		$result = $this->db->update('contact_us', $data);

		
	
		// Check if the query was successful
		if($result) {
			$response = array('success' => true);
			echo json_encode($response);
		} else {
			$response = array('success' => false, 'message' => 'Failed to send reply message');
			echo json_encode($response);
		}

		
		try {
			// Fetch the enquiry details
			$enquiry = $this->ContactModel->getEnquiryList($enquiry_id);
			
			$name = $enquiry['FullName'];
			$toEmailId = $enquiry['Email'];
			$companyName = $enquiry['CompanyName'];
			$query = $enquiry['Query'];
			$reply = $enquiry['Reply'];
			$subject 	  = "Reply for the query,BRQ";
	
			// Send email
			$this->Email_model->contactmailDetails($name, $toEmailId, $query, $reply,$subject);
		} catch (Exception $e) {
			// Handle email sending errors
			log_message('error', 'Email sending failed: ' . $e->getMessage());
		}
	}


	public function viasms()
	{
		
		$db = new Database();
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	="notification-compose"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data['who']	= $who;
		
		$data['userName']	= $db->fillCombo("client_registration", "FirstName", "To All", "", "Id", "", "FirstName");
		$this->load->view("brq-admin/viasms", $data);
	
	}

	//////////////////// SERVICE AND SUPPORT ///////////
	

	public function serviceSupport($id=""){
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		$_SESSION["USER_MODULE_PAGE"]	="serviceSupport"; // for lock screen management;
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		
		$data 					 = array();
		$data["headTitle"] 		 = $this->headTitle ." :Login as ". $_SESSION['ADMIN_ID'];
        $data["adminController"] = $this->adminController;
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["menuId"]			= $id;
		$db						 = new Database();
	

		$this->load->view("brq-admin/service-support", $data);
	}

	public function queryList($menuid="")	
	{
		$this->load->model('Complaint_model');
		
		$list 	= $this->Complaint_model->getDataTables();
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		//$no=1;
		foreach ($list as $data) {
		
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			//$statusText	 = "Active";
			$no++;
			
			$row = array();
			// $row[] = "<span style='color:#A50707; font-weight:bold;'>" . $data->Id . "</span>";
			$row[] = $data->ContactName;
			$row[] = $data->ContactEmail;
			$row[] = $data->ContactPhoneNumber;
			$row[] = $data->Description;
			
			
			// $row[] = "<img src='".base_url($data->ProfilePhotoPath)."' width='100' height='100'>"; // added image tag with the path to the image
			
			
			$row[] = date('d/m/Y h:i:s a', strtotime($data->CreatedOn));
			$row[] = $data->Status;
            //$row[] = $data->CreatedBy;
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Main_Visible_".$menuid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			if(in_array($view,$userGroupPermission)||in_array($view,$userWisePermission))
			{
				$actions .= '<a id="viewButton" class="btn btn-sm btn-info" href="javascript:void(0)"  title="Click to View Detail" onclick="viewData('."'". $data->ParentQueryId ."'".')"><i class="fa fa-sticky-note-o"></i> View</a>';
			}      
					 // <a  id="deleteButton" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="deleteData('."'".$data->Id."'".')"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</a>';
		  		  
			         //'<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="editData('."'".$data->Id."'".')"><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>;
				  
		
			 $row[] =$actions;
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->Complaint_model->countAll(),
						"recordsFiltered" => $this->Complaint_model->countFiltered(),
						"data" => $data1,
				);                                                                                                                                                      
		//output to json format
		echo json_encode($output);
	}


	// public function queryView($id)
	// {
	// 	if(!$this->isSessionSet())
	// 	{
	// 		$this->index();
	// 		return;
	// 	}
	// 	$_SESSION["USER_MODULE_PAGE"]	="salesComplaint"; // for lock screen management;
	// 	// echo '<script>alert($_SESSION["USER_MODULE_PAGE"]")</script>';
	// 	echo $_SESSION["USER_MODULE_PAGE"];
	// 	$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
	// 	$data 					 = array();
	// 	$data["headTitle"] 		 = $this->headTitle ." :Login as ". $_SESSION['ADMIN_ID'];
    //     $data["adminController"] = $this->adminController;
	// 	$headTitleAddText		= " : Login as ";
	// 	$headTitleAddId			= $_SESSION['ADMIN_ID'];
	// 	$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
	// 	$db						 = new Database();
	// 	//	$data["categoryCount"]	 = $db->totalCount("Id", 'product_category',"Status='Active'");
		
	// 	$data["Id"]	 	 		 = $id;
	// 	$db						 = new Database();
	// 	$regId					 = $db->getFieldValueById("client_complaint_reply","ClientId", "Id='{$id}'");
	// 	$data["profilePhotoPath"]= $db->getFieldValueById("client_registration","ProfilePhotoPath", "Id='{$regId}'");
	// 	$data["profilePhoto"]	 = $db->getFieldValueById("client_registration","ProfilePhoto", "Id='{$regId}'");
	// 	$data["message"]		 = $db->getFieldValueById("client_complaint_reply","Message", "Id='{$id}'");
	// 	$data["date"]	 		 = $db->getFieldValueById("client_complaint_reply","CreatedOn", "Id='{$id}'");
	// 	$firstName= $db->getFieldValueById("client_registration","FirstName", "Id='{$regId}'");
	// 	$lastName= $db->getFieldValueById("client_registration","LastName", "Id='{$regId}'");

	// 	$data["name"]	 	 	 = $firstName." ".$lastName;
	// 	$message		= $db->getFieldValueById("client_complaint_reply_comment","Reply", "QueryId='{$id}'");
	// 	if($message!="")
	// 		$data["queryReply"] =$message;
	// 	else
	// 		$data["queryReply"] ="Reply Message";
	// 	$this->load->view("brq-admin/sales-complaint-view", $data);	
	// }
	public function queryView($id){
		// echo "<script>alert($id)</script>";
		$this->load->model('Complaint_model');
		$this->load->database();
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		
		$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		 
		  // update the status of the complaint
		  $this->db->where('ParentQueryId', $id);
		 $this->db->update('client_complaint', array('Status' => 'Seen'));


		$complaint_id = $this->uri->segment(3); // fetch the 3rd segment of the URL
		// echo "$complaint_id";
		$data 					 = array();
		$data["headTitle"] 		 = $this->headTitle ." :Login as ". $_SESSION['ADMIN_ID'];
		$data["adminController"] = $this->adminController;
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$db						 = new Database();
	    $data["Id"]	 	 		 = $id;
		// $db						 = new Database();
		

		$complaint_details = $this->Complaint_model->get_complaint_details($id);
		if (!$complaint_details) {
			echo "No complaint details found for ID: " . $id;
			return;
		}
         $data['complaint_details'] = $complaint_details;
		
		 //fetching the reply for coresponding complaint id 
		//  $reply_details = $this->Complaint_model->get_complaint_reply($complaint_id);
		//  $data['reply_details'] =  $reply_details;
		$data['complaint_reply']= $this->Complaint_model->get_all_complaint_replies($complaint_id);
		$this->load->view("brq-admin/queryView", $data);	

}


public function sendReply() {
	$this->load->model("Email_model");
	// Get the data from the AJAX request
	$reply_msg = $this->input->post('reply_msg');
	$enquiry_id = $this->input->post('enquiry_id');

	// Validate the input data
	if(empty($reply_msg)) {
		$response = array('success' => false, 'message' => 'Please enter a valid reply message');
		echo json_encode($response);
		return;
	}

	// Update the enquiry with the reply message
	$data = array('Reply' => $reply_msg,'Status' =>'Replied');
	$this->db->where('Id', $enquiry_id);
	$result = $this->db->update('client_sales_enquiry_query', $data);

	

	// Check if the query was successful
	if($result) {
		$response = array('success' => true);
		echo json_encode($response);
	} else {
		$response = array('success' => false, 'message' => 'Failed to send reply message');
		echo json_encode($response);
	}

	
	try {
		// Fetch the enquiry details
		$enquiry = $this->SalesEnquiryModel->getSalesEnquiry($enquiry_id);
		$name = $enquiry['ContactPersonName'];
		$toEmailId = $enquiry['ContactPersonEmailId'];
		$companyName = $enquiry['ContactPersonCompanyName'];
		$query = $enquiry['Query'];
		$reply = $enquiry['Reply'];
		$subject 	  = "Reply for the query";

		// Send email
		$this->Email_model->mailDetails($name, $toEmailId, $query, $reply,$subject);
	} catch (Exception $e) {
		// Handle email sending errors
		log_message('error', 'Email sending failed: ' . $e->getMessage());
	}
}



public function salesEnquiryDetailedvVew()
{
	$this->load->model("SalesEnquiryModel");
	if(!$this->isSessionSet())
	{
		$this->index();
		return;
	}

	$data 					 = array();
	$data["headTitle"] 		 = $this->headTitle ." :Login as ". $_SESSION['ADMIN_ID'];
	$data["adminController"] = $this->adminController;
	$headTitleAddText		= " : Login as ";
	$headTitleAddId			= $_SESSION['ADMIN_ID'];
	$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
	$db						 = new Database();
	$id = $this->uri->segment(3); // Get the id from the URL

	 // Update the status of the complaint to "Seen" only if it is currently set to "New"
	 $enquiry = $this->SalesEnquiryModel->getSalesEnquiry($id);
	 if ($enquiry['Status'] == 'New') {
		 $this->db->where('Id', $id);
		 $this->db->update('client_sales_enquiry_query', array('Status' => 'Seen'));
	 }

	$data['enquiry'] =  $enquiry;

	$enquirylist = $this->SalesEnquiryModel->getAllEnquiries();

	$this->load->view("brq-admin/salesEnquiryDetailedvVew", $data);
	
}




public function salesEnquiry($id="")
	{
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}

		$data 					 = array();
		$data["headTitle"] 		 = $this->headTitle ." :Login as ". $_SESSION['ADMIN_ID'];
        $data["adminController"] = $this->adminController;
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$data["menuId"]			=$id;
		$db						 = new Database();
	
		
		$this->load->view("brq-admin/salesEnquiry", $data);
		
	}
	public function salesEnquiryList($menuid="")	
	{
		$this->load->model("SalesEnquiryModel");

		$list 	= $this->SalesEnquiryModel->getDataTables();
		$data 	= array();
        $data1 	= array();
		$no 	= $_POST['start']; 
		
		//$no=1;
		foreach ($list as $data) {
		
			$statusClass = "label label-success";
			$showClass	 = "label label-success";
			$no++;
			
			$row = array();
			$row[] = $data->ContactPersonName;
			$row[] = $data->ContactPersonEmailId;
			$row[] = $data->ContactPersonCompanyName;
			$row[] = $data->Query;
			$row[] = $data->Status;
			
			$permission = $_SESSION['GROUP_PERMISSION'];
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);

			$actions ="";
			$view ="Main_Visible_".$menuid;

			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			//add html for action
			if(in_array($view,$userGroupPermission)||in_array($view,$userWisePermission))
			{
			 $actions = '<a id="viewButton" class="btn btn-sm btn-info" href="javascript:void(0)"  title="Click to View Detail" onclick="viewData('."'". $data->Id ."'".')"><i class="fa fa-sticky-note-o"></i>View..</a>';
			}	      
					 // <a  id="deleteButton" class="btn btn-sm btn-danger" href="javascript:void(0)" title="Click to Delete" onclick="deleteData('."'".$data->Id."'".')"><i class="fa fa-trash-o" aria-hidden="true"></i> Delete</a>';
		  		  
			         //'<a  id="editButton" class="btn btn-sm btn-primary" href="javascript:void(0)" title="Click to Edit" onclick="editData('."'".$data->Id."'".')"><i class="fa fa-pencil" aria-hidden="true"></i> Edit</a>;
				  
			 $row[] =$actions;
			$data1[] = $row;
		}

		$output = array(
						"draw" => $_POST['draw'],
						"recordsTotal" => $this->SalesEnquiryModel->countAll(),
						"recordsFiltered" => $this->SalesEnquiryModel->countFiltered(),
						"data" => $data1,
				);                                                                                                                                                      
		//output to json format
		echo json_encode($output);
	}

	public function notification_outbox()

	   {
	
		if(!$this->isSessionSet())
		{
			$this->login();
			return;
		}
			$data 					  = array();
			$data["headTitle"] 		  = $this->headTitle ." - notification-outbox";
			$data["clientController"] = $this->clientController;
			$db						  = new Database();
			// $clientRegId 			  = $_SESSION['CLIENT_REG_ID'];
			// echo "<script>alert($clientRegId)</script>";
			// $client_notificationCount = $db->totalCount("Id", 'client_notifications', " ClientRegId ='$clientRegId' ");
			// $client_notificationCount = $db->totalCount("Id", 'client_notifications');
			// echo "<script>alert($client_notificationCount)</script>";
			// $data['notificationCount'] =$client_notificationCount;
			$this->load->view("brq-admin/notification-outbox", $data);


	   }
	   public function notification_compose_new_registration()
	   {
		   
		   $db = new Database();
		   
		   if(!$this->isSessionSet())
		   {
			   $this->index();
			   return;
		   }
		   $_SESSION["USER_MODULE_PAGE"]	="notification-compose"; // for lock screen management;
		   $this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		   
		   
		   $data 					= array();
		   $headTitleAddText		= " : Login as ";
		   $headTitleAddId			= $_SESSION['ADMIN_ID'];
		   $data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		   
		   $client_names = $this->ClientNotification_model->get_client_names();
			// Pass the client names to the view
			$data['client_names'] = $client_names;
		   $this->load->view("brq-admin/notification-compose", $data);
	   
	   }
	   public function notificationEmail($resData)
		{
			$this->load->model("Email_model");
			$db = new Database();
			$toEmailIds = explode(',', $resData->ClientEmail);
			$toNames = explode(',', $resData->FullName);
			$adminName = $_SESSION['ADMIN_ID'];
			$designation = $_SESSION['ADMIN_USER_TYPE'];
			$message = $resData->Notification;
			$subject = $resData->Subject;
			$sub = "BRQ";
		
			foreach ($toEmailIds as $key => $toEmailId) {
				$toEmailId = trim($toEmailId);
				$res=$this->Email_model->notificationEmail($toEmailId, $toName, $sub, $subject, $message);
				print_r($res);
		}
}
public function sendSMS($mobileNumber, $sendMessage,$templateType){
	$this->load->helper("sms_helper");
	$db = new Database();
	// $message = $db->getFieldValueById("sys_sms_templates", "MessageTemplate", "SmsCategory='TRANSACTIONAL' AND SmsType='Greetings'");
	$message = $db->getFieldValueById("sys_sms_templates", "MessageTemplate", "SmsCategory='TRANSACTIONAL' AND SmsType='$templateType'");
	$templateId  = trim($db->getFieldValueById("sys_sms_templates", "TemplateId", "SmsCategory='TRANSACTIONAL' AND SmsType='$templateType'"));

	$replaceStr  = array( $sendMessage, "mobile verification");
	$message 	 = strMultipleReplace("{#var#}", $replaceStr, $message );
	foreach ($mobileNumber as $number) {
        $smsObj = new SmsSender($number, $message, 0, $templateId); // mobitTo, $message, message type as 0 for planetext  and template id
        $res1 = $smsObj->send();
    }
}
function useractionpermission($subid,$dataId)

		{
			$permission = $_SESSION['GROUP_PERMISSION'];
		
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			// print_r($userGroupPermission);
			$actions ="";
			$view 	="Sub_Visible_".$subid;
			$edit 	="Sub_Edit_".$subid;
			$copy 	="Sub_Copy_".$subid;
			$delete = "Sub_Del_".$subid;
			$approve = "Sub_App_".$subid;
			$update = "Sub_Update_".$subid;
			$verify ="Sub_Verify_".$subid;
			$finish ="Sub_Finish_".$subid;
			$reject = "Sub_Reject_".$subid;
			$accept ="Sub_Accept_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="edit('."'".$dataId."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="edit('."'".$dataId."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Delete" onclick="deleted('."'".$dataId."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			
			if(in_array($approve,$userGroupPermission) || in_array($approve,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="approveButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Approve" onclick="approve('."'".$dataId."'".', true);"><span class="fa fa-files-o text-fanger"></span> Approve</a>';
			}
			if(in_array($update,$userGroupPermission) || in_array($update,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="updateButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Update Status" onclick="update('."'".$dataId."'".')"><span class="fa fa-trash text-fanger"></span> Update Status</a>';
			}
			if(in_array($verify,$userGroupPermission) || in_array($verify,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="verifyButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Verify" onclick="verify('."'".$dataId."'".')"><span class="fa fa-trash text-fanger"></span> Verify</a>';
			}
			if(in_array($reject,$userGroupPermission) || in_array($reject,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="rejectButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Reject" onclick="reject('."'".$dataId."'".')"><span class="fa fa-trash text-fanger"></span> Reject</a>';
			}
			if(in_array($accept,$userGroupPermission) || in_array($accept,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="acceptButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Accept" onclick="Accept('."'".$dataId."'".')"><span class="fa fa-trash text-fanger"></span> Accept</a>';
			}
			$actions .=' </div>'
	                  .'</div>';
			return $actions;
	
		}

   
function useractionpermissionUnderSubMenu($subid,$dataId)

{
			$permission = $_SESSION['GROUP_PERMISSION'];
		
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			// print_r($userGroupPermission);
			$actions ="";
			$view ="Under_Visible_".$subid;
			$edit ="Under_Edit_".$subid;
			$copy ="Under_Copy_".$subid;
			$delete = "Under_Del_".$subid;
			$approve = "Under_App_".$subid;
			$update = "Under_Update_".$subid;
			$verify ="Under_Verify_".$subid;
			$finish ="Under_Finish_".$subid;
			$reject = "Under_Reject_".$subid;
			$accept ="Under_Accept_".$subid;
			$issue	="Under_Issue_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window" aria-expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($view,$userGroupPermission)||in_array($view,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
					.'<a id="viewButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to View" onclick="view('."'".$dataId."'".')"><span class="fa fa-edit"></span> View</a>';
			}
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click to Edit" onclick="edit('."'".$dataId."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Copy" onclick="edit('."'".$dataId."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Delete" onclick="deleted('."'".$dataId."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			
			if(in_array($approve,$userGroupPermission) || in_array($approve,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="approveButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to Approve" onclick="approve('."'".$dataId."'".', true);"><span class="fa fa-files-o text-fanger"></span> Approve</a>';
			}
			if(in_array($update,$userGroupPermission) || in_array($update,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="updateButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Update" onclick="update('."'".$dataId."'".')"><span class="fa fa-trash text-fanger"></span> Update Status</a>';
			}
			if(in_array($verify,$userGroupPermission) || in_array($verify,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="verifyButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Verify" onclick="verify('."'".$dataId."'".')"><span class="fa fa-trash text-fanger"></span> Verify</a>';
			}
			if(in_array($reject,$userGroupPermission) || in_array($reject,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="rejectButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Reject" onclick="reject('."'".$dataId."'".')"><span class="fa fa-trash text-fanger"></span> Reject</a>';
			}
			if(in_array($accept,$userGroupPermission) || in_array($accept,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="acceptButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Accept" onclick="accept('."'".$dataId."'".')"><span class="fa fa-trash text-fanger"></span> Accept</a>';
			}
			if(in_array($issue,$userGroupPermission) || in_array($issue,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="issueButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  title="Click to Issue" onclick="issue('."'".$dataId."'".')"><span class="fa fa-trash text-fanger"></span> Issue</a>';
			}

			$actions .=' </div>'
	                  .'</div>';
			return $actions;
	
}

function useractionpermissionMainSubMenu($subid,$dataId)
{
			$permission = $_SESSION['GROUP_PERMISSION'];
		
			$userGroupPermission =array();
			$userGroupPermission = explode(",",$permission);
			// print_r($userGroupPermission);
			$actions ="";
			$view ="Main_Visible_".$subid;
			$edit ="Main_Edit_".$subid;
			$copy ="Main_Copy_".$subid;
			$delete = "Main_Del_".$subid;
			$approve = "Main_App_".$subid;
			$update = "Main_Update_".$subid;
			$verify ="Main_Verify_".$subid;
			$finish ="Main_Finish_".$subid;
			$reject = "Main_Reject_".$subid;
			$accept ="Main_Accept_".$subid;
			$issue	="Main_Issue_".$subid;
			$userPermission = $_SESSION['USER_PERMISSION'];
			$userWisePermission =array();
			$userWisePermission = explode(",",$userPermission);
			
			$actions = '<div class="btn-group">'
	                  .' <button type="button" class="btn btn-default dropdown-toggle dropdown-icon" data-toggle="dropdown" data-boundary="window" aria-

expanded="false">'
	                  .'Action<span class="sr-only">Toggle Dropdown</span>'
	                  .'</button>';
			if(in_array($edit,$userGroupPermission)||in_array($edit,$userWisePermission))
			{
				$actions .='<div class="dropdown-menu" role="menu" style="">'
	                  .'<a id="editButton"  class="dropdown-item text-primary edit_data dropdown-item-auto-width" href="javascript:void(0)" title="Click 

to Edit" onclick="edit('."'".$dataId."'".')"><span class="fa fa-edit"></span> Edit</a>';
			}
			if(in_array($copy,$userGroupPermission) || in_array($copy,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="copyButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click to 

Copy" onclick="copy('."'".$dataId."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($delete,$userGroupPermission) || in_array($delete,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="deleteButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  

title="Click to Delete" onclick="delete('."'".$dataId."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			
			if(in_array($approve,$userGroupPermission) || in_array($approve,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="approveButton"  class="dropdown-item text-info copy_data dropdown-item-auto-width"  href="javascript:void(0)" title="Click 

to Copy" onclick="approve('."'".$dataId."'".', true);"><span class="fa fa-files-o text-fanger"></span> Copy</a>';
			}
			if(in_array($update,$userGroupPermission) || in_array($update,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="updateButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  

title="Click to Delete" onclick="update('."'".$dataId."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			if(in_array($verify,$userGroupPermission) || in_array($verify,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="verifyButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  

title="Click to Delete" onclick="verify('."'".$dataId."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			if(in_array($reject,$userGroupPermission) || in_array($reject,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="rejectButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  

title="Click to Delete" onclick="delete('."'".$dataId."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			if(in_array($accept,$userGroupPermission) || in_array($accept,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="acceptButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  

title="Click to Delete" onclick="delete('."'".$dataId."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}
			if(in_array($issue,$userGroupPermission) || in_array($issue,$userWisePermission))
			{
				$actions .='<div class="dropdown-divider"></div>'
	                  .'<a id="issueButton"  class="dropdown-item text-danger delete_data dropdown-item-auto-width"  href="javascript:void(0)"  

title="Click to Delete" onclick="delete('."'".$dataId."'".')"><span class="fa fa-trash text-fanger"></span> Delete</a>';
			}

			$actions .=' </div>'
	                  .'</div>';
			return $actions;
	
}

public function admin_main()
	{
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $this->AccessDenied();// AJAX Verification
		//$_SESSION["USER_MODULE_PAGE"]	="adminHome"; // for lock screen management;
		//$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$this->load->view("brq-admin/admin_main", $data);
		
	}

public function hr_main()
	{
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $this->AccessDenied();// AJAX Verification
		//$_SESSION["USER_MODULE_PAGE"]	="adminHome"; // for lock screen management;
		//$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$this->load->view("brq-admin/hr_main", $data);
		
	}

	public function payroll_main()
	{
		
		if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
		// $this->AccessDenied();// AJAX Verification
		//$_SESSION["USER_MODULE_PAGE"]	="adminHome"; // for lock screen management;
		//$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		
		$data 					= array();
		$headTitleAddText		= " : Login as ";
		$headTitleAddId			= $_SESSION['ADMIN_ID'];
		$data 					= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$this->load->view("brq-admin/payroll_main", $data);
		
	}

	public function get_module_list($role="")
{
	if($role=="")
		$role				= $_SESSION['USER_ROLE_ID'];
	
     $result             = $this->AdminModel->getAdminModule($role);
     $data['module']   = $result;
    
    
     return $data;
       
}

public function user_permission_module()
	{
       if(!$this->isSessionSet())
		{
			$this->index();
			return;
		}
	     $_SESSION["USER_MODULE_PAGE"]	="user_rights"; // for lock screen management;
		//$this->isScreenLocked(); // screen locked checking. redirect to unlock screen
		$data 						= array();
		$headTitleAddText			= " : User rights - Login as ";
		$headTitleAddId				= $_SESSION['ADMIN_ID'];
		$data 						= $this->Common_model->common_sidebar_counts($headTitleAddText,$headTitleAddId);
		$this->load->model("AdminModel");
		$res                = $this->AdminModel->get_user_role();
        $data['userRole']   = $res;

		$result             = $this->AdminModel->get_module_master();
        $data['moduleMaster']   = $result; 
		$data['li_token']		=$_SESSION['li_token'];
        
		$this->load->view('brq-admin/user-permission-module',$data);
	
	}
	public function get_all_module_list($role="")
{
	
	
     $result             = $this->AdminModel->get_module_master($role);
     $data['module']   = $result;
     
   
     echo json_encode($data);
}

public function save_permission_module()
{
	
	// $userId                 = $this->input->post('user_id');
	$token					=$this->input->post('li_token');
	
   $role                    = $this->input->post('user_role');
   $selectedModuleItems   = $this->input->post('module_master');
   $allModuleIds            	  = $this->AdminModel->get_module_master();
   foreach ($allModuleIds as $module) {
		$moduleId=$module->id;
		$data = array(
			
			'is_granted'   => in_array($moduleId, $selectedModuleItems) ? 'yes' : 'no',
		);
		$where  = "module_id='{$moduleId}' AND role_id='{$role}'";
		$result= $this->AdminModel->update_module_permission($data,$where);
		
	}
	
	if($result)
		echo "Success";
}


	
} // -------CLASS ENDING
